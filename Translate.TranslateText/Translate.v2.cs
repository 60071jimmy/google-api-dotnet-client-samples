//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;

namespace Google.Apis.Data
{
    public class DetectionsListResponse : IResponse
    {
        /// <summary>A detections contains detection results of several text</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("detections")]
        public virtual IList<DetectionsResource> Detections { get; set; }

        #region IResponse Members

        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    /// <summary>An array of languages which we detect for the given text The most likely language list first.</summary>
    public class DetectionsResource : List<DetectionsResource.Entry>
    {
        #region Nested type: Entry

        public class Entry
        {
            /// <summary>The confidence of the detection resul of this language.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("confidence")]
            public virtual double Confidence { get; set; }

            /// <summary>A boolean to indicate is the language detection result reliable.</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("isReliable")]
            public virtual bool IsReliable { get; set; }

            /// <summary>The language we detect</summary>
            [Newtonsoft.Json.JsonPropertyAttribute("language")]
            public virtual string Language { get; set; }
        }

        #endregion
    }

    public class LanguagesListResponse : IResponse
    {
        /// <summary>List of source/target languages supported by the translation API. If target parameter is unspecified, the list is sorted by the ASCII code point order of the language code. If target parameter is specified, the list is sorted by the collation order of the language name in the target language.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("languages")]
        public virtual IList<LanguagesResource> Languages { get; set; }

        #region IResponse Members

        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class LanguagesResource
    {
        /// <summary>The language code.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("language")]
        public virtual string Language { get; set; }

        /// <summary>The localized name of the language if target parameter is given.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public virtual string Name { get; set; }
    }

    public class TranslationsListResponse : IResponse
    {
        /// <summary>Translations contains list of translation results of given text</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("translations")]
        public virtual IList<TranslationsResource> Translations { get; set; }

        #region IResponse Members

        [Newtonsoft.Json.JsonPropertyAttribute("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class TranslationsResource
    {
        /// <summary>Detected source language if source parameter is unspecified.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("detectedSourceLanguage")]
        public virtual string DetectedSourceLanguage { get; set; }

        /// <summary>The translation.</summary>
        [Newtonsoft.Json.JsonPropertyAttribute("translatedText")]
        public virtual string TranslatedText { get; set; }
    }
}

namespace Google.Apis
{
    public class TranslateService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        private const string Version = "v2";

        private const string Name = "translate";

        private const string BaseUri = "https://www.googleapis.com/language/translate/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;
        private readonly IAuthenticator authenticator;

        private readonly DetectionsResource detections;
        private readonly IService genericService;

        private readonly LanguagesResource languages;

        private readonly TranslationsResource translations;

        public TranslateService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            detections = new DetectionsResource(this);
            languages = new LanguagesResource(this);
            translations = new TranslationsResource(this);
        }

        public TranslateService()
            : this(
                new DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual DetectionsResource Detections
        {
            get { return detections; }
        }

        public virtual LanguagesResource Languages
        {
            get { return languages; }
        }

        public virtual TranslationsResource Translations
        {
            get { return translations; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class DetectionsResource
    {
        private const string Resource = "detections";

        private readonly log4net.ILog logger = log4net.LogManager.GetLogger(typeof(DetectionsResource));
        private readonly ISchemaAwareRequestExecutor service;

        public DetectionsResource(TranslateService service)
        {
            this.service = service;
        }

        /// <summary>Detect the language of text.</summary>
        /// <param name="q">Required - The text to detect</param>
        public virtual Stream ListAsStream(Repeatable<string> q)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["q"] = q;
            logger.Debug("Executing detections.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing detections.list");
            return ret;
        }

        /// <summary>Detect the language of text.</summary>
        /// <param name="q">Required - The text to detect</param>
        public virtual DetectionsListResponse ListAndExecute(Repeatable<string> q)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["q"] = q;
            logger.Debug("Executing detections.list");
            DetectionsListResponse ret =
                service.JsonToObject<DetectionsListResponse>(
                    service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing detections.list");
            return ret;
        }

        /// <summary>Detect the language of text.</summary>
        /// <param name="q">Required - The text to detect</param>
        public virtual ListRequest List(Repeatable<string> q)
        {
            return new ListRequest(service, q);
        }

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<DetectionsListResponse>
        {
            private readonly Repeatable<string> q;

            public ListRequest(ISchemaAwareRequestExecutor service, Repeatable<string> q) : base(service)
            {
                this.q = q;
            }

            /// <summary>The text to detect</summary>
            [RequestParameter("q")]
            public virtual Repeatable<string> Q
            {
                get { return q; }
            }

            protected override string ResourceName
            {
                get { return "detections"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }

    public class LanguagesResource
    {
        private const string Resource = "languages";

        private readonly log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LanguagesResource));
        private readonly ISchemaAwareRequestExecutor service;

        public LanguagesResource(TranslateService service)
        {
            this.service = service;
        }

        /// <summary>List the source/target languages supported by the API</summary>
        /// <param name="target">Optional - the language and collation in which the localized results should be returned</param>
        public virtual Stream ListAsStream([Optional] string target)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["target"] = target;
            logger.Debug("Executing languages.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing languages.list");
            return ret;
        }

        /// <summary>List the source/target languages supported by the API</summary>
        /// <param name="target">Optional - the language and collation in which the localized results should be returned</param>
        public virtual LanguagesListResponse ListAndExecute([Optional] string target)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["target"] = target;
            logger.Debug("Executing languages.list");
            LanguagesListResponse ret =
                service.JsonToObject<LanguagesListResponse>(
                    service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing languages.list");
            return ret;
        }

        /// <summary>List the source/target languages supported by the API</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>List the source/target languages supported by the API</summary>
        /// <param name="target">Optional - the language and collation in which the localized results should be returned</param>
        public virtual ListRequest List([Optional] string target)
        {
            return new ListRequest(service, target);
        }

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<LanguagesListResponse>
        {
            private string target;

            public ListRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public ListRequest(ISchemaAwareRequestExecutor service, [Optional] string target) : base(service)
            {
                this.target = target;
            }

            /// <summary>the language and collation in which the localized results should be returned</summary>
            [RequestParameter("target")]
            public virtual string Target
            {
                get { return target; }
                set { target = value; }
            }

            protected override string ResourceName
            {
                get { return "languages"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }

    public class TranslationsResource
    {
        #region Format enum

        /// <summary>The format of the text</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Format
        {
            /// <summary>Specifies the input is in HTML</summary>
            [StringValue("html")] Html,

            /// <summary>Specifies the input is in plain textual format</summary>
            [StringValue("text")] Text,
        }

        #endregion

        private const string Resource = "translations";

        private readonly log4net.ILog logger = log4net.LogManager.GetLogger(typeof(TranslationsResource));
        private readonly ISchemaAwareRequestExecutor service;

        public TranslationsResource(TranslateService service)
        {
            this.service = service;
        }

        /// <summary>Returns text translations from one language to another.</summary>
        /// <param name="q">Required - The text to translate</param>
        /// <param name="target">Required - The target language into which the text should be translated</param>
        /// <param name="cid">Optional - The customization id for translate</param>
        /// <param name="format">Optional - Must be one of the following values [html, text] - The format of the text</param>
        /// <param name="source">Optional - The source language of the text</param>
        public virtual Stream ListAsStream(Repeatable<string> q,
                                           string target,
                                           [Optional] Repeatable<string> cid,
                                           [Optional] Format? format,
                                           [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["q"] = q;
            parameters["target"] = target;
            parameters["cid"] = cid;
            parameters["format"] = format;
            parameters["source"] = source;
            logger.Debug("Executing translations.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing translations.list");
            return ret;
        }

        /// <summary>Returns text translations from one language to another.</summary>
        /// <param name="q">Required - The text to translate</param>
        /// <param name="target">Required - The target language into which the text should be translated</param>
        /// <param name="cid">Optional - The customization id for translate</param>
        /// <param name="format">Optional - Must be one of the following values [html, text] - The format of the text</param>
        /// <param name="source">Optional - The source language of the text</param>
        public virtual TranslationsListResponse ListAndExecute(Repeatable<string> q,
                                                               string target,
                                                               [Optional] Repeatable<string> cid,
                                                               [Optional] Format? format,
                                                               [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["q"] = q;
            parameters["target"] = target;
            parameters["cid"] = cid;
            parameters["format"] = format;
            parameters["source"] = source;
            logger.Debug("Executing translations.list");
            TranslationsListResponse ret =
                service.JsonToObject<TranslationsListResponse>(
                    service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing translations.list");
            return ret;
        }

        /// <summary>Returns text translations from one language to another.</summary>
        /// <param name="q">Required - The text to translate</param>
        /// <param name="target">Required - The target language into which the text should be translated</param>
        public virtual ListRequest List(Repeatable<string> q, string target)
        {
            return new ListRequest(service, q, target);
        }

        /// <summary>Returns text translations from one language to another.</summary>
        /// <param name="q">Required - The text to translate</param>
        /// <param name="target">Required - The target language into which the text should be translated</param>
        /// <param name="cid">Optional - The customization id for translate</param>
        /// <param name="format">Optional - Must be one of the following values [html, text] - The format of the text</param>
        /// <param name="source">Optional - The source language of the text</param>
        public virtual ListRequest List(Repeatable<string> q,
                                        string target,
                                        [Optional] Repeatable<string> cid,
                                        [Optional] Format? format,
                                        [Optional] string source)
        {
            return new ListRequest(service, q, target, cid, format, source);
        }

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<TranslationsListResponse>
        {
            private readonly Repeatable<string> q;
            private readonly string target;
            private Repeatable<string> cid;

            private Format? format;

            private string source;

            public ListRequest(ISchemaAwareRequestExecutor service, Repeatable<string> q, string target)
                : base(service)
            {
                this.q = q;
                this.target = target;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               Repeatable<string> q,
                               string target,
                               [Optional] Repeatable<string> cid,
                               [Optional] Format? format,
                               [Optional] string source) : base(service)
            {
                this.q = q;
                this.target = target;
                this.cid = cid;
                this.format = format;
                this.source = source;
            }

            /// <summary>The customization id for translate</summary>
            [RequestParameter("cid")]
            public virtual Repeatable<string> Cid
            {
                get { return cid; }
                set { cid = value; }
            }

            /// <summary>The format of the text</summary>
            [RequestParameter("format")]
            public virtual Format? Format
            {
                get { return format; }
                set { format = value; }
            }

            /// <summary>The text to translate</summary>
            [RequestParameter("q")]
            public virtual Repeatable<string> Q
            {
                get { return q; }
            }

            /// <summary>The source language of the text</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
                set { source = value; }
            }

            /// <summary>The target language into which the text should be translated</summary>
            [RequestParameter("target")]
            public virtual string Target
            {
                get { return target; }
            }

            protected override string ResourceName
            {
                get { return "translations"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }
}