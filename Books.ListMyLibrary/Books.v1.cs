//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class Bookshelf : IResponse
    {
        /// <summary>Whether this bookshelf is PUBLIC or PRIVATE.</summary>
        [JsonProperty("access")]
        public virtual string Access { get; set; }

        /// <summary>Created time for this bookshelf (formatted UTC timestamp with millisecond resolution).</summary>
        [JsonProperty("created")]
        public virtual string Created { get; set; }

        /// <summary>Description of this bookshelf.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>Id of this bookshelf, only unique by user.</summary>
        [JsonProperty("id")]
        public virtual long Id { get; set; }

        /// <summary>Resource type for bookshelf metadata.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>URL to this resource.</summary>
        [JsonProperty("selfLink")]
        public virtual string SelfLink { get; set; }

        /// <summary>Title of this bookshelf.</summary>
        [JsonProperty("title")]
        public virtual string Title { get; set; }

        /// <summary>Last modified time of this bookshelf (formatted UTC timestamp with millisecond resolution).</summary>
        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        /// <summary>Number of volumes in this bookshelf.</summary>
        [JsonProperty("volumeCount")]
        public virtual long VolumeCount { get; set; }

        /// <summary>Last time a volume was added or removed from this bookshelf (formatted UTC timestamp with millisecond resolution).</summary>
        [JsonProperty("volumesLastUpdated")]
        public virtual string VolumesLastUpdated { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class Bookshelves : IResponse
    {
        /// <summary>A list of bookshelves.</summary>
        [JsonProperty("items")]
        public virtual IList<Bookshelf> Items { get; set; }

        /// <summary>Resource type.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class DownloadAccessRestriction
    {
        /// <summary>If restricted, whether access is granted for this (user, device, volume).</summary>
        [JsonProperty("deviceAllowed")]
        public virtual bool DeviceAllowed { get; set; }

        /// <summary>If restricted, the number of content download licenses already acquired (including the requesting client, if licensed).</summary>
        [JsonProperty("downloadsAcquired")]
        public virtual long DownloadsAcquired { get; set; }

        /// <summary>Resource type.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>If restricted, the maximum number of content download licenses for this volume.</summary>
        [JsonProperty("maxDownloadDevices")]
        public virtual long MaxDownloadDevices { get; set; }

        /// <summary>Error/warning message.</summary>
        [JsonProperty("message")]
        public virtual string Message { get; set; }

        /// <summary>Client nonce for verification. Download access and client-validation only.</summary>
        [JsonProperty("nonce")]
        public virtual string Nonce { get; set; }

        /// <summary>Error/warning reason code.  Additional codes may be added in the future. 0   OK 100   ACCESS_DENIED_PUBLISHER_LIMIT 101   ACCESS_DENIED_LIMIT 200   WARNING_USED_LAST_ACCESS</summary>
        [JsonProperty("reasonCode")]
        public virtual string ReasonCode { get; set; }

        /// <summary>Whether this volume has any download access restrictions.</summary>
        [JsonProperty("restricted")]
        public virtual bool Restricted { get; set; }

        /// <summary>Response signature.</summary>
        [JsonProperty("signature")]
        public virtual string Signature { get; set; }

        /// <summary>Client app identifier for verification. Download access and client-validation only.</summary>
        [JsonProperty("source")]
        public virtual string Source { get; set; }

        /// <summary>Identifies the volume for which this entry applies.</summary>
        [JsonProperty("volumeId")]
        public virtual string VolumeId { get; set; }
    }

    public class ReadingPosition
    {
        /// <summary>Position in an EPUB as a CFI.</summary>
        [JsonProperty("epubCfiPosition")]
        public virtual string EpubCfiPosition { get; set; }

        /// <summary>Position in a volume for image-based content.</summary>
        [JsonProperty("gbImagePosition")]
        public virtual string GbImagePosition { get; set; }

        /// <summary>Position in a volume for text-based content.</summary>
        [JsonProperty("gbTextPosition")]
        public virtual string GbTextPosition { get; set; }

        /// <summary>Resource type for a reading position.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Position in a PDF file.</summary>
        [JsonProperty("pdfPosition")]
        public virtual string PdfPosition { get; set; }

        /// <summary>Timestamp when this reading position was last updated (formatted UTC timestamp with millisecond resolution).</summary>
        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        /// <summary>Volume id associated with this reading position.</summary>
        [JsonProperty("volumeId")]
        public virtual string VolumeId { get; set; }
    }

    public class Review
    {
        /// <summary>Author of this review.</summary>
        [JsonProperty("author")]
        public virtual AuthorData Author { get; set; }

        /// <summary>Review text.</summary>
        [JsonProperty("content")]
        public virtual string Content { get; set; }

        /// <summary>Date of this review.</summary>
        [JsonProperty("date")]
        public virtual string Date { get; set; }

        /// <summary>URL for the full review text, for reviews gathered from the web.</summary>
        [JsonProperty("fullTextUrl")]
        public virtual string FullTextUrl { get; set; }

        /// <summary>Resource type for a review.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Star rating for this review. Possible values are ONE, TWO, THREE, FOUR, FIVE or NOT_RATED.</summary>
        [JsonProperty("rating")]
        public virtual string Rating { get; set; }

        /// <summary>Information regarding the source of this review, when the review is not from a Google Books user.</summary>
        [JsonProperty("source")]
        public virtual SourceData Source { get; set; }

        /// <summary>Title for this review.</summary>
        [JsonProperty("title")]
        public virtual string Title { get; set; }

        /// <summary>Source type for this review. Possible values are EDITORIAL, WEB_USER or GOOGLE_USER.</summary>
        [JsonProperty("type")]
        public virtual string Type { get; set; }

        /// <summary>Volume that this review is for.</summary>
        [JsonProperty("volumeId")]
        public virtual string VolumeId { get; set; }

        #region Nested type: AuthorData

        /// <summary>Author of this review.</summary>
        public class AuthorData
        {
            /// <summary>Name of this person.</summary>
            [JsonProperty("displayName")]
            public virtual string DisplayName { get; set; }
        }

        #endregion

        #region Nested type: SourceData

        /// <summary>Information regarding the source of this review, when the review is not from a Google Books user.</summary>
        public class SourceData
        {
            /// <summary>Name of the source.</summary>
            [JsonProperty("description")]
            public virtual string Description { get; set; }

            /// <summary>Extra text about the source of the review.</summary>
            [JsonProperty("extraDescription")]
            public virtual string ExtraDescription { get; set; }

            /// <summary>URL of the source of the review.</summary>
            [JsonProperty("url")]
            public virtual string Url { get; set; }
        }

        #endregion
    }

    public class Volume : IResponse
    {
        /// <summary>Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).</summary>
        [JsonProperty("accessInfo")]
        public virtual AccessInfoData AccessInfo { get; set; }

        /// <summary>Opaque identifier for a specific version of a volume resource. (in LITE projection)</summary>
        [JsonProperty("etag")]
        public virtual string Etag { get; set; }

        /// <summary>Unique identifier for a volume. (In LITE projection.)</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>Resource type for a volume. (In LITE projection.)</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).</summary>
        [JsonProperty("saleInfo")]
        public virtual SaleInfoData SaleInfo { get; set; }

        /// <summary>URL to this resource. (In LITE projection.)</summary>
        [JsonProperty("selfLink")]
        public virtual string SelfLink { get; set; }

        /// <summary>User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)</summary>
        [JsonProperty("userInfo")]
        public virtual UserInfoData UserInfo { get; set; }

        /// <summary>General volume information.</summary>
        [JsonProperty("volumeInfo")]
        public virtual VolumeInfoData VolumeInfo { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: AccessInfoData

        /// <summary>Any information about a volume related to reading or obtaining that volume text. This information can depend on country (books may be public domain in one country but not in another, e.g.).</summary>
        public class AccessInfoData
        {
            /// <summary>Combines the access and viewability of this volume into a single status field for this user. Values can be FULL_PURCHASED, FULL_PUBLIC_DOMAIN, SAMPLE or NONE. (In LITE projection.)</summary>
            [JsonProperty("accessViewStatus")]
            public virtual string AccessViewStatus { get; set; }

            /// <summary>The two-letter ISO_3166-1 country code for which this access information is valid. (In LITE projection.)</summary>
            [JsonProperty("country")]
            public virtual string Country { get; set; }

            [JsonProperty("downloadAccess")]
            public virtual DownloadAccessRestriction DownloadAccess { get; set; }

            /// <summary>Whether this volume can be embedded in a viewport using the Embedded Viewer API.</summary>
            [JsonProperty("embeddable")]
            public virtual bool Embeddable { get; set; }

            /// <summary>Information about epub content. (In LITE projection.)</summary>
            [JsonProperty("epub")]
            public virtual EpubData Epub { get; set; }

            /// <summary>Information about pdf content. (In LITE projection.)</summary>
            [JsonProperty("pdf")]
            public virtual PdfData Pdf { get; set; }

            /// <summary>Whether or not this book is public domain in the country listed above.</summary>
            [JsonProperty("publicDomain")]
            public virtual bool PublicDomain { get; set; }

            /// <summary>The read access of a volume. Possible values are PARTIAL, ALL_PAGES, NO_PAGES or UNKNOWN. This value depends on the country listed above. A value of PARTIAL means that the publisher has allowed some portion of the volume to be viewed publicly, without purchase. This can apply to eBooks as well as non-eBooks. Public domain books will always have a value of ALL_PAGES.</summary>
            [JsonProperty("viewability")]
            public virtual string Viewability { get; set; }

            #region Nested type: EpubData

            /// <summary>Information about epub content. (In LITE projection.)</summary>
            public class EpubData
            {
                /// <summary>URL to retrieve ACS token for epub download. (In LITE projection.)</summary>
                [JsonProperty("acsTokenLink")]
                public virtual string AcsTokenLink { get; set; }

                /// <summary>URL to download epub. (In LITE projection.)</summary>
                [JsonProperty("downloadLink")]
                public virtual string DownloadLink { get; set; }
            }

            #endregion

            #region Nested type: PdfData

            /// <summary>Information about pdf content. (In LITE projection.)</summary>
            public class PdfData
            {
                /// <summary>URL to retrieve ACS token for pdf download. (In LITE projection.)</summary>
                [JsonProperty("acsTokenLink")]
                public virtual string AcsTokenLink { get; set; }

                /// <summary>URL to download pdf. (In LITE projection.)</summary>
                [JsonProperty("downloadLink")]
                public virtual string DownloadLink { get; set; }
            }

            #endregion
        }

        #endregion

        #region Nested type: SaleInfoData

        /// <summary>Any information about a volume related to the eBookstore and/or purchaseability. This information can depend on the country where the request originates from (i.e. books may not be for sale in certain countries).</summary>
        public class SaleInfoData
        {
            /// <summary>URL to purchase this volume on the Google Books site. (in LITE projection)</summary>
            [JsonProperty("buyLink")]
            public virtual string BuyLink { get; set; }

            /// <summary>The two-letter ISO_3166-1 country code for which this sale information is valid. (In LITE projection.)</summary>
            [JsonProperty("country")]
            public virtual string Country { get; set; }

            /// <summary>Whether or not this volume is an eBook (can be added to the My eBooks shelf).</summary>
            [JsonProperty("isEbook")]
            public virtual bool IsEbook { get; set; }

            /// <summary>Suggested retail price. (In LITE projection.)</summary>
            [JsonProperty("listPrice")]
            public virtual ListPriceData ListPrice { get; set; }

            /// <summary>The actual selling price of the book. This is the same as the suggested retail or list price unless there are offers or discounts on this volume. (In LITE projection.)</summary>
            [JsonProperty("retailPrice")]
            public virtual RetailPriceData RetailPrice { get; set; }

            /// <summary>Whether or not this book is available for sale or offered for free in the Google eBookstore for the country listed above. Possible values are FOR_SALE, FREE or NOT_FOR_SALE.</summary>
            [JsonProperty("saleability")]
            public virtual string Saleability { get; set; }

            #region Nested type: ListPriceData

            /// <summary>Suggested retail price. (In LITE projection.)</summary>
            public class ListPriceData
            {
                /// <summary>Amount in the currency listed below. (In LITE projection.)</summary>
                [JsonProperty("amount")]
                public virtual double Amount { get; set; }

                /// <summary>An ISO 4217, three-letter currency code. (In LITE projection.)</summary>
                [JsonProperty("currencyCode")]
                public virtual string CurrencyCode { get; set; }
            }

            #endregion

            #region Nested type: RetailPriceData

            /// <summary>The actual selling price of the book. This is the same as the suggested retail or list price unless there are offers or discounts on this volume. (In LITE projection.)</summary>
            public class RetailPriceData
            {
                /// <summary>Amount in the currency listed below. (In LITE projection.)</summary>
                [JsonProperty("amount")]
                public virtual double Amount { get; set; }

                /// <summary>An ISO 4217, three-letter currency code. (In LITE projection.)</summary>
                [JsonProperty("currencyCode")]
                public virtual string CurrencyCode { get; set; }
            }

            #endregion
        }

        #endregion

        #region Nested type: UserInfoData

        /// <summary>User specific information related to this volume. (e.g. page this user last read or whether they purchased this book)</summary>
        public class UserInfoData
        {
            /// <summary>Whether or not this volume was purchased by the authenticated user making the request. (In LITE projection.)</summary>
            [JsonProperty("isPurchased")]
            public virtual bool IsPurchased { get; set; }

            [JsonProperty("readingPosition")]
            public virtual ReadingPosition ReadingPosition { get; set; }

            [JsonProperty("review")]
            public virtual Review Review { get; set; }

            /// <summary>Timestamp when this volume was last modified by a user action, such as a reading position update, volume purchase or writing a review. (RFC 3339 UTC date-time format).</summary>
            [JsonProperty("updated")]
            public virtual string Updated { get; set; }
        }

        #endregion

        #region Nested type: VolumeInfoData

        /// <summary>General volume information.</summary>
        public class VolumeInfoData
        {
            /// <summary>The names of the authors and/or editors for this volume. (in LITE projection)</summary>
            [JsonProperty("authors")]
            public virtual IList<String> Authors { get; set; }

            /// <summary>The mean review rating for this volume. (min = 1.0, max = 5.0)</summary>
            [JsonProperty("averageRating")]
            public virtual double AverageRating { get; set; }

            /// <summary>A list of subject categories, such as &quot;Fiction&quot;, &quot;Suspense&quot;, etc.</summary>
            [JsonProperty("categories")]
            public virtual IList<String> Categories { get; set; }

            /// <summary>An identifier for the version of the volume content (text &amp; images). (in LITE projection)</summary>
            [JsonProperty("contentVersion")]
            public virtual string ContentVersion { get; set; }

            /// <summary>A synopsis of the volume. The text of the description is formatted in HTML and includes simple formatting elements, such as &lt;b&gt;, &lt;i&gt;, &lt;br&gt;, etc. (In LITE projection.)</summary>
            [JsonProperty("description")]
            public virtual string Description { get; set; }

            /// <summary>Physical dimensions of this volume.</summary>
            [JsonProperty("dimensions")]
            public virtual DimensionsData Dimensions { get; set; }

            /// <summary>A list of image links for all the sizes that are available. (In LITE projection.)</summary>
            [JsonProperty("imageLinks")]
            public virtual ImageLinksData ImageLinks { get; set; }

            /// <summary>Industry standard identifiers for this volume.</summary>
            [JsonProperty("industryIdentifiers")]
            public virtual IList<IndustryIdentifiersData> IndustryIdentifiers { get; set; }

            /// <summary>URL to view information about this volume on the Google Books site. (in LITE projection)</summary>
            [JsonProperty("infoLink")]
            public virtual string InfoLink { get; set; }

            /// <summary>Best language for this volume (based on content). It is the two-letter ISO 639-1 code such as &apos;fr&apos;, &apos;en&apos;, etc.</summary>
            [JsonProperty("language")]
            public virtual string Language { get; set; }

            /// <summary>The main category to which this volume belongs. It will be the category from the categories list returned below that has the highest weight.</summary>
            [JsonProperty("mainCategory")]
            public virtual string MainCategory { get; set; }

            /// <summary>Total number of pages.</summary>
            [JsonProperty("pageCount")]
            public virtual long PageCount { get; set; }

            /// <summary>URL to preview this volume on the Google Books site.</summary>
            [JsonProperty("previewLink")]
            public virtual string PreviewLink { get; set; }

            /// <summary>Type of publication of this volume. Possible values are BOOK or MAGAZINE.</summary>
            [JsonProperty("printType")]
            public virtual string PrintType { get; set; }

            /// <summary>Date of publication. (In LITE projection.)</summary>
            [JsonProperty("publishedDate")]
            public virtual string PublishedDate { get; set; }

            /// <summary>Publisher of this volume. (In LITE projection.)</summary>
            [JsonProperty("publisher")]
            public virtual string Publisher { get; set; }

            /// <summary>The number of review ratings for this volume.</summary>
            [JsonProperty("ratingsCount")]
            public virtual long RatingsCount { get; set; }

            /// <summary>Volume subtitle. (In LITE projection.)</summary>
            [JsonProperty("subtitle")]
            public virtual string Subtitle { get; set; }

            /// <summary>Volume title. (In LITE projection.)</summary>
            [JsonProperty("title")]
            public virtual string Title { get; set; }

            #region Nested type: DimensionsData

            /// <summary>Physical dimensions of this volume.</summary>
            public class DimensionsData
            {
                /// <summary>Height or length of this volume (in cm).</summary>
                [JsonProperty("height")]
                public virtual string Height { get; set; }

                /// <summary>Thickness of this volume (in cm).</summary>
                [JsonProperty("thickness")]
                public virtual string Thickness { get; set; }

                /// <summary>Width of this volume (in cm).</summary>
                [JsonProperty("width")]
                public virtual string Width { get; set; }
            }

            #endregion

            #region Nested type: ImageLinksData

            /// <summary>A list of image links for all the sizes that are available. (In LITE projection.)</summary>
            public class ImageLinksData
            {
                /// <summary>Image link for extra large size (width of ~1280 pixels). (in LITE projection)</summary>
                [JsonProperty("extraLarge")]
                public virtual string ExtraLarge { get; set; }

                /// <summary>Image link for large size (width of ~800 pixels). (in LITE projection)</summary>
                [JsonProperty("large")]
                public virtual string Large { get; set; }

                /// <summary>Image link for medium size (width of ~575 pixels). (in LITE projection)</summary>
                [JsonProperty("medium")]
                public virtual string Medium { get; set; }

                /// <summary>Image link for small size (width of ~300 pixels). (in LITE projection)</summary>
                [JsonProperty("small")]
                public virtual string Small { get; set; }

                /// <summary>Image link for small thumbnail size (width of ~80 pixels). (in LITE projection)</summary>
                [JsonProperty("smallThumbnail")]
                public virtual string SmallThumbnail { get; set; }

                /// <summary>Image link for thumbnail size (width of ~128 pixels). (in LITE projection)</summary>
                [JsonProperty("thumbnail")]
                public virtual string Thumbnail { get; set; }
            }

            #endregion

            #region Nested type: IndustryIdentifiersData

            public class IndustryIdentifiersData
            {
                /// <summary>Industry specific volume identifier.</summary>
                [JsonProperty("identifier")]
                public virtual string Identifier { get; set; }

                /// <summary>Identifier type. Possible values are ISBN_10, ISBN_13, ISSN and OTHER.</summary>
                [JsonProperty("type")]
                public virtual string Type { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Volumes : IResponse
    {
        /// <summary>A list of volumes.</summary>
        [JsonProperty("items")]
        public virtual IList<Volume> Items { get; set; }

        /// <summary>Resource type.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Total number of volumes found. This might be greater than the number of volumes returned in this response if results have been paginated.</summary>
        [JsonProperty("totalItems")]
        public virtual long TotalItems { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }
}

namespace Google.Apis
{
    public class BooksService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        #region Scopes enum

        /// <summary>A list of all OAuth2.0 scopes. Each of these scopes relates to a permission or group of permissions that different methods of this API may need.</summary>
        public enum Scopes
        {
            /// <summary>Manage your books</summary>
            [StringValue("https://www.googleapis.com/auth/books")] Books,
        }

        #endregion

        private const string Version = "v1";

        private const string Name = "books";

        private const string BaseUri = "https://www.googleapis.com/books/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;
        private readonly IAuthenticator authenticator;

        private readonly BookshelvesResource bookshelves;
        private readonly IService genericService;

        private readonly MylibraryResource mylibrary;

        private readonly VolumesResource volumes;

        public BooksService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            bookshelves = new BookshelvesResource(this);
            mylibrary = new MylibraryResource(this);
            volumes = new VolumesResource(this);
        }

        public BooksService()
            : this(
                new DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual BookshelvesResource Bookshelves
        {
            get { return bookshelves; }
        }

        public virtual MylibraryResource Mylibrary
        {
            get { return mylibrary; }
        }

        public virtual VolumesResource Volumes
        {
            get { return volumes; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class BookshelvesResource
    {
        private const string Resource = "bookshelves";

        private readonly ILog logger = LogManager.GetLogger(typeof(BookshelvesResource));
        private readonly ISchemaAwareRequestExecutor service;

        private readonly VolumesResource volumes;

        public BookshelvesResource(BooksService service)
        {
            this.service = service;
            volumes = new VolumesResource(service);
        }

        public virtual VolumesResource Volumes
        {
            get { return volumes; }
        }

        /// <summary>Retrieves a specific bookshelf for the specified user.</summary>
        /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Stream GetAsStream(string shelf, string userId, [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["shelf"] = shelf;
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing bookshelves.get");
            return ret;
        }

        /// <summary>Retrieves a list of public bookshelves for the specified user.</summary>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Stream ListAsStream(string userId, [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing bookshelves.list");
            return ret;
        }

        /// <summary>Retrieves a specific bookshelf for the specified user.</summary>
        /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Bookshelf GetAndExecute(string shelf, string userId, [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["shelf"] = shelf;
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.get");
            Bookshelf ret = service.JsonToObject<Bookshelf>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing bookshelves.get");
            return ret;
        }

        /// <summary>Retrieves a list of public bookshelves for the specified user.</summary>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Bookshelves ListAndExecute(string userId, [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["source"] = source;
            logger.Debug("Executing bookshelves.list");
            Bookshelves ret =
                service.JsonToObject<Bookshelves>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing bookshelves.list");
            return ret;
        }

        /// <summary>Retrieves a specific bookshelf for the specified user.</summary>
        /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        public virtual GetRequest Get(string shelf, string userId)
        {
            return new GetRequest(service, shelf, userId);
        }

        /// <summary>Retrieves a specific bookshelf for the specified user.</summary>
        /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual GetRequest Get(string shelf, string userId, [Optional] string source)
        {
            return new GetRequest(service, shelf, userId, source);
        }

        /// <summary>Retrieves a list of public bookshelves for the specified user.</summary>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        public virtual ListRequest List(string userId)
        {
            return new ListRequest(service, userId);
        }

        /// <summary>Retrieves a list of public bookshelves for the specified user.</summary>
        /// <param name="userId">Required - Id of user for whom to retrieve bookshelves.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual ListRequest List(string userId, [Optional] string source)
        {
            return new ListRequest(service, userId, source);
        }

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Bookshelf>
        {
            private readonly string shelf;

            private readonly string userId;
            private string source;

            public GetRequest(ISchemaAwareRequestExecutor service, string shelf, string userId) : base(service)
            {
                this.shelf = shelf;
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string shelf,
                              string userId,
                              [Optional] string source) : base(service)
            {
                this.shelf = shelf;
                this.userId = userId;
                this.source = source;
            }

            /// <summary>Id of bookshelf to retrieve.</summary>
            [RequestParameter("shelf")]
            public virtual string Shelf
            {
                get { return shelf; }
            }

            /// <summary>String to identify the originator of this request.</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
                set { source = value; }
            }

            /// <summary>Id of user for whom to retrieve bookshelves.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "bookshelves"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<Bookshelves>
        {
            private readonly string userId;
            private string source;

            public ListRequest(ISchemaAwareRequestExecutor service, string userId) : base(service)
            {
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service, string userId, [Optional] string source)
                : base(service)
            {
                this.userId = userId;
                this.source = source;
            }

            /// <summary>String to identify the originator of this request.</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
                set { source = value; }
            }

            /// <summary>Id of user for whom to retrieve bookshelves.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "bookshelves"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion

        #region Nested type: VolumesResource

        public class VolumesResource
        {
            private const string Resource = "bookshelves.volumes";

            private readonly ILog logger = LogManager.GetLogger(typeof(VolumesResource));
            private readonly ISchemaAwareRequestExecutor service;

            public VolumesResource(BooksService service)
            {
                this.service = service;
            }

            /// <summary>Retrieves volumes in a specific bookshelf for the specified user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve volumes.</param>
            /// <param name="userId">Required - Id of user for whom to retrieve bookshelf volumes.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream ListAsStream(string shelf, string userId, [Optional] string source)
            {
                string body = null;
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["userId"] = userId;
                parameters["source"] = source;
                logger.Debug("Executing volumes.list");
                Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
                logger.Debug("Done Executing volumes.list");
                return ret;
            }

            /// <summary>Retrieves volumes in a specific bookshelf for the specified user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve volumes.</param>
            /// <param name="userId">Required - Id of user for whom to retrieve bookshelf volumes.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Volumes ListAndExecute(string shelf, string userId, [Optional] string source)
            {
                string body = null;
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["userId"] = userId;
                parameters["source"] = source;
                logger.Debug("Executing volumes.list");
                Volumes ret = service.JsonToObject<Volumes>(
                    service.ExecuteRequest(Resource, "list", body, parameters));
                logger.Debug("Done Executing volumes.list");
                return ret;
            }

            /// <summary>Retrieves volumes in a specific bookshelf for the specified user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve volumes.</param>
            /// <param name="userId">Required - Id of user for whom to retrieve bookshelf volumes.</param>
            public virtual ListRequest List(string shelf, string userId)
            {
                return new ListRequest(service, shelf, userId);
            }

            /// <summary>Retrieves volumes in a specific bookshelf for the specified user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve volumes.</param>
            /// <param name="userId">Required - Id of user for whom to retrieve bookshelf volumes.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual ListRequest List(string shelf, string userId, [Optional] string source)
            {
                return new ListRequest(service, shelf, userId, source);
            }

            #region Nested type: ListRequest

            public class ListRequest : ServiceRequest<Volumes>
            {
                private readonly string shelf;

                private readonly string userId;
                private string source;

                public ListRequest(ISchemaAwareRequestExecutor service, string shelf, string userId) : base(service)
                {
                    this.shelf = shelf;
                    this.userId = userId;
                }

                public ListRequest(ISchemaAwareRequestExecutor service,
                                   string shelf,
                                   string userId,
                                   [Optional] string source) : base(service)
                {
                    this.shelf = shelf;
                    this.userId = userId;
                    this.source = source;
                }

                /// <summary>Id of bookshelf to retrieve volumes.</summary>
                [RequestParameter("shelf")]
                public virtual string Shelf
                {
                    get { return shelf; }
                }

                /// <summary>String to identify the originator of this request.</summary>
                [RequestParameter("source")]
                public virtual string Source
                {
                    get { return source; }
                    set { source = value; }
                }

                /// <summary>Id of user for whom to retrieve bookshelf volumes.</summary>
                [RequestParameter("userId")]
                public virtual string UserId
                {
                    get { return userId; }
                }

                protected override string ResourceName
                {
                    get { return "bookshelves.volumes"; }
                }

                protected override string MethodName
                {
                    get { return "list"; }
                }
            }

            #endregion
        }

        #endregion
    }

    public class MylibraryResource
    {
        private const string Resource = "mylibrary";

        private readonly BookshelvesResource bookshelves;
        private ILog logger = LogManager.GetLogger(typeof(MylibraryResource));
        private ISchemaAwareRequestExecutor service;

        public MylibraryResource(BooksService service)
        {
            this.service = service;
            bookshelves = new BookshelvesResource(service);
        }

        public virtual BookshelvesResource Bookshelves
        {
            get { return bookshelves; }
        }

        #region Nested type: BookshelvesResource

        public class BookshelvesResource
        {
            private const string Resource = "mylibrary.bookshelves";

            private readonly ILog logger = LogManager.GetLogger(typeof(BookshelvesResource));
            private readonly ISchemaAwareRequestExecutor service;

            private readonly VolumesResource volumes;

            public BookshelvesResource(BooksService service)
            {
                this.service = service;
                volumes = new VolumesResource(service);
            }

            public virtual VolumesResource Volumes
            {
                get { return volumes; }
            }

            /// <summary>Adds a volume to a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf to which to add a volume.</param>
            /// <param name="volumeId">Required - Id of volume to add.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream AddVolumeAsStream(string body,
                                                    string shelf,
                                                    string volumeId,
                                                    [Optional] string source)
            {
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.addVolume");
                Stream ret = service.ExecuteRequest(Resource, "addVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.addVolume");
                return ret;
            }

            /// <summary>Clears all volumes from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream ClearVolumesAsStream(string body, string shelf, [Optional] string source)
            {
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.clearVolumes");
                Stream ret = service.ExecuteRequest(Resource, "clearVolumes", body, parameters);
                logger.Debug("Done Executing bookshelves.clearVolumes");
                return ret;
            }

            /// <summary>Retrieves a specific bookshelf belonging to the authenticated user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream GetAsStream(string shelf, [Optional] string source)
            {
                string body = null;
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.get");
                Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
                logger.Debug("Done Executing bookshelves.get");
                return ret;
            }

            /// <summary>Retrieves a list of bookshelves belonging to the authenticated user.</summary>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream ListAsStream([Optional] string source)
            {
                string body = null;
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.list");
                Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
                logger.Debug("Done Executing bookshelves.list");
                return ret;
            }

            /// <summary>Removes a volume from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="volumeId">Required - Id of volume to remove.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream RemoveVolumeAsStream(string body,
                                                       string shelf,
                                                       string volumeId,
                                                       [Optional] string source)
            {
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.removeVolume");
                Stream ret = service.ExecuteRequest(Resource, "removeVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.removeVolume");
                return ret;
            }

            /// <summary>Adds a volume to a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf to which to add a volume.</param>
            /// <param name="volumeId">Required - Id of volume to add.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream AddVolumeAndExecute(string body,
                                                      string shelf,
                                                      string volumeId,
                                                      [Optional] string source)
            {
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.addVolume");
                Stream ret = service.ExecuteRequest(Resource, "addVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.addVolume");
                return ret;
            }

            /// <summary>Clears all volumes from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream ClearVolumesAndExecute(string body, string shelf, [Optional] string source)
            {
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.clearVolumes");
                Stream ret = service.ExecuteRequest(Resource, "clearVolumes", body, parameters);
                logger.Debug("Done Executing bookshelves.clearVolumes");
                return ret;
            }

            /// <summary>Retrieves a specific bookshelf belonging to the authenticated user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Bookshelf GetAndExecute(string shelf, [Optional] string source)
            {
                string body = null;
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.get");
                Bookshelf ret =
                    service.JsonToObject<Bookshelf>(service.ExecuteRequest(Resource, "get", body, parameters));
                logger.Debug("Done Executing bookshelves.get");
                return ret;
            }

            /// <summary>Retrieves a list of bookshelves belonging to the authenticated user.</summary>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Bookshelves ListAndExecute([Optional] string source)
            {
                string body = null;
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.list");
                Bookshelves ret =
                    service.JsonToObject<Bookshelves>(service.ExecuteRequest(Resource, "list", body, parameters));
                logger.Debug("Done Executing bookshelves.list");
                return ret;
            }

            /// <summary>Removes a volume from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="volumeId">Required - Id of volume to remove.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual Stream RemoveVolumeAndExecute(string body,
                                                         string shelf,
                                                         string volumeId,
                                                         [Optional] string source)
            {
                Dictionary<string, object> parameters = new Dictionary<string, object>();
                parameters["shelf"] = shelf;
                parameters["volumeId"] = volumeId;
                parameters["source"] = source;
                logger.Debug("Executing bookshelves.removeVolume");
                Stream ret = service.ExecuteRequest(Resource, "removeVolume", body, parameters);
                logger.Debug("Done Executing bookshelves.removeVolume");
                return ret;
            }

            /// <summary>Adds a volume to a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf to which to add a volume.</param>
            /// <param name="volumeId">Required - Id of volume to add.</param>
            public virtual AddVolumeRequest AddVolume(string shelf, string volumeId)
            {
                return new AddVolumeRequest(service, shelf, volumeId);
            }

            /// <summary>Adds a volume to a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf to which to add a volume.</param>
            /// <param name="volumeId">Required - Id of volume to add.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual AddVolumeRequest AddVolume(string shelf, string volumeId, [Optional] string source)
            {
                return new AddVolumeRequest(service, shelf, volumeId, source);
            }

            /// <summary>Clears all volumes from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            public virtual ClearVolumesRequest ClearVolumes(string shelf)
            {
                return new ClearVolumesRequest(service, shelf);
            }

            /// <summary>Clears all volumes from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual ClearVolumesRequest ClearVolumes(string shelf, [Optional] string source)
            {
                return new ClearVolumesRequest(service, shelf, source);
            }

            /// <summary>Retrieves a specific bookshelf belonging to the authenticated user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
            public virtual GetRequest Get(string shelf)
            {
                return new GetRequest(service, shelf);
            }

            /// <summary>Retrieves a specific bookshelf belonging to the authenticated user.</summary>
            /// <param name="shelf">Required - Id of bookshelf to retrieve.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual GetRequest Get(string shelf, [Optional] string source)
            {
                return new GetRequest(service, shelf, source);
            }

            /// <summary>Retrieves a list of bookshelves belonging to the authenticated user.</summary>
            public virtual ListRequest List()
            {
                return new ListRequest(service);
            }

            /// <summary>Retrieves a list of bookshelves belonging to the authenticated user.</summary>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual ListRequest List([Optional] string source)
            {
                return new ListRequest(service, source);
            }

            /// <summary>Removes a volume from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="volumeId">Required - Id of volume to remove.</param>
            public virtual RemoveVolumeRequest RemoveVolume(string shelf, string volumeId)
            {
                return new RemoveVolumeRequest(service, shelf, volumeId);
            }

            /// <summary>Removes a volume from a bookshelf.</summary>
            /// <param name="shelf">Required - Id of bookshelf from which to remove a volume.</param>
            /// <param name="volumeId">Required - Id of volume to remove.</param>
            /// <param name="source">Optional - String to identify the originator of this request.</param>
            public virtual RemoveVolumeRequest RemoveVolume(string shelf, string volumeId, [Optional] string source)
            {
                return new RemoveVolumeRequest(service, shelf, volumeId, source);
            }

            #region Nested type: AddVolumeRequest

            public class AddVolumeRequest : ServiceRequest<string>
            {
                private readonly string shelf;

                private readonly string volumeId;
                private string source;

                public AddVolumeRequest(ISchemaAwareRequestExecutor service, string shelf, string volumeId)
                    : base(service)
                {
                    this.shelf = shelf;
                    this.volumeId = volumeId;
                }

                public AddVolumeRequest(ISchemaAwareRequestExecutor service,
                                        string shelf,
                                        string volumeId,
                                        [Optional] string source) : base(service)
                {
                    this.shelf = shelf;
                    this.volumeId = volumeId;
                    this.source = source;
                }

                /// <summary>Id of bookshelf to which to add a volume.</summary>
                [RequestParameter("shelf")]
                public virtual string Shelf
                {
                    get { return shelf; }
                }

                /// <summary>String to identify the originator of this request.</summary>
                [RequestParameter("source")]
                public virtual string Source
                {
                    get { return source; }
                    set { source = value; }
                }

                /// <summary>Id of volume to add.</summary>
                [RequestParameter("volumeId")]
                public virtual string VolumeId
                {
                    get { return volumeId; }
                }

                protected override string ResourceName
                {
                    get { return "mylibrary.bookshelves"; }
                }

                protected override string MethodName
                {
                    get { return "addVolume"; }
                }
            }

            #endregion

            #region Nested type: ClearVolumesRequest

            public class ClearVolumesRequest : ServiceRequest<string>
            {
                private readonly string shelf;

                private string source;

                public ClearVolumesRequest(ISchemaAwareRequestExecutor service, string shelf) : base(service)
                {
                    this.shelf = shelf;
                }

                public ClearVolumesRequest(ISchemaAwareRequestExecutor service, string shelf, [Optional] string source)
                    : base(service)
                {
                    this.shelf = shelf;
                    this.source = source;
                }

                /// <summary>Id of bookshelf from which to remove a volume.</summary>
                [RequestParameter("shelf")]
                public virtual string Shelf
                {
                    get { return shelf; }
                }

                /// <summary>String to identify the originator of this request.</summary>
                [RequestParameter("source")]
                public virtual string Source
                {
                    get { return source; }
                    set { source = value; }
                }

                protected override string ResourceName
                {
                    get { return "mylibrary.bookshelves"; }
                }

                protected override string MethodName
                {
                    get { return "clearVolumes"; }
                }
            }

            #endregion

            #region Nested type: GetRequest

            public class GetRequest : ServiceRequest<Bookshelf>
            {
                private readonly string shelf;

                private string source;

                public GetRequest(ISchemaAwareRequestExecutor service, string shelf) : base(service)
                {
                    this.shelf = shelf;
                }

                public GetRequest(ISchemaAwareRequestExecutor service, string shelf, [Optional] string source)
                    : base(service)
                {
                    this.shelf = shelf;
                    this.source = source;
                }

                /// <summary>Id of bookshelf to retrieve.</summary>
                [RequestParameter("shelf")]
                public virtual string Shelf
                {
                    get { return shelf; }
                }

                /// <summary>String to identify the originator of this request.</summary>
                [RequestParameter("source")]
                public virtual string Source
                {
                    get { return source; }
                    set { source = value; }
                }

                protected override string ResourceName
                {
                    get { return "mylibrary.bookshelves"; }
                }

                protected override string MethodName
                {
                    get { return "get"; }
                }
            }

            #endregion

            #region Nested type: ListRequest

            public class ListRequest : ServiceRequest<Bookshelves>
            {
                private string source;

                public ListRequest(ISchemaAwareRequestExecutor service) : base(service) {}

                public ListRequest(ISchemaAwareRequestExecutor service, [Optional] string source) : base(service)
                {
                    this.source = source;
                }

                /// <summary>String to identify the originator of this request.</summary>
                [RequestParameter("source")]
                public virtual string Source
                {
                    get { return source; }
                    set { source = value; }
                }

                protected override string ResourceName
                {
                    get { return "mylibrary.bookshelves"; }
                }

                protected override string MethodName
                {
                    get { return "list"; }
                }
            }

            #endregion

            #region Nested type: RemoveVolumeRequest

            public class RemoveVolumeRequest : ServiceRequest<string>
            {
                private readonly string shelf;

                private readonly string volumeId;
                private string source;

                public RemoveVolumeRequest(ISchemaAwareRequestExecutor service, string shelf, string volumeId)
                    : base(service)
                {
                    this.shelf = shelf;
                    this.volumeId = volumeId;
                }

                public RemoveVolumeRequest(ISchemaAwareRequestExecutor service,
                                           string shelf,
                                           string volumeId,
                                           [Optional] string source) : base(service)
                {
                    this.shelf = shelf;
                    this.volumeId = volumeId;
                    this.source = source;
                }

                /// <summary>Id of bookshelf from which to remove a volume.</summary>
                [RequestParameter("shelf")]
                public virtual string Shelf
                {
                    get { return shelf; }
                }

                /// <summary>String to identify the originator of this request.</summary>
                [RequestParameter("source")]
                public virtual string Source
                {
                    get { return source; }
                    set { source = value; }
                }

                /// <summary>Id of volume to remove.</summary>
                [RequestParameter("volumeId")]
                public virtual string VolumeId
                {
                    get { return volumeId; }
                }

                protected override string ResourceName
                {
                    get { return "mylibrary.bookshelves"; }
                }

                protected override string MethodName
                {
                    get { return "removeVolume"; }
                }
            }

            #endregion

            #region Nested type: VolumesResource

            public class VolumesResource
            {
                #region Projection enum

                /// <summary>Restrict information returned to a set of selected fields.</summary>
                [TypeConverter(typeof(EnumStringValueTypeConverter))]
                public enum Projection
                {
                    /// <summary>Includes all volume data.</summary>
                    [StringValue("full")] Full,

                    /// <summary>Includes a subset of fields in volumeInfo and accessInfo.</summary>
                    [StringValue("lite")] Lite,
                }

                #endregion

                private const string Resource = "mylibrary.bookshelves.volumes";

                private readonly ILog logger = LogManager.GetLogger(typeof(VolumesResource));
                private readonly ISchemaAwareRequestExecutor service;

                public VolumesResource(BooksService service)
                {
                    this.service = service;
                }

                /// <summary>Gets volume information for volumes on a bookshelf.</summary>
                /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
                /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
                /// <param name="shelf">Optional - The bookshelf id or name retrieve volumes for.</param>
                /// <param name="source">Optional - String to identify the originator of this request.</param>
                /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first element to return (starts at 0)</param>
                public virtual Stream ListAsStream([Optional] Int64? maxResults,
                                                   [Optional] Projection? projection,
                                                   [Optional] string shelf,
                                                   [Optional] string source,
                                                   [Optional] Int64? startIndex)
                {
                    string body = null;
                    Dictionary<string, object> parameters = new Dictionary<string, object>();
                    parameters["maxResults"] = maxResults;
                    parameters["projection"] = projection;
                    parameters["shelf"] = shelf;
                    parameters["source"] = source;
                    parameters["startIndex"] = startIndex;
                    logger.Debug("Executing volumes.list");
                    Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
                    logger.Debug("Done Executing volumes.list");
                    return ret;
                }

                /// <summary>Gets volume information for volumes on a bookshelf.</summary>
                /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
                /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
                /// <param name="shelf">Optional - The bookshelf id or name retrieve volumes for.</param>
                /// <param name="source">Optional - String to identify the originator of this request.</param>
                /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first element to return (starts at 0)</param>
                public virtual Volumes ListAndExecute([Optional] Int64? maxResults,
                                                      [Optional] Projection? projection,
                                                      [Optional] string shelf,
                                                      [Optional] string source,
                                                      [Optional] Int64? startIndex)
                {
                    string body = null;
                    Dictionary<string, object> parameters = new Dictionary<string, object>();
                    parameters["maxResults"] = maxResults;
                    parameters["projection"] = projection;
                    parameters["shelf"] = shelf;
                    parameters["source"] = source;
                    parameters["startIndex"] = startIndex;
                    logger.Debug("Executing volumes.list");
                    Volumes ret =
                        service.JsonToObject<Volumes>(service.ExecuteRequest(Resource, "list", body, parameters));
                    logger.Debug("Done Executing volumes.list");
                    return ret;
                }

                /// <summary>Gets volume information for volumes on a bookshelf.</summary>
                public virtual ListRequest List()
                {
                    return new ListRequest(service);
                }

                /// <summary>Gets volume information for volumes on a bookshelf.</summary>
                /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
                /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
                /// <param name="shelf">Optional - The bookshelf id or name retrieve volumes for.</param>
                /// <param name="source">Optional - String to identify the originator of this request.</param>
                /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first element to return (starts at 0)</param>
                public virtual ListRequest List([Optional] Int64? maxResults,
                                                [Optional] Projection? projection,
                                                [Optional] string shelf,
                                                [Optional] string source,
                                                [Optional] Int64? startIndex)
                {
                    return new ListRequest(service, maxResults, projection, shelf, source, startIndex);
                }

                #region Nested type: ListRequest

                public class ListRequest : ServiceRequest<Volumes>
                {
                    private Int64? maxResults;

                    private Projection? projection;

                    private string shelf;

                    private string source;

                    private Int64? startIndex;

                    public ListRequest(ISchemaAwareRequestExecutor service) : base(service) {}

                    public ListRequest(ISchemaAwareRequestExecutor service,
                                       [Optional] Int64? maxResults,
                                       [Optional] Projection? projection,
                                       [Optional] string shelf,
                                       [Optional] string source,
                                       [Optional] Int64? startIndex) : base(service)
                    {
                        this.maxResults = maxResults;
                        this.projection = projection;
                        this.shelf = shelf;
                        this.source = source;
                        this.startIndex = startIndex;
                    }

                    /// <summary>Maximum number of results to return</summary>
                    [RequestParameter("maxResults")]
                    public virtual Int64? MaxResults
                    {
                        get { return maxResults; }
                        set { maxResults = value; }
                    }

                    /// <summary>Restrict information returned to a set of selected fields.</summary>
                    [RequestParameter("projection")]
                    public virtual Projection? Projection
                    {
                        get { return projection; }
                        set { projection = value; }
                    }

                    /// <summary>The bookshelf id or name retrieve volumes for.</summary>
                    [RequestParameter("shelf")]
                    public virtual string Shelf
                    {
                        get { return shelf; }
                        set { shelf = value; }
                    }

                    /// <summary>String to identify the originator of this request.</summary>
                    [RequestParameter("source")]
                    public virtual string Source
                    {
                        get { return source; }
                        set { source = value; }
                    }

                    /// <summary>Index of the first element to return (starts at 0)</summary>
                    [RequestParameter("startIndex")]
                    public virtual Int64? StartIndex
                    {
                        get { return startIndex; }
                        set { startIndex = value; }
                    }

                    protected override string ResourceName
                    {
                        get { return "mylibrary.bookshelves.volumes"; }
                    }

                    protected override string MethodName
                    {
                        get { return "list"; }
                    }
                }

                #endregion
            }

            #endregion
        }

        #endregion
    }

    public class VolumesResource
    {
        #region Download enum

        /// <summary>Restrict to volumes by download availability.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Download
        {
            /// <summary>All volumes with epub.</summary>
            [StringValue("epub")] Epub,
        }

        #endregion

        #region Filter enum

        /// <summary>Filter search results.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Filter
        {
            /// <summary>All Google eBooks.</summary>
            [StringValue("ebooks")] Ebooks,

            /// <summary>Google eBook with full volume text viewability.</summary>
            [StringValue("free-ebooks")] FreeEbooks,

            /// <summary>Public can view entire volume text.</summary>
            [StringValue("full")] Full,

            /// <summary>Google eBook with a price.</summary>
            [StringValue("paid-ebooks")] PaidEbooks,

            /// <summary>Public able to see parts of text.</summary>
            [StringValue("partial")] Partial,
        }

        #endregion

        #region OrderBy enum

        /// <summary>Sort search results.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum OrderBy
        {
            /// <summary>Most recently published.</summary>
            [StringValue("newest")] Newest,

            /// <summary>Relevance to search terms.</summary>
            [StringValue("relevance")] Relevance,
        }

        #endregion

        #region PrintType enum

        /// <summary>Restrict to books or magazines.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum PrintType
        {
            /// <summary>All volume content types.</summary>
            [StringValue("all")] All,

            /// <summary>Just books.</summary>
            [StringValue("books")] Books,

            /// <summary>Just magazines.</summary>
            [StringValue("magazines")] Magazines,
        }

        #endregion

        #region Projection enum

        /// <summary>Restrict information returned to a set of selected fields.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Projection
        {
            /// <summary>Includes all volume data.</summary>
            [StringValue("full")] Full,

            /// <summary>Includes a subset of fields in volumeInfo and accessInfo.</summary>
            [StringValue("lite")] Lite,
        }

        #endregion

        private const string Resource = "volumes";

        private readonly ILog logger = LogManager.GetLogger(typeof(VolumesResource));
        private readonly ISchemaAwareRequestExecutor service;

        public VolumesResource(BooksService service)
        {
            this.service = service;
        }

        /// <summary>Gets volume information for a single volume.</summary>
        /// <param name="volumeId">Required - Id of volume to retrieve.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Stream GetAsStream(string volumeId, [Optional] Projection? projection, [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["volumeId"] = volumeId;
            parameters["projection"] = projection;
            parameters["source"] = source;
            logger.Debug("Executing volumes.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing volumes.get");
            return ret;
        }

        /// <summary>Performs a book search.</summary>
        /// <param name="q">Required - Full-text search query string.</param>
        /// <param name="download">Optional - Must be one of the following values [epub] - Restrict to volumes by download availability.</param>
        /// <param name="filter">Optional - Must be one of the following values [ebooks, free-ebooks, full, paid-ebooks, partial] - Filter search results.</param>
        /// <param name="langRestrict">Optional - Restrict results to books with this language code.</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 40 - Maximum number of results to return.</param>
        /// <param name="orderBy">Optional - Must be one of the following values [newest, relevance] - Sort search results.</param>
        /// <param name="printType">Optional - Must be one of the following values [all, books, magazines] - Restrict to books or magazines.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first result to return (starts at 0)</param>
        public virtual Stream ListAsStream(string q,
                                           [Optional] Download? download,
                                           [Optional] Filter? filter,
                                           [Optional] string langRestrict,
                                           [Optional] Int64? maxResults,
                                           [Optional] OrderBy? orderBy,
                                           [Optional] PrintType? printType,
                                           [Optional] Projection? projection,
                                           [Optional] string source,
                                           [Optional] Int64? startIndex)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["q"] = q;
            parameters["download"] = download;
            parameters["filter"] = filter;
            parameters["langRestrict"] = langRestrict;
            parameters["maxResults"] = maxResults;
            parameters["orderBy"] = orderBy;
            parameters["printType"] = printType;
            parameters["projection"] = projection;
            parameters["source"] = source;
            parameters["startIndex"] = startIndex;
            logger.Debug("Executing volumes.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing volumes.list");
            return ret;
        }

        /// <summary>Gets volume information for a single volume.</summary>
        /// <param name="volumeId">Required - Id of volume to retrieve.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual Volume GetAndExecute(string volumeId,
                                            [Optional] Projection? projection,
                                            [Optional] string source)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["volumeId"] = volumeId;
            parameters["projection"] = projection;
            parameters["source"] = source;
            logger.Debug("Executing volumes.get");
            Volume ret = service.JsonToObject<Volume>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing volumes.get");
            return ret;
        }

        /// <summary>Performs a book search.</summary>
        /// <param name="q">Required - Full-text search query string.</param>
        /// <param name="download">Optional - Must be one of the following values [epub] - Restrict to volumes by download availability.</param>
        /// <param name="filter">Optional - Must be one of the following values [ebooks, free-ebooks, full, paid-ebooks, partial] - Filter search results.</param>
        /// <param name="langRestrict">Optional - Restrict results to books with this language code.</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 40 - Maximum number of results to return.</param>
        /// <param name="orderBy">Optional - Must be one of the following values [newest, relevance] - Sort search results.</param>
        /// <param name="printType">Optional - Must be one of the following values [all, books, magazines] - Restrict to books or magazines.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first result to return (starts at 0)</param>
        public virtual Volumes ListAndExecute(string q,
                                              [Optional] Download? download,
                                              [Optional] Filter? filter,
                                              [Optional] string langRestrict,
                                              [Optional] Int64? maxResults,
                                              [Optional] OrderBy? orderBy,
                                              [Optional] PrintType? printType,
                                              [Optional] Projection? projection,
                                              [Optional] string source,
                                              [Optional] Int64? startIndex)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["q"] = q;
            parameters["download"] = download;
            parameters["filter"] = filter;
            parameters["langRestrict"] = langRestrict;
            parameters["maxResults"] = maxResults;
            parameters["orderBy"] = orderBy;
            parameters["printType"] = printType;
            parameters["projection"] = projection;
            parameters["source"] = source;
            parameters["startIndex"] = startIndex;
            logger.Debug("Executing volumes.list");
            Volumes ret = service.JsonToObject<Volumes>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing volumes.list");
            return ret;
        }

        /// <summary>Gets volume information for a single volume.</summary>
        /// <param name="volumeId">Required - Id of volume to retrieve.</param>
        public virtual GetRequest Get(string volumeId)
        {
            return new GetRequest(service, volumeId);
        }

        /// <summary>Gets volume information for a single volume.</summary>
        /// <param name="volumeId">Required - Id of volume to retrieve.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        public virtual GetRequest Get(string volumeId, [Optional] Projection? projection, [Optional] string source)
        {
            return new GetRequest(service, volumeId, projection, source);
        }

        /// <summary>Performs a book search.</summary>
        /// <param name="q">Required - Full-text search query string.</param>
        public virtual ListRequest List(string q)
        {
            return new ListRequest(service, q);
        }

        /// <summary>Performs a book search.</summary>
        /// <param name="q">Required - Full-text search query string.</param>
        /// <param name="download">Optional - Must be one of the following values [epub] - Restrict to volumes by download availability.</param>
        /// <param name="filter">Optional - Must be one of the following values [ebooks, free-ebooks, full, paid-ebooks, partial] - Filter search results.</param>
        /// <param name="langRestrict">Optional - Restrict results to books with this language code.</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 40 - Maximum number of results to return.</param>
        /// <param name="orderBy">Optional - Must be one of the following values [newest, relevance] - Sort search results.</param>
        /// <param name="printType">Optional - Must be one of the following values [all, books, magazines] - Restrict to books or magazines.</param>
        /// <param name="projection">Optional - Must be one of the following values [full, lite] - Restrict information returned to a set of selected fields.</param>
        /// <param name="source">Optional - String to identify the originator of this request.</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index of the first result to return (starts at 0)</param>
        public virtual ListRequest List(string q,
                                        [Optional] Download? download,
                                        [Optional] Filter? filter,
                                        [Optional] string langRestrict,
                                        [Optional] Int64? maxResults,
                                        [Optional] OrderBy? orderBy,
                                        [Optional] PrintType? printType,
                                        [Optional] Projection? projection,
                                        [Optional] string source,
                                        [Optional] Int64? startIndex)
        {
            return new ListRequest(
                service, q, download, filter, langRestrict, maxResults, orderBy, printType, projection, source,
                startIndex);
        }

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Volume>
        {
            private readonly string volumeId;
            private Projection? projection;

            private string source;

            public GetRequest(ISchemaAwareRequestExecutor service, string volumeId) : base(service)
            {
                this.volumeId = volumeId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string volumeId,
                              [Optional] Projection? projection,
                              [Optional] string source) : base(service)
            {
                this.volumeId = volumeId;
                this.projection = projection;
                this.source = source;
            }

            /// <summary>Restrict information returned to a set of selected fields.</summary>
            [RequestParameter("projection")]
            public virtual Projection? Projection
            {
                get { return projection; }
                set { projection = value; }
            }

            /// <summary>String to identify the originator of this request.</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
                set { source = value; }
            }

            /// <summary>Id of volume to retrieve.</summary>
            [RequestParameter("volumeId")]
            public virtual string VolumeId
            {
                get { return volumeId; }
            }

            protected override string ResourceName
            {
                get { return "volumes"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<Volumes>
        {
            private readonly string q;
            private Download? download;

            private Filter? filter;

            private string langRestrict;

            private Int64? maxResults;

            private OrderBy? orderBy;

            private PrintType? printType;

            private Projection? projection;

            private string source;

            private Int64? startIndex;

            public ListRequest(ISchemaAwareRequestExecutor service, string q) : base(service)
            {
                this.q = q;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               string q,
                               [Optional] Download? download,
                               [Optional] Filter? filter,
                               [Optional] string langRestrict,
                               [Optional] Int64? maxResults,
                               [Optional] OrderBy? orderBy,
                               [Optional] PrintType? printType,
                               [Optional] Projection? projection,
                               [Optional] string source,
                               [Optional] Int64? startIndex) : base(service)
            {
                this.q = q;
                this.download = download;
                this.filter = filter;
                this.langRestrict = langRestrict;
                this.maxResults = maxResults;
                this.orderBy = orderBy;
                this.printType = printType;
                this.projection = projection;
                this.source = source;
                this.startIndex = startIndex;
            }

            /// <summary>Restrict to volumes by download availability.</summary>
            [RequestParameter("download")]
            public virtual Download? Download
            {
                get { return download; }
                set { download = value; }
            }

            /// <summary>Filter search results.</summary>
            [RequestParameter("filter")]
            public virtual Filter? Filter
            {
                get { return filter; }
                set { filter = value; }
            }

            /// <summary>Restrict results to books with this language code.</summary>
            [RequestParameter("langRestrict")]
            public virtual string LangRestrict
            {
                get { return langRestrict; }
                set { langRestrict = value; }
            }

            /// <summary>Maximum number of results to return.</summary>
            [RequestParameter("maxResults")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>Sort search results.</summary>
            [RequestParameter("orderBy")]
            public virtual OrderBy? OrderBy
            {
                get { return orderBy; }
                set { orderBy = value; }
            }

            /// <summary>Restrict to books or magazines.</summary>
            [RequestParameter("printType")]
            public virtual PrintType? PrintType
            {
                get { return printType; }
                set { printType = value; }
            }

            /// <summary>Restrict information returned to a set of selected fields.</summary>
            [RequestParameter("projection")]
            public virtual Projection? Projection
            {
                get { return projection; }
                set { projection = value; }
            }

            /// <summary>Full-text search query string.</summary>
            [RequestParameter("q")]
            public virtual string Q
            {
                get { return q; }
            }

            /// <summary>String to identify the originator of this request.</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
                set { source = value; }
            }

            /// <summary>Index of the first result to return (starts at 0)</summary>
            [RequestParameter("startIndex")]
            public virtual Int64? StartIndex
            {
                get { return startIndex; }
                set { startIndex = value; }
            }

            protected override string ResourceName
            {
                get { return "volumes"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }
}