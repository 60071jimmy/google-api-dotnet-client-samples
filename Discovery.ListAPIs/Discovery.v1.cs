//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class DirectoryList : IResponse
    {
        /// <summary>The individual directory entries.  One entry per api/version pair.</summary>
        [JsonProperty("items")]
        public virtual IList<ItemsData> Items { get; set; }

        /// <summary>The kind for this response.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: ItemsData

        public class ItemsData
        {
            /// <summary>The description of this API.</summary>
            [JsonProperty("description")]
            public virtual string Description { get; set; }

            /// <summary>A link to the discovery document.</summary>
            [JsonProperty("discoveryLink")]
            public virtual string DiscoveryLink { get; set; }

            /// <summary>A link to human readable documentation for the API.</summary>
            [JsonProperty("documentationLink")]
            public virtual string DocumentationLink { get; set; }

            /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
            [JsonProperty("icons")]
            public virtual IconsData Icons { get; set; }

            /// <summary>The id of this API.</summary>
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            /// <summary>The kind for this response.</summary>
            [JsonProperty("kind")]
            public virtual string Kind { get; set; }

            /// <summary>Labels for the status of this API, such as labs or deprecated.</summary>
            [JsonProperty("labels")]
            public virtual IList<String> Labels { get; set; }

            /// <summary>The name of the API.</summary>
            [JsonProperty("name")]
            public virtual string Name { get; set; }

            /// <summary>True if this version is the preferred version to use.</summary>
            [JsonProperty("preferred")]
            public virtual bool Preferred { get; set; }

            /// <summary>The title of this API.</summary>
            [JsonProperty("title")]
            public virtual string Title { get; set; }

            /// <summary>The version of the API.</summary>
            [JsonProperty("version")]
            public virtual string Version { get; set; }

            #region Nested type: IconsData

            /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
            public class IconsData
            {
                /// <summary>The url of the 16x16 icon.</summary>
                [JsonProperty("x16")]
                public virtual string X16 { get; set; }

                /// <summary>The url of the 32x32 icon.</summary>
                [JsonProperty("x32")]
                public virtual string X32 { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Jsonschema
    {
        /// <summary>A reference to another schema.  The value of this property is the &quot;id&quot; of another schema.</summary>
        [JsonProperty("$ref")]
        public virtual string Ref { get; set; }

        [JsonProperty("additionalProperties")]
        public virtual Jsonschema AdditionalProperties { get; set; }

        /// <summary>The default value of this property (if one exists).</summary>
        [JsonProperty("default")]
        public virtual string Default { get; set; }

        /// <summary>A description of this object.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>Values this parameter may take (if it is an enum).</summary>
        [JsonProperty("enum")]
        public virtual IList<String> Enum { get; set; }

        /// <summary>The descriptions for the enums.  Each position maps to the corresponding value in the &quot;enum&quot; array.</summary>
        [JsonProperty("enumDescriptions")]
        public virtual IList<String> EnumDescriptions { get; set; }

        /// <summary>An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23</summary>
        [JsonProperty("format")]
        public virtual string Format { get; set; }

        /// <summary>Unique identifier for this schema.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("items")]
        public virtual Jsonschema Items { get; set; }

        /// <summary>Whether this parameter goes in the query or the path for REST requests.</summary>
        [JsonProperty("location")]
        public virtual string Location { get; set; }

        /// <summary>The maximum value of this parameter.</summary>
        [JsonProperty("maximum")]
        public virtual string Maximum { get; set; }

        /// <summary>The minimum value of this parameter.</summary>
        [JsonProperty("minimum")]
        public virtual string Minimum { get; set; }

        /// <summary>The regular expression this parameter must conform to.</summary>
        [JsonProperty("pattern")]
        public virtual string Pattern { get; set; }

        /// <summary>If this is a schema for an object, list the schema for each property of this object.</summary>
        [JsonProperty("properties")]
        public virtual PropertiesData Properties { get; set; }

        /// <summary>Whether this parameter may appear multiple times.</summary>
        [JsonProperty("repeated")]
        public virtual bool Repeated { get; set; }

        /// <summary>Whether the parameter is required.</summary>
        [JsonProperty("required")]
        public virtual bool Required { get; set; }

        /// <summary>The value type for this schema.  A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1</summary>
        [JsonProperty("type")]
        public virtual string Type { get; set; }

        #region Nested type: PropertiesData

        /// <summary>If this is a schema for an object, list the schema for each property of this object.</summary>
        public class PropertiesData : Dictionary<string, Jsonschema> {}

        #endregion
    }

    public class RestDescription : IResponse
    {
        /// <summary>Authentication information.</summary>
        [JsonProperty("auth")]
        public virtual AuthData Auth { get; set; }

        /// <summary>The base URI path for REST requests.</summary>
        [JsonProperty("basePath")]
        public virtual string BasePath { get; set; }

        /// <summary>The description of this API.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>A link to human readable documentation for the API.</summary>
        [JsonProperty("documentationLink")]
        public virtual string DocumentationLink { get; set; }

        /// <summary>A list of supported features for this API.</summary>
        [JsonProperty("features")]
        public virtual IList<String> Features { get; set; }

        /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
        [JsonProperty("icons")]
        public virtual IconsData Icons { get; set; }

        /// <summary>The id of this API.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>The kind for this response.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Labels for the status of this API, such as labs or deprecated.</summary>
        [JsonProperty("labels")]
        public virtual IList<String> Labels { get; set; }

        /// <summary>API-level methods for this API.</summary>
        [JsonProperty("methods")]
        public virtual MethodsData Methods { get; set; }

        /// <summary>The name of this API.</summary>
        [JsonProperty("name")]
        public virtual string Name { get; set; }

        /// <summary>Common parameters that apply across all apis.</summary>
        [JsonProperty("parameters")]
        public virtual ParametersData Parameters { get; set; }

        /// <summary>The protocol described by this document.</summary>
        [JsonProperty("protocol")]
        public virtual string Protocol { get; set; }

        /// <summary>The resources in this API.</summary>
        [JsonProperty("resources")]
        public virtual ResourcesData Resources { get; set; }

        /// <summary>The schemas for this API.</summary>
        [JsonProperty("schemas")]
        public virtual SchemasData Schemas { get; set; }

        /// <summary>The title of this API.</summary>
        [JsonProperty("title")]
        public virtual string Title { get; set; }

        /// <summary>The version of this API.</summary>
        [JsonProperty("version")]
        public virtual string Version { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: AuthData

        /// <summary>Authentication information.</summary>
        public class AuthData
        {
            /// <summary>OAuth 2.0 authentication information.</summary>
            [JsonProperty("oauth2")]
            public virtual Oauth2Data Oauth2 { get; set; }

            #region Nested type: Oauth2Data

            /// <summary>OAuth 2.0 authentication information.</summary>
            public class Oauth2Data
            {
                /// <summary>Available OAuth 2.0 scopes.</summary>
                [JsonProperty("scopes")]
                public virtual ScopesData Scopes { get; set; }

                #region Nested type: ScopesData

                /// <summary>Available OAuth 2.0 scopes.</summary>
                public class ScopesData : Dictionary<string, ScopesData.ScopesDataSchema>
                {
                    #region Nested type: ScopesDataSchema

                    public class ScopesDataSchema
                    {
                        /// <summary>Description of scope.</summary>
                        [JsonProperty("description")]
                        public virtual string Description { get; set; }
                    }

                    #endregion
                }

                #endregion
            }

            #endregion
        }

        #endregion

        #region Nested type: IconsData

        /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
        public class IconsData
        {
            /// <summary>The url of the 16x16 icon.</summary>
            [JsonProperty("x16")]
            public virtual string X16 { get; set; }

            /// <summary>The url of the 32x32 icon.</summary>
            [JsonProperty("x32")]
            public virtual string X32 { get; set; }
        }

        #endregion

        #region Nested type: MethodsData

        /// <summary>API-level methods for this API.</summary>
        public class MethodsData : Dictionary<string, Restmethod> {}

        #endregion

        #region Nested type: ParametersData

        /// <summary>Common parameters that apply across all apis.</summary>
        public class ParametersData : Dictionary<string, Jsonschema> {}

        #endregion

        #region Nested type: ResourcesData

        /// <summary>The resources in this API.</summary>
        public class ResourcesData : Dictionary<string, Restresource> {}

        #endregion

        #region Nested type: SchemasData

        /// <summary>The schemas for this API.</summary>
        public class SchemasData : Dictionary<string, Jsonschema> {}

        #endregion
    }

    public class Restmethod
    {
        /// <summary>Description of this method.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>HTTP method used by this method.</summary>
        [JsonProperty("httpMethod")]
        public virtual string HttpMethod { get; set; }

        /// <summary>A unique ID for this method.  This property can be used to match methods between different versions of Discovery.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>Media upload parameters.</summary>
        [JsonProperty("mediaUpload")]
        public virtual MediaUploadData MediaUpload { get; set; }

        /// <summary>Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures.  The array is ordered such that the &quot;most-significant&quot; parameter appears first.</summary>
        [JsonProperty("parameterOrder")]
        public virtual IList<String> ParameterOrder { get; set; }

        /// <summary>Details for all parameters in this method.</summary>
        [JsonProperty("parameters")]
        public virtual ParametersData Parameters { get; set; }

        /// <summary>The URI path of this REST method.  Should be used in conjunction with the basePath property at the api-level.</summary>
        [JsonProperty("path")]
        public virtual string Path { get; set; }

        /// <summary>The schema for the request.</summary>
        [JsonProperty("request")]
        public virtual RequestData Request { get; set; }

        /// <summary>The schema for the response.</summary>
        [JsonProperty("response")]
        public virtual ResponseData Response { get; set; }

        /// <summary>OAuth 2.0 scopes applicable to this method.</summary>
        [JsonProperty("scopes")]
        public virtual IList<String> Scopes { get; set; }

        #region Nested type: MediaUploadData

        /// <summary>Media upload parameters.</summary>
        public class MediaUploadData
        {
            /// <summary>MIME Media Ranges for acceptable media uploads to this method.</summary>
            [JsonProperty("accept")]
            public virtual IList<String> Accept { get; set; }

            /// <summary>Maximum size of a media upload, such as &quot;1MB&quot;, &quot;2GB&quot; or &quot;3TB&quot;.</summary>
            [JsonProperty("maxSize")]
            public virtual string MaxSize { get; set; }

            /// <summary>Supported upload protocols.</summary>
            [JsonProperty("protocols")]
            public virtual ProtocolsData Protocols { get; set; }

            #region Nested type: ProtocolsData

            /// <summary>Supported upload protocols.</summary>
            public class ProtocolsData
            {
                /// <summary>Supports the Resumable Media Upload protocol.</summary>
                [JsonProperty("resumable")]
                public virtual ResumableData Resumable { get; set; }

                /// <summary>Supports uploading as a single HTTP request.</summary>
                [JsonProperty("simple")]
                public virtual SimpleData Simple { get; set; }

                #region Nested type: ResumableData

                /// <summary>Supports the Resumable Media Upload protocol.</summary>
                public class ResumableData
                {
                    /// <summary>True if this endpoint supports uploading multipart media.</summary>
                    [JsonProperty("multipart")]
                    public virtual bool Multipart { get; set; }

                    /// <summary>The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.</summary>
                    [JsonProperty("path")]
                    public virtual string Path { get; set; }
                }

                #endregion

                #region Nested type: SimpleData

                /// <summary>Supports uploading as a single HTTP request.</summary>
                public class SimpleData
                {
                    /// <summary>True if this endpoint supports upload multipart media.</summary>
                    [JsonProperty("multipart")]
                    public virtual bool Multipart { get; set; }

                    /// <summary>The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.</summary>
                    [JsonProperty("path")]
                    public virtual string Path { get; set; }
                }

                #endregion
            }

            #endregion
        }

        #endregion

        #region Nested type: ParametersData

        /// <summary>Details for all parameters in this method.</summary>
        public class ParametersData : Dictionary<string, Jsonschema> {}

        #endregion

        #region Nested type: RequestData

        /// <summary>The schema for the request.</summary>
        public class RequestData
        {
            /// <summary>Schema ID for the request schema.</summary>
            [JsonProperty("$ref")]
            public virtual string Ref { get; set; }
        }

        #endregion

        #region Nested type: ResponseData

        /// <summary>The schema for the response.</summary>
        public class ResponseData
        {
            /// <summary>Schema ID for the response schema.</summary>
            [JsonProperty("$ref")]
            public virtual string Ref { get; set; }
        }

        #endregion
    }

    public class Restresource
    {
        /// <summary>Methods on this resource.</summary>
        [JsonProperty("methods")]
        public virtual MethodsData Methods { get; set; }

        /// <summary>Sub-resources on this resource.</summary>
        [JsonProperty("resources")]
        public virtual ResourcesData Resources { get; set; }

        #region Nested type: MethodsData

        /// <summary>Methods on this resource.</summary>
        public class MethodsData : Dictionary<string, Restmethod> {}

        #endregion

        #region Nested type: ResourcesData

        /// <summary>Sub-resources on this resource.</summary>
        public class ResourcesData : Dictionary<string, Restresource> {}

        #endregion
    }
}

namespace Google.Apis
{
    public class DiscoveryService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        private const string Version = "v1";

        private const string Name = "discovery";

        private const string BaseUri = "https://www.googleapis.com/discovery/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;

        private readonly ApisResource apis;
        private readonly IAuthenticator authenticator;
        private readonly IService genericService;

        public DiscoveryService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            apis = new ApisResource(this);
        }

        public DiscoveryService()
            : this(
                new Discovery.DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual ApisResource Apis
        {
            get { return apis; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class ApisResource
    {
        #region Label enum

        /// <summary>Only include APIs with a matching label, such as &apos;graduated&apos; or &apos;labs&apos;.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Label
        {
            /// <summary>APIs that have been deprecated.</summary>
            [StringValue("deprecated")] Deprecated,

            /// <summary>Supported APIs that have graduated from labs.</summary>
            [StringValue("graduated")] Graduated,

            /// <summary>APIs that are experimental</summary>
            [StringValue("labs")] Labs,
        }

        #endregion

        private const string Resource = "apis";

        private readonly ILog logger = LogManager.GetLogger(typeof(ApisResource));
        private readonly ISchemaAwareRequestExecutor service;

        public ApisResource(DiscoveryService service)
        {
            this.service = service;
        }

        /// <summary>Retrieve the description of a particular version of an api.</summary>
        /// <param name="api">Required - The name of the API.</param>
        /// <param name="version">Required - The version of the API.</param>
        public virtual Stream GetRestAsStream(string api, string version)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["api"] = api;
            parameters["version"] = version;
            logger.Debug("Executing apis.getRest");
            Stream ret = service.ExecuteRequest(Resource, "getRest", body, parameters);
            logger.Debug("Done Executing apis.getRest");
            return ret;
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        /// <param name="label">Optional - Must be one of the following values [deprecated, graduated, labs] - Only include APIs with a matching label, such as &apos;graduated&apos; or &apos;labs&apos;.</param>
        /// <param name="name">Optional - Only include APIs with the given name.</param>
        /// <param name="preferred">Optional - Return only the preferred version of an API.</param>
        public virtual Stream ListAsStream([Optional] Label? label,
                                           [Optional] string name,
                                           [Optional] Boolean? preferred)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["label"] = label;
            parameters["name"] = name;
            parameters["preferred"] = preferred;
            logger.Debug("Executing apis.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing apis.list");
            return ret;
        }

        /// <summary>Retrieve the description of a particular version of an api.</summary>
        /// <param name="api">Required - The name of the API.</param>
        /// <param name="version">Required - The version of the API.</param>
        public virtual RestDescription GetRestAndExecute(string api, string version)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["api"] = api;
            parameters["version"] = version;
            logger.Debug("Executing apis.getRest");
            RestDescription ret =
                service.JsonToObject<RestDescription>(service.ExecuteRequest(Resource, "getRest", body, parameters));
            logger.Debug("Done Executing apis.getRest");
            return ret;
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        /// <param name="label">Optional - Must be one of the following values [deprecated, graduated, labs] - Only include APIs with a matching label, such as &apos;graduated&apos; or &apos;labs&apos;.</param>
        /// <param name="name">Optional - Only include APIs with the given name.</param>
        /// <param name="preferred">Optional - Return only the preferred version of an API.</param>
        public virtual DirectoryList ListAndExecute([Optional] Label? label,
                                                    [Optional] string name,
                                                    [Optional] Boolean? preferred)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["label"] = label;
            parameters["name"] = name;
            parameters["preferred"] = preferred;
            logger.Debug("Executing apis.list");
            DirectoryList ret =
                service.JsonToObject<DirectoryList>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing apis.list");
            return ret;
        }

        /// <summary>Retrieve the description of a particular version of an api.</summary>
        /// <param name="api">Required - The name of the API.</param>
        /// <param name="version">Required - The version of the API.</param>
        public virtual GetRestRequest GetRest(string api, string version)
        {
            return new GetRestRequest(service, api, version);
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        /// <param name="label">Optional - Must be one of the following values [deprecated, graduated, labs] - Only include APIs with a matching label, such as &apos;graduated&apos; or &apos;labs&apos;.</param>
        /// <param name="name">Optional - Only include APIs with the given name.</param>
        /// <param name="preferred">Optional - Return only the preferred version of an API.</param>
        public virtual ListRequest List([Optional] Label? label, [Optional] string name, [Optional] Boolean? preferred)
        {
            return new ListRequest(service, label, name, preferred);
        }

        #region Nested type: GetRestRequest

        public class GetRestRequest : ServiceRequest<RestDescription>
        {
            private readonly string api;

            private readonly string version;

            public GetRestRequest(ISchemaAwareRequestExecutor service, string api, string version) : base(service)
            {
                this.api = api;
                this.version = version;
            }

            /// <summary>The name of the API.</summary>
            [RequestParameter("api")]
            public virtual string Api
            {
                get { return api; }
            }

            /// <summary>The version of the API.</summary>
            [RequestParameter("version")]
            public virtual string Version
            {
                get { return version; }
            }

            protected override string ResourceName
            {
                get { return "apis"; }
            }

            protected override string MethodName
            {
                get { return "getRest"; }
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<DirectoryList>
        {
            private Label? label;

            private string name;

            private Boolean? preferred;

            public ListRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public ListRequest(ISchemaAwareRequestExecutor service,
                               [Optional] Label? label,
                               [Optional] string name,
                               [Optional] Boolean? preferred) : base(service)
            {
                this.label = label;
                this.name = name;
                this.preferred = preferred;
            }

            /// <summary>Only include APIs with a matching label, such as 'graduated' or 'labs'.</summary>
            [RequestParameter("label")]
            public virtual Label? Label
            {
                get { return label; }
                set { label = value; }
            }

            /// <summary>Only include APIs with the given name.</summary>
            [RequestParameter("name")]
            public virtual string Name
            {
                get { return name; }
                set { name = value; }
            }

            /// <summary>Return only the preferred version of an API.</summary>
            [RequestParameter("preferred")]
            public virtual Boolean? Preferred
            {
                get { return preferred; }
                set { preferred = value; }
            }

            protected override string ResourceName
            {
                get { return "apis"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }
}