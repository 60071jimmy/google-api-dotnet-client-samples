//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class Product : IResponse
    {
        [JsonProperty("categories")]
        public virtual IList<ShoppingModelCategoryJsonV1> Categories { get; set; }

        [JsonProperty("debug")]
        public virtual ShoppingModelDebugJsonV1 Debug { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("product")]
        public virtual ShoppingModelProductJsonV1 ProductValue { get; set; }

        [JsonProperty("recommendations")]
        public virtual IList<RecommendationsData> Recommendations { get; set; }

        [JsonProperty("selfLink")]
        public virtual string SelfLink { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: RecommendationsData

        public class RecommendationsData
        {
            [JsonProperty("recommendationList")]
            public virtual IList<RecommendationListData> RecommendationList { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            #region Nested type: RecommendationListData

            public class RecommendationListData
            {
                [JsonProperty("product")]
                public virtual ShoppingModelProductJsonV1 Product { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Products : IResponse
    {
        [JsonProperty("categories")]
        public virtual IList<ShoppingModelCategoryJsonV1> Categories { get; set; }

        [JsonProperty("currentItemCount")]
        public virtual long CurrentItemCount { get; set; }

        [JsonProperty("debug")]
        public virtual ShoppingModelDebugJsonV1 Debug { get; set; }

        [JsonProperty("etag")]
        public virtual string Etag { get; set; }

        [JsonProperty("facets")]
        public virtual IList<FacetsData> Facets { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("items")]
        public virtual IList<Product> Items { get; set; }

        [JsonProperty("itemsPerPage")]
        public virtual long ItemsPerPage { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("nextLink")]
        public virtual string NextLink { get; set; }

        [JsonProperty("previousLink")]
        public virtual string PreviousLink { get; set; }

        [JsonProperty("promotions")]
        public virtual IList<PromotionsData> Promotions { get; set; }

        [JsonProperty("redirects")]
        public virtual IList<String> Redirects { get; set; }

        [JsonProperty("relatedQueries")]
        public virtual IList<String> RelatedQueries { get; set; }

        [JsonProperty("selfLink")]
        public virtual string SelfLink { get; set; }

        [JsonProperty("shelfSpaceAds")]
        public virtual IList<ShelfSpaceAdsData> ShelfSpaceAds { get; set; }

        [JsonProperty("spelling")]
        public virtual SpellingData Spelling { get; set; }

        [JsonProperty("startIndex")]
        public virtual long StartIndex { get; set; }

        [JsonProperty("stores")]
        public virtual IList<StoresData> Stores { get; set; }

        [JsonProperty("totalItems")]
        public virtual long TotalItems { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: FacetsData

        public class FacetsData
        {
            [JsonProperty("buckets")]
            public virtual IList<BucketsData> Buckets { get; set; }

            [JsonProperty("count")]
            public virtual long Count { get; set; }

            [JsonProperty("displayName")]
            public virtual string DisplayName { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("property")]
            public virtual string Property { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("unit")]
            public virtual string Unit { get; set; }

            #region Nested type: BucketsData

            public class BucketsData
            {
                [JsonProperty("count")]
                public virtual long Count { get; set; }

                [JsonProperty("max")]
                public virtual string Max { get; set; }

                [JsonProperty("maxExclusive")]
                public virtual bool MaxExclusive { get; set; }

                [JsonProperty("min")]
                public virtual string Min { get; set; }

                [JsonProperty("minExclusive")]
                public virtual bool MinExclusive { get; set; }

                [JsonProperty("value")]
                public virtual string Value { get; set; }
            }

            #endregion
        }

        #endregion

        #region Nested type: PromotionsData

        public class PromotionsData
        {
            [JsonProperty("customFields")]
            public virtual IList<CustomFieldsData> CustomFields { get; set; }

            [JsonProperty("customHtml")]
            public virtual string CustomHtml { get; set; }

            [JsonProperty("description")]
            public virtual string Description { get; set; }

            [JsonProperty("destLink")]
            public virtual string DestLink { get; set; }

            [JsonProperty("imageLink")]
            public virtual string ImageLink { get; set; }

            [JsonProperty("link")]
            public virtual string Link { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("product")]
            public virtual ShoppingModelProductJsonV1 Product { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            #region Nested type: CustomFieldsData

            public class CustomFieldsData
            {
                [JsonProperty("name")]
                public virtual string Name { get; set; }

                [JsonProperty("value")]
                public virtual string Value { get; set; }
            }

            #endregion
        }

        #endregion

        #region Nested type: ShelfSpaceAdsData

        public class ShelfSpaceAdsData
        {
            [JsonProperty("product")]
            public virtual ShoppingModelProductJsonV1 Product { get; set; }
        }

        #endregion

        #region Nested type: SpellingData

        public class SpellingData
        {
            [JsonProperty("suggestion")]
            public virtual string Suggestion { get; set; }
        }

        #endregion

        #region Nested type: StoresData

        public class StoresData
        {
            [JsonProperty("address")]
            public virtual string Address { get; set; }

            [JsonProperty("location")]
            public virtual string Location { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("storeCode")]
            public virtual string StoreCode { get; set; }

            [JsonProperty("storeId")]
            public virtual string StoreId { get; set; }

            [JsonProperty("telephone")]
            public virtual string Telephone { get; set; }
        }

        #endregion
    }

    public class ShoppingModelCategoryJsonV1
    {
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("parents")]
        public virtual IList<String> Parents { get; set; }

        [JsonProperty("shortName")]
        public virtual string ShortName { get; set; }

        [JsonProperty("url")]
        public virtual string Url { get; set; }
    }

    public class ShoppingModelDebugJsonV1
    {
        [JsonProperty("rdcResponse")]
        public virtual string RdcResponse { get; set; }

        [JsonProperty("searchRequest")]
        public virtual string SearchRequest { get; set; }

        [JsonProperty("searchResponse")]
        public virtual string SearchResponse { get; set; }
    }

    public class ShoppingModelProductJsonV1
    {
        [JsonProperty("attributes")]
        public virtual IList<AttributesData> Attributes { get; set; }

        [JsonProperty("author")]
        public virtual AuthorData Author { get; set; }

        [JsonProperty("brand")]
        public virtual string Brand { get; set; }

        [JsonProperty("categories")]
        public virtual IList<String> Categories { get; set; }

        [JsonProperty("condition")]
        public virtual string Condition { get; set; }

        [JsonProperty("country")]
        public virtual string Country { get; set; }

        [JsonProperty("creationTime")]
        public virtual string CreationTime { get; set; }

        [JsonProperty("description")]
        public virtual string Description { get; set; }

        [JsonProperty("googleId")]
        public virtual string GoogleId { get; set; }

        [JsonProperty("gtin")]
        public virtual string Gtin { get; set; }

        [JsonProperty("images")]
        public virtual IList<ImagesData> Images { get; set; }

        [JsonProperty("inventories")]
        public virtual IList<InventoriesData> Inventories { get; set; }

        [JsonProperty("language")]
        public virtual string Language { get; set; }

        [JsonProperty("link")]
        public virtual string Link { get; set; }

        [JsonProperty("modificationTime")]
        public virtual string ModificationTime { get; set; }

        [JsonProperty("providedId")]
        public virtual string ProvidedId { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        #region Nested type: AttributesData

        public class AttributesData
        {
            [JsonProperty("displayName")]
            public virtual string DisplayName { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("unit")]
            public virtual string Unit { get; set; }

            [JsonProperty("value")]
            public virtual string Value { get; set; }
        }

        #endregion

        #region Nested type: AuthorData

        public class AuthorData
        {
            [JsonProperty("accountId")]
            public virtual string AccountId { get; set; }

            [JsonProperty("aggregatorId")]
            public virtual string AggregatorId { get; set; }

            [JsonProperty("email")]
            public virtual string Email { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("uri")]
            public virtual string Uri { get; set; }
        }

        #endregion

        #region Nested type: ImagesData

        public class ImagesData
        {
            [JsonProperty("link")]
            public virtual string Link { get; set; }

            [JsonProperty("thumbnails")]
            public virtual IList<ThumbnailsData> Thumbnails { get; set; }

            #region Nested type: ThumbnailsData

            public class ThumbnailsData
            {
                [JsonProperty("content")]
                public virtual string Content { get; set; }

                [JsonProperty("height")]
                public virtual long Height { get; set; }

                [JsonProperty("link")]
                public virtual string Link { get; set; }

                [JsonProperty("width")]
                public virtual long Width { get; set; }
            }

            #endregion
        }

        #endregion

        #region Nested type: InventoriesData

        public class InventoriesData
        {
            [JsonProperty("availability")]
            public virtual string Availability { get; set; }

            [JsonProperty("channel")]
            public virtual string Channel { get; set; }

            [JsonProperty("currency")]
            public virtual string Currency { get; set; }

            [JsonProperty("distance")]
            public virtual double Distance { get; set; }

            [JsonProperty("distanceUnit")]
            public virtual string DistanceUnit { get; set; }

            [JsonProperty("price")]
            public virtual double Price { get; set; }

            [JsonProperty("storeId")]
            public virtual string StoreId { get; set; }
        }

        #endregion
    }
}

namespace Google.Apis
{
    public class ShoppingService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        private const string Version = "v1";

        private const string Name = "shopping";

        private const string BaseUri = "https://www.googleapis.com/shopping/search/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;
        private readonly IAuthenticator authenticator;
        private readonly IService genericService;

        private readonly ProductsResource products;

        public ShoppingService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            products = new ProductsResource(this);
        }

        public ShoppingService()
            : this(
                new DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual ProductsResource Products
        {
            get { return products; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class ProductsResource
    {
        #region MinAvailability enum

        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum MinAvailability
        {
            /// <summary>Only in stcok prodicts will be returned</summary>
            [StringValue("inStock")] InStock,

            /// <summary>Limited availability and in stock products will be returned</summary>
            [StringValue("limited")] Limited,

            /// <summary>Out of stock, limited availability and in stock products will be returned</summary>
            [StringValue("outOfStock")] OutOfStock,

            /// <summary>All products will be returned</summary>
            [StringValue("unknown")] Unknown,
        }

        #endregion

        private const string Resource = "products";

        private readonly ILog logger = LogManager.GetLogger(typeof(ProductsResource));
        private readonly ISchemaAwareRequestExecutor service;

        public ProductsResource(ShoppingService service)
        {
            this.service = service;
        }

        /// <summary>Returns a single product</summary>
        /// <param name="accountId">Required - Minimum value of 0 - Maximum value of 4294967295 - Merchant center account id</param>
        /// <param name="productId">Required - Id of product</param>
        /// <param name="productIdType">Required - Type of productId</param>
        /// <param name="source">Required - Query source</param>
        /// <param name="attributeFilter">Optional - Comma separated list of attributes to return</param>
        /// <param name="categoriesEnabled">categories.enabled - Optional - Whether to return category information</param>
        /// <param name="categoriesInclude">categories.include - Optional - Category specification</param>
        /// <param name="categoriesUseGcsConfig">categories.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="debugEnabled">debug.enabled - Optional - Google Internal</param>
        /// <param name="debugEnableLogging">debug.enableLogging - Optional - Google Internal</param>
        /// <param name="debugSearchRequest">debug.searchRequest - Optional - Google Internal</param>
        /// <param name="debugSearchResponse">debug.searchResponse - Optional - Google Internal</param>
        /// <param name="productFields">Optional - Google Internal</param>
        /// <param name="recommendationsEnabled">recommendations.enabled - Optional - Whether to return recommendation information</param>
        /// <param name="recommendationsInclude">recommendations.include - Optional - Recommendation specification</param>
        /// <param name="recommendationsUseGcsConfig">recommendations.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="taxonomy">Optional - Merchant taxonomy</param>
        /// <param name="thumbnails">Optional - Thumbnail specification</param>
        public virtual Stream GetAsStream(long accountId,
                                          string productId,
                                          string productIdType,
                                          string source,
                                          [Optional] string attributeFilter,
                                          [Optional] Boolean? categoriesEnabled,
                                          [Optional] string categoriesInclude,
                                          [Optional] Boolean? categoriesUseGcsConfig,
                                          [Optional] Boolean? debugEnabled,
                                          [Optional] Boolean? debugEnableLogging,
                                          [Optional] Boolean? debugSearchRequest,
                                          [Optional] Boolean? debugSearchResponse,
                                          [Optional] string productFields,
                                          [Optional] Boolean? recommendationsEnabled,
                                          [Optional] string recommendationsInclude,
                                          [Optional] Boolean? recommendationsUseGcsConfig,
                                          [Optional] string taxonomy,
                                          [Optional] string thumbnails)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["accountId"] = accountId;
            parameters["productId"] = productId;
            parameters["productIdType"] = productIdType;
            parameters["source"] = source;
            parameters["attributeFilter"] = attributeFilter;
            parameters["categories.enabled"] = categoriesEnabled;
            parameters["categories.include"] = categoriesInclude;
            parameters["categories.useGcsConfig"] = categoriesUseGcsConfig;
            parameters["debug.enabled"] = debugEnabled;
            parameters["debug.enableLogging"] = debugEnableLogging;
            parameters["debug.searchRequest"] = debugSearchRequest;
            parameters["debug.searchResponse"] = debugSearchResponse;
            parameters["productFields"] = productFields;
            parameters["recommendations.enabled"] = recommendationsEnabled;
            parameters["recommendations.include"] = recommendationsInclude;
            parameters["recommendations.useGcsConfig"] = recommendationsUseGcsConfig;
            parameters["taxonomy"] = taxonomy;
            parameters["thumbnails"] = thumbnails;
            logger.Debug("Executing products.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing products.get");
            return ret;
        }

        /// <summary>Returns a list of products and content modules</summary>
        /// <param name="source">Required - Query source</param>
        /// <param name="attributeFilter">Optional - Comma separated list of attributes to return</param>
        /// <param name="boostBy">Optional - Boosting specification</param>
        /// <param name="categoriesEnabled">categories.enabled - Optional - Whether to return category information</param>
        /// <param name="categoriesInclude">categories.include - Optional - Category specification</param>
        /// <param name="categoriesUseGcsConfig">categories.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="channels">Optional - Channels specification</param>
        /// <param name="country">Optional - Country restriction (ISO 3166)</param>
        /// <param name="crowdBy">Optional - Crowding specification</param>
        /// <param name="currency">Optional - Currency restriction (ISO 4217)</param>
        /// <param name="debugEnabled">debug.enabled - Optional - Google Internal</param>
        /// <param name="debugEnableLogging">debug.enableLogging - Optional - Google Internal</param>
        /// <param name="debugGeocodeRequest">debug.geocodeRequest - Optional - Google Internal</param>
        /// <param name="debugGeocodeResponse">debug.geocodeResponse - Optional - Google Internal</param>
        /// <param name="debugRdcRequest">debug.rdcRequest - Optional - Google Internal</param>
        /// <param name="debugRdcResponse">debug.rdcResponse - Optional - Google Internal</param>
        /// <param name="debugSearchRequest">debug.searchRequest - Optional - Google Internal</param>
        /// <param name="debugSearchResponse">debug.searchResponse - Optional - Google Internal</param>
        /// <param name="facetsDiscover">facets.discover - Optional - Facets to discover</param>
        /// <param name="facetsEnabled">facets.enabled - Optional - Whether to return facet information</param>
        /// <param name="facetsInclude">facets.include - Optional - Facets to include (applies when useGcsConfig == false)</param>
        /// <param name="facetsUseGcsConfig">facets.useGcsConfig - Optional - Whether to return facet information as configured in the GCS account</param>
        /// <param name="language">Optional - Language restriction (BCP 47)</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
        /// <param name="minAvailability">Optional - Must be one of the following values [inStock, limited, outOfStock, unknown]</param>
        /// <param name="productFields">Optional - Google Internal</param>
        /// <param name="promotionsEnabled">promotions.enabled - Optional - Whether to return promotion information</param>
        /// <param name="promotionsUseGcsConfig">promotions.useGcsConfig - Optional - Whether to return promotion information as configured in the GCS account</param>
        /// <param name="q">Optional - Search query</param>
        /// <param name="rankBy">Optional - Ranking specification</param>
        /// <param name="redirectsEnabled">redirects.enabled - Optional - Whether to return redirect information</param>
        /// <param name="redirectsUseGcsConfig">redirects.useGcsConfig - Optional - Whether to return redirect information as configured in the GCS account</param>
        /// <param name="relatedQueriesEnabled">relatedQueries.enabled - Optional - Whether to return related queries</param>
        /// <param name="relatedQueriesUseGcsConfig">relatedQueries.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="restrictBy">Optional - Restriction specification</param>
        /// <param name="safe">Optional - Whether safe search is enabled. Default: true</param>
        /// <param name="saytEnabled">sayt.enabled - Optional - Google Internal</param>
        /// <param name="saytUseGcsConfig">sayt.useGcsConfig - Optional - Google Internal</param>
        /// <param name="shelfSpaceAdsEnabled">shelfSpaceAds.enabled - Optional - Whether to return shelf space ads</param>
        /// <param name="shelfSpaceAdsMaxResults">shelfSpaceAds.maxResults - Optional - Minimum value of 0 - Maximum value of 4294967295 - The maximum number of shelf space ads to return</param>
        /// <param name="shelfSpaceAdsUseGcsConfig">shelfSpaceAds.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="spellingEnabled">spelling.enabled - Optional - Whether to return spelling suggestions</param>
        /// <param name="spellingUseGcsConfig">spelling.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index (1-based) of first product to return</param>
        /// <param name="taxonomy">Optional - Taxonomy name</param>
        /// <param name="thumbnails">Optional - Image thumbnails specification</param>
        /// <param name="useCase">Optional - One of CommerceSearchUseCase, ShoppingApiUseCase</param>
        public virtual Stream ListAsStream(string source,
                                           [Optional] string attributeFilter,
                                           [Optional] string boostBy,
                                           [Optional] Boolean? categoriesEnabled,
                                           [Optional] string categoriesInclude,
                                           [Optional] Boolean? categoriesUseGcsConfig,
                                           [Optional] string channels,
                                           [Optional] string country,
                                           [Optional] string crowdBy,
                                           [Optional] string currency,
                                           [Optional] Boolean? debugEnabled,
                                           [Optional] Boolean? debugEnableLogging,
                                           [Optional] Boolean? debugGeocodeRequest,
                                           [Optional] Boolean? debugGeocodeResponse,
                                           [Optional] Boolean? debugRdcRequest,
                                           [Optional] Boolean? debugRdcResponse,
                                           [Optional] Boolean? debugSearchRequest,
                                           [Optional] Boolean? debugSearchResponse,
                                           [Optional] string facetsDiscover,
                                           [Optional] Boolean? facetsEnabled,
                                           [Optional] string facetsInclude,
                                           [Optional] Boolean? facetsUseGcsConfig,
                                           [Optional] string language,
                                           [Optional] Int64? maxResults,
                                           [Optional] MinAvailability? minAvailability,
                                           [Optional] string productFields,
                                           [Optional] Boolean? promotionsEnabled,
                                           [Optional] Boolean? promotionsUseGcsConfig,
                                           [Optional] string q,
                                           [Optional] string rankBy,
                                           [Optional] Boolean? redirectsEnabled,
                                           [Optional] Boolean? redirectsUseGcsConfig,
                                           [Optional] Boolean? relatedQueriesEnabled,
                                           [Optional] Boolean? relatedQueriesUseGcsConfig,
                                           [Optional] string restrictBy,
                                           [Optional] Boolean? safe,
                                           [Optional] Boolean? saytEnabled,
                                           [Optional] Boolean? saytUseGcsConfig,
                                           [Optional] Boolean? shelfSpaceAdsEnabled,
                                           [Optional] Int64? shelfSpaceAdsMaxResults,
                                           [Optional] Boolean? shelfSpaceAdsUseGcsConfig,
                                           [Optional] Boolean? spellingEnabled,
                                           [Optional] Boolean? spellingUseGcsConfig,
                                           [Optional] Int64? startIndex,
                                           [Optional] string taxonomy,
                                           [Optional] string thumbnails,
                                           [Optional] string useCase)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["source"] = source;
            parameters["attributeFilter"] = attributeFilter;
            parameters["boostBy"] = boostBy;
            parameters["categories.enabled"] = categoriesEnabled;
            parameters["categories.include"] = categoriesInclude;
            parameters["categories.useGcsConfig"] = categoriesUseGcsConfig;
            parameters["channels"] = channels;
            parameters["country"] = country;
            parameters["crowdBy"] = crowdBy;
            parameters["currency"] = currency;
            parameters["debug.enabled"] = debugEnabled;
            parameters["debug.enableLogging"] = debugEnableLogging;
            parameters["debug.geocodeRequest"] = debugGeocodeRequest;
            parameters["debug.geocodeResponse"] = debugGeocodeResponse;
            parameters["debug.rdcRequest"] = debugRdcRequest;
            parameters["debug.rdcResponse"] = debugRdcResponse;
            parameters["debug.searchRequest"] = debugSearchRequest;
            parameters["debug.searchResponse"] = debugSearchResponse;
            parameters["facets.discover"] = facetsDiscover;
            parameters["facets.enabled"] = facetsEnabled;
            parameters["facets.include"] = facetsInclude;
            parameters["facets.useGcsConfig"] = facetsUseGcsConfig;
            parameters["language"] = language;
            parameters["maxResults"] = maxResults;
            parameters["minAvailability"] = minAvailability;
            parameters["productFields"] = productFields;
            parameters["promotions.enabled"] = promotionsEnabled;
            parameters["promotions.useGcsConfig"] = promotionsUseGcsConfig;
            parameters["q"] = q;
            parameters["rankBy"] = rankBy;
            parameters["redirects.enabled"] = redirectsEnabled;
            parameters["redirects.useGcsConfig"] = redirectsUseGcsConfig;
            parameters["relatedQueries.enabled"] = relatedQueriesEnabled;
            parameters["relatedQueries.useGcsConfig"] = relatedQueriesUseGcsConfig;
            parameters["restrictBy"] = restrictBy;
            parameters["safe"] = safe;
            parameters["sayt.enabled"] = saytEnabled;
            parameters["sayt.useGcsConfig"] = saytUseGcsConfig;
            parameters["shelfSpaceAds.enabled"] = shelfSpaceAdsEnabled;
            parameters["shelfSpaceAds.maxResults"] = shelfSpaceAdsMaxResults;
            parameters["shelfSpaceAds.useGcsConfig"] = shelfSpaceAdsUseGcsConfig;
            parameters["spelling.enabled"] = spellingEnabled;
            parameters["spelling.useGcsConfig"] = spellingUseGcsConfig;
            parameters["startIndex"] = startIndex;
            parameters["taxonomy"] = taxonomy;
            parameters["thumbnails"] = thumbnails;
            parameters["useCase"] = useCase;
            logger.Debug("Executing products.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing products.list");
            return ret;
        }

        /// <summary>Returns a single product</summary>
        /// <param name="accountId">Required - Minimum value of 0 - Maximum value of 4294967295 - Merchant center account id</param>
        /// <param name="productId">Required - Id of product</param>
        /// <param name="productIdType">Required - Type of productId</param>
        /// <param name="source">Required - Query source</param>
        /// <param name="attributeFilter">Optional - Comma separated list of attributes to return</param>
        /// <param name="categoriesEnabled">categories.enabled - Optional - Whether to return category information</param>
        /// <param name="categoriesInclude">categories.include - Optional - Category specification</param>
        /// <param name="categoriesUseGcsConfig">categories.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="debugEnabled">debug.enabled - Optional - Google Internal</param>
        /// <param name="debugEnableLogging">debug.enableLogging - Optional - Google Internal</param>
        /// <param name="debugSearchRequest">debug.searchRequest - Optional - Google Internal</param>
        /// <param name="debugSearchResponse">debug.searchResponse - Optional - Google Internal</param>
        /// <param name="productFields">Optional - Google Internal</param>
        /// <param name="recommendationsEnabled">recommendations.enabled - Optional - Whether to return recommendation information</param>
        /// <param name="recommendationsInclude">recommendations.include - Optional - Recommendation specification</param>
        /// <param name="recommendationsUseGcsConfig">recommendations.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="taxonomy">Optional - Merchant taxonomy</param>
        /// <param name="thumbnails">Optional - Thumbnail specification</param>
        public virtual Product GetAndExecute(long accountId,
                                             string productId,
                                             string productIdType,
                                             string source,
                                             [Optional] string attributeFilter,
                                             [Optional] Boolean? categoriesEnabled,
                                             [Optional] string categoriesInclude,
                                             [Optional] Boolean? categoriesUseGcsConfig,
                                             [Optional] Boolean? debugEnabled,
                                             [Optional] Boolean? debugEnableLogging,
                                             [Optional] Boolean? debugSearchRequest,
                                             [Optional] Boolean? debugSearchResponse,
                                             [Optional] string productFields,
                                             [Optional] Boolean? recommendationsEnabled,
                                             [Optional] string recommendationsInclude,
                                             [Optional] Boolean? recommendationsUseGcsConfig,
                                             [Optional] string taxonomy,
                                             [Optional] string thumbnails)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["accountId"] = accountId;
            parameters["productId"] = productId;
            parameters["productIdType"] = productIdType;
            parameters["source"] = source;
            parameters["attributeFilter"] = attributeFilter;
            parameters["categories.enabled"] = categoriesEnabled;
            parameters["categories.include"] = categoriesInclude;
            parameters["categories.useGcsConfig"] = categoriesUseGcsConfig;
            parameters["debug.enabled"] = debugEnabled;
            parameters["debug.enableLogging"] = debugEnableLogging;
            parameters["debug.searchRequest"] = debugSearchRequest;
            parameters["debug.searchResponse"] = debugSearchResponse;
            parameters["productFields"] = productFields;
            parameters["recommendations.enabled"] = recommendationsEnabled;
            parameters["recommendations.include"] = recommendationsInclude;
            parameters["recommendations.useGcsConfig"] = recommendationsUseGcsConfig;
            parameters["taxonomy"] = taxonomy;
            parameters["thumbnails"] = thumbnails;
            logger.Debug("Executing products.get");
            Product ret = service.JsonToObject<Product>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing products.get");
            return ret;
        }

        /// <summary>Returns a list of products and content modules</summary>
        /// <param name="source">Required - Query source</param>
        /// <param name="attributeFilter">Optional - Comma separated list of attributes to return</param>
        /// <param name="boostBy">Optional - Boosting specification</param>
        /// <param name="categoriesEnabled">categories.enabled - Optional - Whether to return category information</param>
        /// <param name="categoriesInclude">categories.include - Optional - Category specification</param>
        /// <param name="categoriesUseGcsConfig">categories.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="channels">Optional - Channels specification</param>
        /// <param name="country">Optional - Country restriction (ISO 3166)</param>
        /// <param name="crowdBy">Optional - Crowding specification</param>
        /// <param name="currency">Optional - Currency restriction (ISO 4217)</param>
        /// <param name="debugEnabled">debug.enabled - Optional - Google Internal</param>
        /// <param name="debugEnableLogging">debug.enableLogging - Optional - Google Internal</param>
        /// <param name="debugGeocodeRequest">debug.geocodeRequest - Optional - Google Internal</param>
        /// <param name="debugGeocodeResponse">debug.geocodeResponse - Optional - Google Internal</param>
        /// <param name="debugRdcRequest">debug.rdcRequest - Optional - Google Internal</param>
        /// <param name="debugRdcResponse">debug.rdcResponse - Optional - Google Internal</param>
        /// <param name="debugSearchRequest">debug.searchRequest - Optional - Google Internal</param>
        /// <param name="debugSearchResponse">debug.searchResponse - Optional - Google Internal</param>
        /// <param name="facetsDiscover">facets.discover - Optional - Facets to discover</param>
        /// <param name="facetsEnabled">facets.enabled - Optional - Whether to return facet information</param>
        /// <param name="facetsInclude">facets.include - Optional - Facets to include (applies when useGcsConfig == false)</param>
        /// <param name="facetsUseGcsConfig">facets.useGcsConfig - Optional - Whether to return facet information as configured in the GCS account</param>
        /// <param name="language">Optional - Language restriction (BCP 47)</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
        /// <param name="minAvailability">Optional - Must be one of the following values [inStock, limited, outOfStock, unknown]</param>
        /// <param name="productFields">Optional - Google Internal</param>
        /// <param name="promotionsEnabled">promotions.enabled - Optional - Whether to return promotion information</param>
        /// <param name="promotionsUseGcsConfig">promotions.useGcsConfig - Optional - Whether to return promotion information as configured in the GCS account</param>
        /// <param name="q">Optional - Search query</param>
        /// <param name="rankBy">Optional - Ranking specification</param>
        /// <param name="redirectsEnabled">redirects.enabled - Optional - Whether to return redirect information</param>
        /// <param name="redirectsUseGcsConfig">redirects.useGcsConfig - Optional - Whether to return redirect information as configured in the GCS account</param>
        /// <param name="relatedQueriesEnabled">relatedQueries.enabled - Optional - Whether to return related queries</param>
        /// <param name="relatedQueriesUseGcsConfig">relatedQueries.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="restrictBy">Optional - Restriction specification</param>
        /// <param name="safe">Optional - Whether safe search is enabled. Default: true</param>
        /// <param name="saytEnabled">sayt.enabled - Optional - Google Internal</param>
        /// <param name="saytUseGcsConfig">sayt.useGcsConfig - Optional - Google Internal</param>
        /// <param name="shelfSpaceAdsEnabled">shelfSpaceAds.enabled - Optional - Whether to return shelf space ads</param>
        /// <param name="shelfSpaceAdsMaxResults">shelfSpaceAds.maxResults - Optional - Minimum value of 0 - Maximum value of 4294967295 - The maximum number of shelf space ads to return</param>
        /// <param name="shelfSpaceAdsUseGcsConfig">shelfSpaceAds.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="spellingEnabled">spelling.enabled - Optional - Whether to return spelling suggestions</param>
        /// <param name="spellingUseGcsConfig">spelling.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index (1-based) of first product to return</param>
        /// <param name="taxonomy">Optional - Taxonomy name</param>
        /// <param name="thumbnails">Optional - Image thumbnails specification</param>
        /// <param name="useCase">Optional - One of CommerceSearchUseCase, ShoppingApiUseCase</param>
        public virtual Products ListAndExecute(string source,
                                               [Optional] string attributeFilter,
                                               [Optional] string boostBy,
                                               [Optional] Boolean? categoriesEnabled,
                                               [Optional] string categoriesInclude,
                                               [Optional] Boolean? categoriesUseGcsConfig,
                                               [Optional] string channels,
                                               [Optional] string country,
                                               [Optional] string crowdBy,
                                               [Optional] string currency,
                                               [Optional] Boolean? debugEnabled,
                                               [Optional] Boolean? debugEnableLogging,
                                               [Optional] Boolean? debugGeocodeRequest,
                                               [Optional] Boolean? debugGeocodeResponse,
                                               [Optional] Boolean? debugRdcRequest,
                                               [Optional] Boolean? debugRdcResponse,
                                               [Optional] Boolean? debugSearchRequest,
                                               [Optional] Boolean? debugSearchResponse,
                                               [Optional] string facetsDiscover,
                                               [Optional] Boolean? facetsEnabled,
                                               [Optional] string facetsInclude,
                                               [Optional] Boolean? facetsUseGcsConfig,
                                               [Optional] string language,
                                               [Optional] Int64? maxResults,
                                               [Optional] MinAvailability? minAvailability,
                                               [Optional] string productFields,
                                               [Optional] Boolean? promotionsEnabled,
                                               [Optional] Boolean? promotionsUseGcsConfig,
                                               [Optional] string q,
                                               [Optional] string rankBy,
                                               [Optional] Boolean? redirectsEnabled,
                                               [Optional] Boolean? redirectsUseGcsConfig,
                                               [Optional] Boolean? relatedQueriesEnabled,
                                               [Optional] Boolean? relatedQueriesUseGcsConfig,
                                               [Optional] string restrictBy,
                                               [Optional] Boolean? safe,
                                               [Optional] Boolean? saytEnabled,
                                               [Optional] Boolean? saytUseGcsConfig,
                                               [Optional] Boolean? shelfSpaceAdsEnabled,
                                               [Optional] Int64? shelfSpaceAdsMaxResults,
                                               [Optional] Boolean? shelfSpaceAdsUseGcsConfig,
                                               [Optional] Boolean? spellingEnabled,
                                               [Optional] Boolean? spellingUseGcsConfig,
                                               [Optional] Int64? startIndex,
                                               [Optional] string taxonomy,
                                               [Optional] string thumbnails,
                                               [Optional] string useCase)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["source"] = source;
            parameters["attributeFilter"] = attributeFilter;
            parameters["boostBy"] = boostBy;
            parameters["categories.enabled"] = categoriesEnabled;
            parameters["categories.include"] = categoriesInclude;
            parameters["categories.useGcsConfig"] = categoriesUseGcsConfig;
            parameters["channels"] = channels;
            parameters["country"] = country;
            parameters["crowdBy"] = crowdBy;
            parameters["currency"] = currency;
            parameters["debug.enabled"] = debugEnabled;
            parameters["debug.enableLogging"] = debugEnableLogging;
            parameters["debug.geocodeRequest"] = debugGeocodeRequest;
            parameters["debug.geocodeResponse"] = debugGeocodeResponse;
            parameters["debug.rdcRequest"] = debugRdcRequest;
            parameters["debug.rdcResponse"] = debugRdcResponse;
            parameters["debug.searchRequest"] = debugSearchRequest;
            parameters["debug.searchResponse"] = debugSearchResponse;
            parameters["facets.discover"] = facetsDiscover;
            parameters["facets.enabled"] = facetsEnabled;
            parameters["facets.include"] = facetsInclude;
            parameters["facets.useGcsConfig"] = facetsUseGcsConfig;
            parameters["language"] = language;
            parameters["maxResults"] = maxResults;
            parameters["minAvailability"] = minAvailability;
            parameters["productFields"] = productFields;
            parameters["promotions.enabled"] = promotionsEnabled;
            parameters["promotions.useGcsConfig"] = promotionsUseGcsConfig;
            parameters["q"] = q;
            parameters["rankBy"] = rankBy;
            parameters["redirects.enabled"] = redirectsEnabled;
            parameters["redirects.useGcsConfig"] = redirectsUseGcsConfig;
            parameters["relatedQueries.enabled"] = relatedQueriesEnabled;
            parameters["relatedQueries.useGcsConfig"] = relatedQueriesUseGcsConfig;
            parameters["restrictBy"] = restrictBy;
            parameters["safe"] = safe;
            parameters["sayt.enabled"] = saytEnabled;
            parameters["sayt.useGcsConfig"] = saytUseGcsConfig;
            parameters["shelfSpaceAds.enabled"] = shelfSpaceAdsEnabled;
            parameters["shelfSpaceAds.maxResults"] = shelfSpaceAdsMaxResults;
            parameters["shelfSpaceAds.useGcsConfig"] = shelfSpaceAdsUseGcsConfig;
            parameters["spelling.enabled"] = spellingEnabled;
            parameters["spelling.useGcsConfig"] = spellingUseGcsConfig;
            parameters["startIndex"] = startIndex;
            parameters["taxonomy"] = taxonomy;
            parameters["thumbnails"] = thumbnails;
            parameters["useCase"] = useCase;
            logger.Debug("Executing products.list");
            Products ret = service.JsonToObject<Products>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing products.list");
            return ret;
        }

        /// <summary>Returns a single product</summary>
        /// <param name="accountId">Required - Minimum value of 0 - Maximum value of 4294967295 - Merchant center account id</param>
        /// <param name="productId">Required - Id of product</param>
        /// <param name="productIdType">Required - Type of productId</param>
        /// <param name="source">Required - Query source</param>
        public virtual GetRequest Get(long accountId, string productId, string productIdType, string source)
        {
            return new GetRequest(service, accountId, productId, productIdType, source);
        }

        /// <summary>Returns a single product</summary>
        /// <param name="accountId">Required - Minimum value of 0 - Maximum value of 4294967295 - Merchant center account id</param>
        /// <param name="productId">Required - Id of product</param>
        /// <param name="productIdType">Required - Type of productId</param>
        /// <param name="source">Required - Query source</param>
        /// <param name="attributeFilter">Optional - Comma separated list of attributes to return</param>
        /// <param name="categoriesEnabled">categories.enabled - Optional - Whether to return category information</param>
        /// <param name="categoriesInclude">categories.include - Optional - Category specification</param>
        /// <param name="categoriesUseGcsConfig">categories.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="debugEnabled">debug.enabled - Optional - Google Internal</param>
        /// <param name="debugEnableLogging">debug.enableLogging - Optional - Google Internal</param>
        /// <param name="debugSearchRequest">debug.searchRequest - Optional - Google Internal</param>
        /// <param name="debugSearchResponse">debug.searchResponse - Optional - Google Internal</param>
        /// <param name="productFields">Optional - Google Internal</param>
        /// <param name="recommendationsEnabled">recommendations.enabled - Optional - Whether to return recommendation information</param>
        /// <param name="recommendationsInclude">recommendations.include - Optional - Recommendation specification</param>
        /// <param name="recommendationsUseGcsConfig">recommendations.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="taxonomy">Optional - Merchant taxonomy</param>
        /// <param name="thumbnails">Optional - Thumbnail specification</param>
        public virtual GetRequest Get(long accountId,
                                      string productId,
                                      string productIdType,
                                      string source,
                                      [Optional] string attributeFilter,
                                      [Optional] Boolean? categoriesEnabled,
                                      [Optional] string categoriesInclude,
                                      [Optional] Boolean? categoriesUseGcsConfig,
                                      [Optional] Boolean? debugEnabled,
                                      [Optional] Boolean? debugEnableLogging,
                                      [Optional] Boolean? debugSearchRequest,
                                      [Optional] Boolean? debugSearchResponse,
                                      [Optional] string productFields,
                                      [Optional] Boolean? recommendationsEnabled,
                                      [Optional] string recommendationsInclude,
                                      [Optional] Boolean? recommendationsUseGcsConfig,
                                      [Optional] string taxonomy,
                                      [Optional] string thumbnails)
        {
            return new GetRequest(
                service, accountId, productId, productIdType, source, attributeFilter, categoriesEnabled,
                categoriesInclude, categoriesUseGcsConfig, debugEnabled, debugEnableLogging, debugSearchRequest,
                debugSearchResponse, productFields, recommendationsEnabled, recommendationsInclude,
                recommendationsUseGcsConfig, taxonomy, thumbnails);
        }

        /// <summary>Returns a list of products and content modules</summary>
        /// <param name="source">Required - Query source</param>
        public virtual ListRequest List(string source)
        {
            return new ListRequest(service, source);
        }

        /// <summary>Returns a list of products and content modules</summary>
        /// <param name="source">Required - Query source</param>
        /// <param name="attributeFilter">Optional - Comma separated list of attributes to return</param>
        /// <param name="boostBy">Optional - Boosting specification</param>
        /// <param name="categoriesEnabled">categories.enabled - Optional - Whether to return category information</param>
        /// <param name="categoriesInclude">categories.include - Optional - Category specification</param>
        /// <param name="categoriesUseGcsConfig">categories.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="channels">Optional - Channels specification</param>
        /// <param name="country">Optional - Country restriction (ISO 3166)</param>
        /// <param name="crowdBy">Optional - Crowding specification</param>
        /// <param name="currency">Optional - Currency restriction (ISO 4217)</param>
        /// <param name="debugEnabled">debug.enabled - Optional - Google Internal</param>
        /// <param name="debugEnableLogging">debug.enableLogging - Optional - Google Internal</param>
        /// <param name="debugGeocodeRequest">debug.geocodeRequest - Optional - Google Internal</param>
        /// <param name="debugGeocodeResponse">debug.geocodeResponse - Optional - Google Internal</param>
        /// <param name="debugRdcRequest">debug.rdcRequest - Optional - Google Internal</param>
        /// <param name="debugRdcResponse">debug.rdcResponse - Optional - Google Internal</param>
        /// <param name="debugSearchRequest">debug.searchRequest - Optional - Google Internal</param>
        /// <param name="debugSearchResponse">debug.searchResponse - Optional - Google Internal</param>
        /// <param name="facetsDiscover">facets.discover - Optional - Facets to discover</param>
        /// <param name="facetsEnabled">facets.enabled - Optional - Whether to return facet information</param>
        /// <param name="facetsInclude">facets.include - Optional - Facets to include (applies when useGcsConfig == false)</param>
        /// <param name="facetsUseGcsConfig">facets.useGcsConfig - Optional - Whether to return facet information as configured in the GCS account</param>
        /// <param name="language">Optional - Language restriction (BCP 47)</param>
        /// <param name="maxResults">Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to return</param>
        /// <param name="minAvailability">Optional - Must be one of the following values [inStock, limited, outOfStock, unknown]</param>
        /// <param name="productFields">Optional - Google Internal</param>
        /// <param name="promotionsEnabled">promotions.enabled - Optional - Whether to return promotion information</param>
        /// <param name="promotionsUseGcsConfig">promotions.useGcsConfig - Optional - Whether to return promotion information as configured in the GCS account</param>
        /// <param name="q">Optional - Search query</param>
        /// <param name="rankBy">Optional - Ranking specification</param>
        /// <param name="redirectsEnabled">redirects.enabled - Optional - Whether to return redirect information</param>
        /// <param name="redirectsUseGcsConfig">redirects.useGcsConfig - Optional - Whether to return redirect information as configured in the GCS account</param>
        /// <param name="relatedQueriesEnabled">relatedQueries.enabled - Optional - Whether to return related queries</param>
        /// <param name="relatedQueriesUseGcsConfig">relatedQueries.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="restrictBy">Optional - Restriction specification</param>
        /// <param name="safe">Optional - Whether safe search is enabled. Default: true</param>
        /// <param name="saytEnabled">sayt.enabled - Optional - Google Internal</param>
        /// <param name="saytUseGcsConfig">sayt.useGcsConfig - Optional - Google Internal</param>
        /// <param name="shelfSpaceAdsEnabled">shelfSpaceAds.enabled - Optional - Whether to return shelf space ads</param>
        /// <param name="shelfSpaceAdsMaxResults">shelfSpaceAds.maxResults - Optional - Minimum value of 0 - Maximum value of 4294967295 - The maximum number of shelf space ads to return</param>
        /// <param name="shelfSpaceAdsUseGcsConfig">shelfSpaceAds.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="spellingEnabled">spelling.enabled - Optional - Whether to return spelling suggestions</param>
        /// <param name="spellingUseGcsConfig">spelling.useGcsConfig - Optional - This parameter is currently ignored</param>
        /// <param name="startIndex">Optional - Minimum value of 0 - Maximum value of 4294967295 - Index (1-based) of first product to return</param>
        /// <param name="taxonomy">Optional - Taxonomy name</param>
        /// <param name="thumbnails">Optional - Image thumbnails specification</param>
        /// <param name="useCase">Optional - One of CommerceSearchUseCase, ShoppingApiUseCase</param>
        public virtual ListRequest List(string source,
                                        [Optional] string attributeFilter,
                                        [Optional] string boostBy,
                                        [Optional] Boolean? categoriesEnabled,
                                        [Optional] string categoriesInclude,
                                        [Optional] Boolean? categoriesUseGcsConfig,
                                        [Optional] string channels,
                                        [Optional] string country,
                                        [Optional] string crowdBy,
                                        [Optional] string currency,
                                        [Optional] Boolean? debugEnabled,
                                        [Optional] Boolean? debugEnableLogging,
                                        [Optional] Boolean? debugGeocodeRequest,
                                        [Optional] Boolean? debugGeocodeResponse,
                                        [Optional] Boolean? debugRdcRequest,
                                        [Optional] Boolean? debugRdcResponse,
                                        [Optional] Boolean? debugSearchRequest,
                                        [Optional] Boolean? debugSearchResponse,
                                        [Optional] string facetsDiscover,
                                        [Optional] Boolean? facetsEnabled,
                                        [Optional] string facetsInclude,
                                        [Optional] Boolean? facetsUseGcsConfig,
                                        [Optional] string language,
                                        [Optional] Int64? maxResults,
                                        [Optional] MinAvailability? minAvailability,
                                        [Optional] string productFields,
                                        [Optional] Boolean? promotionsEnabled,
                                        [Optional] Boolean? promotionsUseGcsConfig,
                                        [Optional] string q,
                                        [Optional] string rankBy,
                                        [Optional] Boolean? redirectsEnabled,
                                        [Optional] Boolean? redirectsUseGcsConfig,
                                        [Optional] Boolean? relatedQueriesEnabled,
                                        [Optional] Boolean? relatedQueriesUseGcsConfig,
                                        [Optional] string restrictBy,
                                        [Optional] Boolean? safe,
                                        [Optional] Boolean? saytEnabled,
                                        [Optional] Boolean? saytUseGcsConfig,
                                        [Optional] Boolean? shelfSpaceAdsEnabled,
                                        [Optional] Int64? shelfSpaceAdsMaxResults,
                                        [Optional] Boolean? shelfSpaceAdsUseGcsConfig,
                                        [Optional] Boolean? spellingEnabled,
                                        [Optional] Boolean? spellingUseGcsConfig,
                                        [Optional] Int64? startIndex,
                                        [Optional] string taxonomy,
                                        [Optional] string thumbnails,
                                        [Optional] string useCase)
        {
            return new ListRequest(
                service, source, attributeFilter, boostBy, categoriesEnabled, categoriesInclude,
                categoriesUseGcsConfig, channels, country, crowdBy, currency, debugEnabled, debugEnableLogging,
                debugGeocodeRequest, debugGeocodeResponse, debugRdcRequest, debugRdcResponse, debugSearchRequest,
                debugSearchResponse, facetsDiscover, facetsEnabled, facetsInclude, facetsUseGcsConfig, language,
                maxResults, minAvailability, productFields, promotionsEnabled, promotionsUseGcsConfig, q, rankBy,
                redirectsEnabled, redirectsUseGcsConfig, relatedQueriesEnabled, relatedQueriesUseGcsConfig, restrictBy,
                safe, saytEnabled, saytUseGcsConfig, shelfSpaceAdsEnabled, shelfSpaceAdsMaxResults,
                shelfSpaceAdsUseGcsConfig, spellingEnabled, spellingUseGcsConfig, startIndex, taxonomy, thumbnails,
                useCase);
        }

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Product>
        {
            private readonly long accountId;
            private readonly string productId;

            private readonly string productIdType;
            private readonly string source;

            private string attributeFilter;

            private Boolean? categoriesEnabled;

            private string categoriesInclude;

            private Boolean? categoriesUseGcsConfig;

            private Boolean? debugEnableLogging;

            private Boolean? debugEnabled;

            private Boolean? debugSearchRequest;

            private Boolean? debugSearchResponse;

            private string productFields;

            private Boolean? recommendationsEnabled;

            private string recommendationsInclude;

            private Boolean? recommendationsUseGcsConfig;

            private string taxonomy;

            private string thumbnails;

            public GetRequest(ISchemaAwareRequestExecutor service,
                              long accountId,
                              string productId,
                              string productIdType,
                              string source) : base(service)
            {
                this.accountId = accountId;
                this.productId = productId;
                this.productIdType = productIdType;
                this.source = source;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              long accountId,
                              string productId,
                              string productIdType,
                              string source,
                              [Optional] string attributeFilter,
                              [Optional] Boolean? categoriesEnabled,
                              [Optional] string categoriesInclude,
                              [Optional] Boolean? categoriesUseGcsConfig,
                              [Optional] Boolean? debugEnabled,
                              [Optional] Boolean? debugEnableLogging,
                              [Optional] Boolean? debugSearchRequest,
                              [Optional] Boolean? debugSearchResponse,
                              [Optional] string productFields,
                              [Optional] Boolean? recommendationsEnabled,
                              [Optional] string recommendationsInclude,
                              [Optional] Boolean? recommendationsUseGcsConfig,
                              [Optional] string taxonomy,
                              [Optional] string thumbnails) : base(service)
            {
                this.accountId = accountId;
                this.productId = productId;
                this.productIdType = productIdType;
                this.source = source;
                this.attributeFilter = attributeFilter;
                this.categoriesEnabled = categoriesEnabled;
                this.categoriesInclude = categoriesInclude;
                this.categoriesUseGcsConfig = categoriesUseGcsConfig;
                this.debugEnabled = debugEnabled;
                this.debugEnableLogging = debugEnableLogging;
                this.debugSearchRequest = debugSearchRequest;
                this.debugSearchResponse = debugSearchResponse;
                this.productFields = productFields;
                this.recommendationsEnabled = recommendationsEnabled;
                this.recommendationsInclude = recommendationsInclude;
                this.recommendationsUseGcsConfig = recommendationsUseGcsConfig;
                this.taxonomy = taxonomy;
                this.thumbnails = thumbnails;
            }

            /// <summary>Merchant center account id</summary>
            [RequestParameter("accountId")]
            public virtual long AccountId
            {
                get { return accountId; }
            }

            /// <summary>Comma separated list of attributes to return</summary>
            [RequestParameter("attributeFilter")]
            public virtual string AttributeFilter
            {
                get { return attributeFilter; }
                set { attributeFilter = value; }
            }

            /// <summary>Whether to return category information</summary>
            [RequestParameter("categories.enabled")]
            public virtual Boolean? CategoriesEnabled
            {
                get { return categoriesEnabled; }
                set { categoriesEnabled = value; }
            }

            /// <summary>Category specification</summary>
            [RequestParameter("categories.include")]
            public virtual string CategoriesInclude
            {
                get { return categoriesInclude; }
                set { categoriesInclude = value; }
            }

            /// <summary>This parameter is currently ignored</summary>
            [RequestParameter("categories.useGcsConfig")]
            public virtual Boolean? CategoriesUseGcsConfig
            {
                get { return categoriesUseGcsConfig; }
                set { categoriesUseGcsConfig = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.enableLogging")]
            public virtual Boolean? DebugEnableLogging
            {
                get { return debugEnableLogging; }
                set { debugEnableLogging = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.enabled")]
            public virtual Boolean? DebugEnabled
            {
                get { return debugEnabled; }
                set { debugEnabled = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.searchRequest")]
            public virtual Boolean? DebugSearchRequest
            {
                get { return debugSearchRequest; }
                set { debugSearchRequest = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.searchResponse")]
            public virtual Boolean? DebugSearchResponse
            {
                get { return debugSearchResponse; }
                set { debugSearchResponse = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("productFields")]
            public virtual string ProductFields
            {
                get { return productFields; }
                set { productFields = value; }
            }

            /// <summary>Id of product</summary>
            [RequestParameter("productId")]
            public virtual string ProductId
            {
                get { return productId; }
            }

            /// <summary>Type of productId</summary>
            [RequestParameter("productIdType")]
            public virtual string ProductIdType
            {
                get { return productIdType; }
            }

            /// <summary>Whether to return recommendation information</summary>
            [RequestParameter("recommendations.enabled")]
            public virtual Boolean? RecommendationsEnabled
            {
                get { return recommendationsEnabled; }
                set { recommendationsEnabled = value; }
            }

            /// <summary>Recommendation specification</summary>
            [RequestParameter("recommendations.include")]
            public virtual string RecommendationsInclude
            {
                get { return recommendationsInclude; }
                set { recommendationsInclude = value; }
            }

            /// <summary>This parameter is currently ignored</summary>
            [RequestParameter("recommendations.useGcsConfig")]
            public virtual Boolean? RecommendationsUseGcsConfig
            {
                get { return recommendationsUseGcsConfig; }
                set { recommendationsUseGcsConfig = value; }
            }

            /// <summary>Query source</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
            }

            /// <summary>Merchant taxonomy</summary>
            [RequestParameter("taxonomy")]
            public virtual string Taxonomy
            {
                get { return taxonomy; }
                set { taxonomy = value; }
            }

            /// <summary>Thumbnail specification</summary>
            [RequestParameter("thumbnails")]
            public virtual string Thumbnails
            {
                get { return thumbnails; }
                set { thumbnails = value; }
            }

            protected override string ResourceName
            {
                get { return "products"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<Products>
        {
            private readonly string source;
            private string attributeFilter;

            private string boostBy;

            private Boolean? categoriesEnabled;

            private string categoriesInclude;

            private Boolean? categoriesUseGcsConfig;

            private string channels;

            private string country;

            private string crowdBy;

            private string currency;

            private Boolean? debugEnableLogging;

            private Boolean? debugEnabled;

            private Boolean? debugGeocodeRequest;

            private Boolean? debugGeocodeResponse;

            private Boolean? debugRdcRequest;

            private Boolean? debugRdcResponse;

            private Boolean? debugSearchRequest;

            private Boolean? debugSearchResponse;

            private string facetsDiscover;

            private Boolean? facetsEnabled;

            private string facetsInclude;

            private Boolean? facetsUseGcsConfig;

            private string language;

            private Int64? maxResults;

            private MinAvailability? minAvailability;

            private string productFields;

            private Boolean? promotionsEnabled;

            private Boolean? promotionsUseGcsConfig;

            private string q;

            private string rankBy;

            private Boolean? redirectsEnabled;

            private Boolean? redirectsUseGcsConfig;

            private Boolean? relatedQueriesEnabled;

            private Boolean? relatedQueriesUseGcsConfig;

            private string restrictBy;

            private Boolean? safe;

            private Boolean? saytEnabled;

            private Boolean? saytUseGcsConfig;

            private Boolean? shelfSpaceAdsEnabled;

            private Int64? shelfSpaceAdsMaxResults;

            private Boolean? shelfSpaceAdsUseGcsConfig;

            private Boolean? spellingEnabled;

            private Boolean? spellingUseGcsConfig;

            private Int64? startIndex;

            private string taxonomy;

            private string thumbnails;

            private string useCase;

            public ListRequest(ISchemaAwareRequestExecutor service, string source) : base(service)
            {
                this.source = source;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               string source,
                               [Optional] string attributeFilter,
                               [Optional] string boostBy,
                               [Optional] Boolean? categoriesEnabled,
                               [Optional] string categoriesInclude,
                               [Optional] Boolean? categoriesUseGcsConfig,
                               [Optional] string channels,
                               [Optional] string country,
                               [Optional] string crowdBy,
                               [Optional] string currency,
                               [Optional] Boolean? debugEnabled,
                               [Optional] Boolean? debugEnableLogging,
                               [Optional] Boolean? debugGeocodeRequest,
                               [Optional] Boolean? debugGeocodeResponse,
                               [Optional] Boolean? debugRdcRequest,
                               [Optional] Boolean? debugRdcResponse,
                               [Optional] Boolean? debugSearchRequest,
                               [Optional] Boolean? debugSearchResponse,
                               [Optional] string facetsDiscover,
                               [Optional] Boolean? facetsEnabled,
                               [Optional] string facetsInclude,
                               [Optional] Boolean? facetsUseGcsConfig,
                               [Optional] string language,
                               [Optional] Int64? maxResults,
                               [Optional] MinAvailability? minAvailability,
                               [Optional] string productFields,
                               [Optional] Boolean? promotionsEnabled,
                               [Optional] Boolean? promotionsUseGcsConfig,
                               [Optional] string q,
                               [Optional] string rankBy,
                               [Optional] Boolean? redirectsEnabled,
                               [Optional] Boolean? redirectsUseGcsConfig,
                               [Optional] Boolean? relatedQueriesEnabled,
                               [Optional] Boolean? relatedQueriesUseGcsConfig,
                               [Optional] string restrictBy,
                               [Optional] Boolean? safe,
                               [Optional] Boolean? saytEnabled,
                               [Optional] Boolean? saytUseGcsConfig,
                               [Optional] Boolean? shelfSpaceAdsEnabled,
                               [Optional] Int64? shelfSpaceAdsMaxResults,
                               [Optional] Boolean? shelfSpaceAdsUseGcsConfig,
                               [Optional] Boolean? spellingEnabled,
                               [Optional] Boolean? spellingUseGcsConfig,
                               [Optional] Int64? startIndex,
                               [Optional] string taxonomy,
                               [Optional] string thumbnails,
                               [Optional] string useCase) : base(service)
            {
                this.source = source;
                this.attributeFilter = attributeFilter;
                this.boostBy = boostBy;
                this.categoriesEnabled = categoriesEnabled;
                this.categoriesInclude = categoriesInclude;
                this.categoriesUseGcsConfig = categoriesUseGcsConfig;
                this.channels = channels;
                this.country = country;
                this.crowdBy = crowdBy;
                this.currency = currency;
                this.debugEnabled = debugEnabled;
                this.debugEnableLogging = debugEnableLogging;
                this.debugGeocodeRequest = debugGeocodeRequest;
                this.debugGeocodeResponse = debugGeocodeResponse;
                this.debugRdcRequest = debugRdcRequest;
                this.debugRdcResponse = debugRdcResponse;
                this.debugSearchRequest = debugSearchRequest;
                this.debugSearchResponse = debugSearchResponse;
                this.facetsDiscover = facetsDiscover;
                this.facetsEnabled = facetsEnabled;
                this.facetsInclude = facetsInclude;
                this.facetsUseGcsConfig = facetsUseGcsConfig;
                this.language = language;
                this.maxResults = maxResults;
                this.minAvailability = minAvailability;
                this.productFields = productFields;
                this.promotionsEnabled = promotionsEnabled;
                this.promotionsUseGcsConfig = promotionsUseGcsConfig;
                this.q = q;
                this.rankBy = rankBy;
                this.redirectsEnabled = redirectsEnabled;
                this.redirectsUseGcsConfig = redirectsUseGcsConfig;
                this.relatedQueriesEnabled = relatedQueriesEnabled;
                this.relatedQueriesUseGcsConfig = relatedQueriesUseGcsConfig;
                this.restrictBy = restrictBy;
                this.safe = safe;
                this.saytEnabled = saytEnabled;
                this.saytUseGcsConfig = saytUseGcsConfig;
                this.shelfSpaceAdsEnabled = shelfSpaceAdsEnabled;
                this.shelfSpaceAdsMaxResults = shelfSpaceAdsMaxResults;
                this.shelfSpaceAdsUseGcsConfig = shelfSpaceAdsUseGcsConfig;
                this.spellingEnabled = spellingEnabled;
                this.spellingUseGcsConfig = spellingUseGcsConfig;
                this.startIndex = startIndex;
                this.taxonomy = taxonomy;
                this.thumbnails = thumbnails;
                this.useCase = useCase;
            }

            /// <summary>Comma separated list of attributes to return</summary>
            [RequestParameter("attributeFilter")]
            public virtual string AttributeFilter
            {
                get { return attributeFilter; }
                set { attributeFilter = value; }
            }

            /// <summary>Boosting specification</summary>
            [RequestParameter("boostBy")]
            public virtual string BoostBy
            {
                get { return boostBy; }
                set { boostBy = value; }
            }

            /// <summary>Whether to return category information</summary>
            [RequestParameter("categories.enabled")]
            public virtual Boolean? CategoriesEnabled
            {
                get { return categoriesEnabled; }
                set { categoriesEnabled = value; }
            }

            /// <summary>Category specification</summary>
            [RequestParameter("categories.include")]
            public virtual string CategoriesInclude
            {
                get { return categoriesInclude; }
                set { categoriesInclude = value; }
            }

            /// <summary>This parameter is currently ignored</summary>
            [RequestParameter("categories.useGcsConfig")]
            public virtual Boolean? CategoriesUseGcsConfig
            {
                get { return categoriesUseGcsConfig; }
                set { categoriesUseGcsConfig = value; }
            }

            /// <summary>Channels specification</summary>
            [RequestParameter("channels")]
            public virtual string Channels
            {
                get { return channels; }
                set { channels = value; }
            }

            /// <summary>Country restriction (ISO 3166)</summary>
            [RequestParameter("country")]
            public virtual string Country
            {
                get { return country; }
                set { country = value; }
            }

            /// <summary>Crowding specification</summary>
            [RequestParameter("crowdBy")]
            public virtual string CrowdBy
            {
                get { return crowdBy; }
                set { crowdBy = value; }
            }

            /// <summary>Currency restriction (ISO 4217)</summary>
            [RequestParameter("currency")]
            public virtual string Currency
            {
                get { return currency; }
                set { currency = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.enableLogging")]
            public virtual Boolean? DebugEnableLogging
            {
                get { return debugEnableLogging; }
                set { debugEnableLogging = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.enabled")]
            public virtual Boolean? DebugEnabled
            {
                get { return debugEnabled; }
                set { debugEnabled = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.geocodeRequest")]
            public virtual Boolean? DebugGeocodeRequest
            {
                get { return debugGeocodeRequest; }
                set { debugGeocodeRequest = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.geocodeResponse")]
            public virtual Boolean? DebugGeocodeResponse
            {
                get { return debugGeocodeResponse; }
                set { debugGeocodeResponse = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.rdcRequest")]
            public virtual Boolean? DebugRdcRequest
            {
                get { return debugRdcRequest; }
                set { debugRdcRequest = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.rdcResponse")]
            public virtual Boolean? DebugRdcResponse
            {
                get { return debugRdcResponse; }
                set { debugRdcResponse = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.searchRequest")]
            public virtual Boolean? DebugSearchRequest
            {
                get { return debugSearchRequest; }
                set { debugSearchRequest = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("debug.searchResponse")]
            public virtual Boolean? DebugSearchResponse
            {
                get { return debugSearchResponse; }
                set { debugSearchResponse = value; }
            }

            /// <summary>Facets to discover</summary>
            [RequestParameter("facets.discover")]
            public virtual string FacetsDiscover
            {
                get { return facetsDiscover; }
                set { facetsDiscover = value; }
            }

            /// <summary>Whether to return facet information</summary>
            [RequestParameter("facets.enabled")]
            public virtual Boolean? FacetsEnabled
            {
                get { return facetsEnabled; }
                set { facetsEnabled = value; }
            }

            /// <summary>Facets to include (applies when useGcsConfig == false)</summary>
            [RequestParameter("facets.include")]
            public virtual string FacetsInclude
            {
                get { return facetsInclude; }
                set { facetsInclude = value; }
            }

            /// <summary>Whether to return facet information as configured in the GCS account</summary>
            [RequestParameter("facets.useGcsConfig")]
            public virtual Boolean? FacetsUseGcsConfig
            {
                get { return facetsUseGcsConfig; }
                set { facetsUseGcsConfig = value; }
            }

            /// <summary>Language restriction (BCP 47)</summary>
            [RequestParameter("language")]
            public virtual string Language
            {
                get { return language; }
                set { language = value; }
            }

            /// <summary>Maximum number of results to return</summary>
            [RequestParameter("maxResults")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            [RequestParameter("minAvailability")]
            public virtual MinAvailability? MinAvailability
            {
                get { return minAvailability; }
                set { minAvailability = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("productFields")]
            public virtual string ProductFields
            {
                get { return productFields; }
                set { productFields = value; }
            }

            /// <summary>Whether to return promotion information</summary>
            [RequestParameter("promotions.enabled")]
            public virtual Boolean? PromotionsEnabled
            {
                get { return promotionsEnabled; }
                set { promotionsEnabled = value; }
            }

            /// <summary>Whether to return promotion information as configured in the GCS account</summary>
            [RequestParameter("promotions.useGcsConfig")]
            public virtual Boolean? PromotionsUseGcsConfig
            {
                get { return promotionsUseGcsConfig; }
                set { promotionsUseGcsConfig = value; }
            }

            /// <summary>Search query</summary>
            [RequestParameter("q")]
            public virtual string Q
            {
                get { return q; }
                set { q = value; }
            }

            /// <summary>Ranking specification</summary>
            [RequestParameter("rankBy")]
            public virtual string RankBy
            {
                get { return rankBy; }
                set { rankBy = value; }
            }

            /// <summary>Whether to return redirect information</summary>
            [RequestParameter("redirects.enabled")]
            public virtual Boolean? RedirectsEnabled
            {
                get { return redirectsEnabled; }
                set { redirectsEnabled = value; }
            }

            /// <summary>Whether to return redirect information as configured in the GCS account</summary>
            [RequestParameter("redirects.useGcsConfig")]
            public virtual Boolean? RedirectsUseGcsConfig
            {
                get { return redirectsUseGcsConfig; }
                set { redirectsUseGcsConfig = value; }
            }

            /// <summary>Whether to return related queries</summary>
            [RequestParameter("relatedQueries.enabled")]
            public virtual Boolean? RelatedQueriesEnabled
            {
                get { return relatedQueriesEnabled; }
                set { relatedQueriesEnabled = value; }
            }

            /// <summary>This parameter is currently ignored</summary>
            [RequestParameter("relatedQueries.useGcsConfig")]
            public virtual Boolean? RelatedQueriesUseGcsConfig
            {
                get { return relatedQueriesUseGcsConfig; }
                set { relatedQueriesUseGcsConfig = value; }
            }

            /// <summary>Restriction specification</summary>
            [RequestParameter("restrictBy")]
            public virtual string RestrictBy
            {
                get { return restrictBy; }
                set { restrictBy = value; }
            }

            /// <summary>Whether safe search is enabled. Default: true</summary>
            [RequestParameter("safe")]
            public virtual Boolean? Safe
            {
                get { return safe; }
                set { safe = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("sayt.enabled")]
            public virtual Boolean? SaytEnabled
            {
                get { return saytEnabled; }
                set { saytEnabled = value; }
            }

            /// <summary>Google Internal</summary>
            [RequestParameter("sayt.useGcsConfig")]
            public virtual Boolean? SaytUseGcsConfig
            {
                get { return saytUseGcsConfig; }
                set { saytUseGcsConfig = value; }
            }

            /// <summary>Whether to return shelf space ads</summary>
            [RequestParameter("shelfSpaceAds.enabled")]
            public virtual Boolean? ShelfSpaceAdsEnabled
            {
                get { return shelfSpaceAdsEnabled; }
                set { shelfSpaceAdsEnabled = value; }
            }

            /// <summary>The maximum number of shelf space ads to return</summary>
            [RequestParameter("shelfSpaceAds.maxResults")]
            public virtual Int64? ShelfSpaceAdsMaxResults
            {
                get { return shelfSpaceAdsMaxResults; }
                set { shelfSpaceAdsMaxResults = value; }
            }

            /// <summary>This parameter is currently ignored</summary>
            [RequestParameter("shelfSpaceAds.useGcsConfig")]
            public virtual Boolean? ShelfSpaceAdsUseGcsConfig
            {
                get { return shelfSpaceAdsUseGcsConfig; }
                set { shelfSpaceAdsUseGcsConfig = value; }
            }

            /// <summary>Query source</summary>
            [RequestParameter("source")]
            public virtual string Source
            {
                get { return source; }
            }

            /// <summary>Whether to return spelling suggestions</summary>
            [RequestParameter("spelling.enabled")]
            public virtual Boolean? SpellingEnabled
            {
                get { return spellingEnabled; }
                set { spellingEnabled = value; }
            }

            /// <summary>This parameter is currently ignored</summary>
            [RequestParameter("spelling.useGcsConfig")]
            public virtual Boolean? SpellingUseGcsConfig
            {
                get { return spellingUseGcsConfig; }
                set { spellingUseGcsConfig = value; }
            }

            /// <summary>Index (1-based) of first product to return</summary>
            [RequestParameter("startIndex")]
            public virtual Int64? StartIndex
            {
                get { return startIndex; }
                set { startIndex = value; }
            }

            /// <summary>Taxonomy name</summary>
            [RequestParameter("taxonomy")]
            public virtual string Taxonomy
            {
                get { return taxonomy; }
                set { taxonomy = value; }
            }

            /// <summary>Image thumbnails specification</summary>
            [RequestParameter("thumbnails")]
            public virtual string Thumbnails
            {
                get { return thumbnails; }
                set { thumbnails = value; }
            }

            /// <summary>One of CommerceSearchUseCase, ShoppingApiUseCase</summary>
            [RequestParameter("useCase")]
            public virtual string UseCase
            {
                get { return useCase; }
                set { useCase = value; }
            }

            protected override string ResourceName
            {
                get { return "products"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }
}