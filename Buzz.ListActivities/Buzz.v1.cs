//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class Activity : IResponse
    {
        [JsonProperty("actor")]
        public virtual ActorData Actor { get; set; }

        [JsonProperty("address")]
        public virtual string Address { get; set; }

        [JsonProperty("annotation")]
        public virtual string Annotation { get; set; }

        [JsonProperty("categories")]
        public virtual IList<CategoriesData> Categories { get; set; }

        [JsonProperty("crosspostSource")]
        public virtual string CrosspostSource { get; set; }

        [JsonProperty("detectedlLang")]
        public virtual string DetectedlLang { get; set; }

        [JsonProperty("geocode")]
        public virtual string Geocode { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("object")]
        public virtual ObjectData Object { get; set; }

        [JsonProperty("placeId")]
        public virtual string PlaceId { get; set; }

        [JsonProperty("placeName")]
        public virtual string PlaceName { get; set; }

        [JsonProperty("placeholder")]
        public virtual string Placeholder { get; set; }

        [JsonProperty("published")]
        public virtual string Published { get; set; }

        [JsonProperty("radius")]
        public virtual string Radius { get; set; }

        [JsonProperty("source")]
        public virtual SourceData Source { get; set; }

        [JsonProperty("targetLang")]
        public virtual string TargetLang { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("untranslatedTitle")]
        public virtual string UntranslatedTitle { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        [JsonProperty("verbs")]
        public virtual IList<String> Verbs { get; set; }

        [JsonProperty("visibility")]
        public virtual VisibilityData Visibility { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: ActorData

        public class ActorData
        {
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("profileUrl")]
            public virtual string ProfileUrl { get; set; }

            [JsonProperty("thumbnailUrl")]
            public virtual string ThumbnailUrl { get; set; }
        }

        #endregion

        #region Nested type: CategoriesData

        public class CategoriesData
        {
            [JsonProperty("label")]
            public virtual string Label { get; set; }

            [JsonProperty("schema")]
            public virtual string Schema { get; set; }

            [JsonProperty("term")]
            public virtual string Term { get; set; }
        }

        #endregion

        // TODO: Add support for additionalProperties on schemas
        //       which have normal properties defined.

        #region Nested type: LinksData

        public class LinksData
        {
            [JsonProperty("liked")]
            public virtual IList<LikedData> Liked { get; set; }

            #region Nested type: LikedData

            public class LikedData
            {
                [JsonProperty("count")]
                public virtual long Count { get; set; }

                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }
            }

            #endregion
        }

        #endregion

        #region Nested type: ObjectData

        public class ObjectData
        {
            [JsonProperty("actor")]
            public virtual ActorData Actor { get; set; }

            [JsonProperty("attachments")]
            public virtual IList<AttachmentsData> Attachments { get; set; }

            [JsonProperty("comments")]
            public virtual IList<Comment> Comments { get; set; }

            [JsonProperty("content")]
            public virtual string Content { get; set; }

            [JsonProperty("detectedlLang")]
            public virtual string DetectedlLang { get; set; }

            [JsonProperty("id")]
            public virtual string Id { get; set; }

            [JsonProperty("liked")]
            public virtual IList<Person> Liked { get; set; }

            [JsonProperty("links")]
            public virtual LinksData Links { get; set; }

            [JsonProperty("originalContent")]
            public virtual string OriginalContent { get; set; }

            [JsonProperty("shareOriginal")]
            public virtual Activity ShareOriginal { get; set; }

            [JsonProperty("targetLang")]
            public virtual string TargetLang { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("untranslatedContent")]
            public virtual string UntranslatedContent { get; set; }

            #region Nested type: ActorData

            public class ActorData
            {
                [JsonProperty("id")]
                public virtual string Id { get; set; }

                [JsonProperty("name")]
                public virtual string Name { get; set; }

                [JsonProperty("profileUrl")]
                public virtual string ProfileUrl { get; set; }

                [JsonProperty("thumbnailUrl")]
                public virtual string ThumbnailUrl { get; set; }
            }

            #endregion

            #region Nested type: AttachmentsData

            public class AttachmentsData
            {
                [JsonProperty("content")]
                public virtual string Content { get; set; }

                [JsonProperty("id")]
                public virtual string Id { get; set; }

                [JsonProperty("links")]
                public virtual LinksData Links { get; set; }

                [JsonProperty("title")]
                public virtual string Title { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }

                #region Nested type: LinksData

                public class LinksData : Dictionary<string, IList<LinksData.LinksDataSchema>>
                {
                    #region Nested type: LinksDataSchema

                    public class LinksDataSchema
                    {
                        [JsonProperty("count")]
                        public virtual string Count { get; set; }

                        [JsonProperty("height")]
                        public virtual string Height { get; set; }

                        [JsonProperty("href")]
                        public virtual string Href { get; set; }

                        [JsonProperty("title")]
                        public virtual string Title { get; set; }

                        [JsonProperty("type")]
                        public virtual string Type { get; set; }

                        [JsonProperty("updated")]
                        public virtual string Updated { get; set; }

                        [JsonProperty("width")]
                        public virtual string Width { get; set; }
                    }

                    #endregion
                }

                #endregion
            }

            #endregion

            #region Nested type: LinksData

            public class LinksData : Dictionary<string, IList<LinksData.LinksDataSchema>>
            {
                #region Nested type: LinksDataSchema

                public class LinksDataSchema
                {
                    [JsonProperty("href")]
                    public virtual string Href { get; set; }

                    [JsonProperty("type")]
                    public virtual string Type { get; set; }
                }

                #endregion
            }

            #endregion
        }

        #endregion

        #region Nested type: SourceData

        public class SourceData
        {
            [JsonProperty("title")]
            public virtual string Title { get; set; }
        }

        #endregion

        #region Nested type: VisibilityData

        public class VisibilityData
        {
            [JsonProperty("entries")]
            public virtual IList<EntriesData> Entries { get; set; }

            #region Nested type: EntriesData

            public class EntriesData
            {
                [JsonProperty("id")]
                public virtual string Id { get; set; }

                [JsonProperty("title")]
                public virtual string Title { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class ActivityFeed : IResponse
    {
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("items")]
        public virtual IList<Activity> Items { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: LinksData

        public class LinksData : Dictionary<string, IList<LinksData.LinksDataSchema>>
        {
            #region Nested type: LinksDataSchema

            public class LinksDataSchema
            {
                [JsonProperty("count")]
                public virtual string Count { get; set; }

                [JsonProperty("height")]
                public virtual string Height { get; set; }

                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("title")]
                public virtual string Title { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }

                [JsonProperty("updated")]
                public virtual string Updated { get; set; }

                [JsonProperty("width")]
                public virtual string Width { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Album : IResponse
    {
        [JsonProperty("created")]
        public virtual string Created { get; set; }

        [JsonProperty("description")]
        public virtual string Description { get; set; }

        [JsonProperty("firstPhotoId")]
        public virtual string FirstPhotoId { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("lastModified")]
        public virtual string LastModified { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("owner")]
        public virtual OwnerData Owner { get; set; }

        [JsonProperty("tags")]
        public virtual IList<String> Tags { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("version")]
        public virtual string Version { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: LinksData

        public class LinksData
        {
            [JsonProperty("alternate")]
            public virtual Link Alternate { get; set; }

            [JsonProperty("enclosure")]
            public virtual Link Enclosure { get; set; }
        }

        #endregion

        #region Nested type: OwnerData

        public class OwnerData
        {
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("profileUrl")]
            public virtual string ProfileUrl { get; set; }

            [JsonProperty("thumbnailUrl")]
            public virtual string ThumbnailUrl { get; set; }
        }

        #endregion
    }

    public class AlbumLite : IResponse
    {
        [JsonProperty("collection")]
        public virtual CollectionData Collection { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: CollectionData

        public class CollectionData
        {
            [JsonProperty("album")]
            public virtual string Album { get; set; }

            [JsonProperty("albumId")]
            public virtual string AlbumId { get; set; }

            [JsonProperty("photo")]
            public virtual PhotoData Photo { get; set; }

            #region Nested type: PhotoData

            public class PhotoData
            {
                [JsonProperty("photoUrl")]
                public virtual string PhotoUrl { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class AlbumsFeed : IResponse
    {
        [JsonProperty("items")]
        public virtual IList<Album> Items { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class ChiliPhotosResourceJson : IResponse
    {
        [JsonProperty("album")]
        public virtual AlbumData Album { get; set; }

        [JsonProperty("created")]
        public virtual string Created { get; set; }

        [JsonProperty("description")]
        public virtual string Description { get; set; }

        [JsonProperty("fileSize")]
        public virtual string FileSize { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("lastModified")]
        public virtual string LastModified { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("owner")]
        public virtual OwnerData Owner { get; set; }

        [JsonProperty("timestamp")]
        public virtual double Timestamp { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("version")]
        public virtual string Version { get; set; }

        [JsonProperty("video")]
        public virtual Video Video { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: AlbumData

        public class AlbumData
        {
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            [JsonProperty("page_link")]
            public virtual Link Page_link { get; set; }
        }

        #endregion

        // TODO: Add support for additionalProperties on schemas
        //       which have normal properties defined.

        #region Nested type: LinksData

        public class LinksData
        {
            [JsonProperty("alternate")]
            public virtual IList<Link> Alternate { get; set; }
        }

        #endregion

        #region Nested type: OwnerData

        public class OwnerData
        {
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("profileUrl")]
            public virtual string ProfileUrl { get; set; }

            [JsonProperty("thumbnailUrl")]
            public virtual string ThumbnailUrl { get; set; }
        }

        #endregion
    }

    public class Comment : IResponse
    {
        [JsonProperty("actor")]
        public virtual ActorData Actor { get; set; }

        [JsonProperty("content")]
        public virtual string Content { get; set; }

        [JsonProperty("detectedLang")]
        public virtual string DetectedLang { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("originalContent")]
        public virtual string OriginalContent { get; set; }

        [JsonProperty("placeholder")]
        public virtual string Placeholder { get; set; }

        [JsonProperty("published")]
        public virtual string Published { get; set; }

        [JsonProperty("targetLang")]
        public virtual string TargetLang { get; set; }

        [JsonProperty("untranslatedContent")]
        public virtual string UntranslatedContent { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: ActorData

        public class ActorData
        {
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("profileUrl")]
            public virtual string ProfileUrl { get; set; }

            [JsonProperty("thumbnailUrl")]
            public virtual string ThumbnailUrl { get; set; }
        }

        #endregion

        // TODO: Add support for additionalProperties on schemas
        //       which have normal properties defined.

        #region Nested type: LinksData

        public class LinksData
        {
            [JsonProperty("inReplyTo")]
            public virtual IList<InReplyToData> InReplyTo { get; set; }

            #region Nested type: InReplyToData

            public class InReplyToData
            {
                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("ref")]
                public virtual string Ref { get; set; }

                [JsonProperty("source")]
                public virtual string Source { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class CommentFeed : IResponse
    {
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("items")]
        public virtual IList<Comment> Items { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: LinksData

        public class LinksData : Dictionary<string, IList<LinksData.LinksDataSchema>>
        {
            #region Nested type: LinksDataSchema

            public class LinksDataSchema
            {
                [JsonProperty("count")]
                public virtual string Count { get; set; }

                [JsonProperty("height")]
                public virtual string Height { get; set; }

                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("title")]
                public virtual string Title { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }

                [JsonProperty("updated")]
                public virtual string Updated { get; set; }

                [JsonProperty("width")]
                public virtual string Width { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class CountFeed : IResponse
    {
        [JsonProperty("counts")]
        public virtual CountsData Counts { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: CountsData

        public class CountsData : Dictionary<string, IList<CountsData.CountsDataSchema>>
        {
            #region Nested type: CountsDataSchema

            public class CountsDataSchema
            {
                [JsonProperty("count")]
                public virtual string Count { get; set; }

                [JsonProperty("timestamp")]
                public virtual string Timestamp { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Group : IResponse
    {
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("memberCount")]
        public virtual string MemberCount { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: LinksData

        public class LinksData
        {
            [JsonProperty("self")]
            public virtual IList<SelfData> Self { get; set; }

            #region Nested type: SelfData

            public class SelfData
            {
                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class GroupFeed : IResponse
    {
        [JsonProperty("items")]
        public virtual IList<Group> Items { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: LinksData

        public class LinksData : Dictionary<string, IList<LinksData.LinksDataSchema>>
        {
            #region Nested type: LinksDataSchema

            public class LinksDataSchema
            {
                [JsonProperty("count")]
                public virtual string Count { get; set; }

                [JsonProperty("height")]
                public virtual string Height { get; set; }

                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("title")]
                public virtual string Title { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }

                [JsonProperty("updated")]
                public virtual string Updated { get; set; }

                [JsonProperty("width")]
                public virtual string Width { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Link
    {
        [JsonProperty("count")]
        public virtual long Count { get; set; }

        [JsonProperty("height")]
        public virtual long Height { get; set; }

        [JsonProperty("href")]
        public virtual string Href { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("type")]
        public virtual string Type { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        [JsonProperty("width")]
        public virtual long Width { get; set; }
    }

    public class PeopleFeed : IResponse
    {
        [JsonProperty("entry")]
        public virtual IList<Person> Entry { get; set; }

        [JsonProperty("itemsPerPage")]
        public virtual string ItemsPerPage { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("startIndex")]
        public virtual string StartIndex { get; set; }

        [JsonProperty("totalResults")]
        public virtual string TotalResults { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class Person : IResponse
    {
        [JsonProperty("aboutMe")]
        public virtual string AboutMe { get; set; }

        [JsonProperty("accounts")]
        public virtual IList<AccountsData> Accounts { get; set; }

        [JsonProperty("activities")]
        public virtual IList<String> Activities { get; set; }

        [JsonProperty("addresses")]
        public virtual IList<AddressesData> Addresses { get; set; }

        [JsonProperty("anniversary")]
        public virtual string Anniversary { get; set; }

        [JsonProperty("birthday")]
        public virtual string Birthday { get; set; }

        [JsonProperty("bodyType")]
        public virtual string BodyType { get; set; }

        [JsonProperty("books")]
        public virtual IList<String> Books { get; set; }

        [JsonProperty("cars")]
        public virtual IList<String> Cars { get; set; }

        [JsonProperty("children")]
        public virtual IList<String> Children { get; set; }

        [JsonProperty("connected")]
        public virtual string Connected { get; set; }

        [JsonProperty("currentLocation")]
        public virtual string CurrentLocation { get; set; }

        [JsonProperty("displayName")]
        public virtual string DisplayName { get; set; }

        [JsonProperty("drinker")]
        public virtual string Drinker { get; set; }

        [JsonProperty("emails")]
        public virtual IList<EmailsData> Emails { get; set; }

        [JsonProperty("ethnicity")]
        public virtual string Ethnicity { get; set; }

        [JsonProperty("fashion")]
        public virtual string Fashion { get; set; }

        [JsonProperty("food")]
        public virtual IList<String> Food { get; set; }

        [JsonProperty("gender")]
        public virtual string Gender { get; set; }

        [JsonProperty("happiestWhen")]
        public virtual string HappiestWhen { get; set; }

        [JsonProperty("hasApp")]
        public virtual string HasApp { get; set; }

        [JsonProperty("heroes")]
        public virtual IList<String> Heroes { get; set; }

        [JsonProperty("humor")]
        public virtual string Humor { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("ims")]
        public virtual IList<ImsData> Ims { get; set; }

        [JsonProperty("interests")]
        public virtual IList<String> Interests { get; set; }

        [JsonProperty("jobInterests")]
        public virtual IList<String> JobInterests { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("languages")]
        public virtual IList<String> Languages { get; set; }

        [JsonProperty("languagesSpoken")]
        public virtual IList<String> LanguagesSpoken { get; set; }

        [JsonProperty("livingArrangement")]
        public virtual string LivingArrangement { get; set; }

        [JsonProperty("lookingFor")]
        public virtual string LookingFor { get; set; }

        [JsonProperty("movies")]
        public virtual IList<String> Movies { get; set; }

        [JsonProperty("music")]
        public virtual IList<String> Music { get; set; }

        [JsonProperty("name")]
        public virtual NameData Name { get; set; }

        [JsonProperty("nickname")]
        public virtual string Nickname { get; set; }

        [JsonProperty("note")]
        public virtual string Note { get; set; }

        [JsonProperty("organizations")]
        public virtual IList<OrganizationsData> Organizations { get; set; }

        [JsonProperty("pets")]
        public virtual IList<String> Pets { get; set; }

        [JsonProperty("phoneNumbers")]
        public virtual IList<PhoneNumbersData> PhoneNumbers { get; set; }

        [JsonProperty("photos")]
        public virtual IList<PhotosData> Photos { get; set; }

        [JsonProperty("politicalViews")]
        public virtual IList<String> PoliticalViews { get; set; }

        [JsonProperty("preferredUsername")]
        public virtual string PreferredUsername { get; set; }

        [JsonProperty("profileSong")]
        public virtual string ProfileSong { get; set; }

        [JsonProperty("profileUrl")]
        public virtual string ProfileUrl { get; set; }

        [JsonProperty("profileVideo")]
        public virtual string ProfileVideo { get; set; }

        [JsonProperty("published")]
        public virtual string Published { get; set; }

        [JsonProperty("quotes")]
        public virtual IList<String> Quotes { get; set; }

        [JsonProperty("relationshipStatus")]
        public virtual string RelationshipStatus { get; set; }

        [JsonProperty("relationships")]
        public virtual IList<String> Relationships { get; set; }

        [JsonProperty("religion")]
        public virtual string Religion { get; set; }

        [JsonProperty("romance")]
        public virtual string Romance { get; set; }

        [JsonProperty("scaredOf")]
        public virtual string ScaredOf { get; set; }

        [JsonProperty("sexualOrientation")]
        public virtual string SexualOrientation { get; set; }

        [JsonProperty("smoker")]
        public virtual string Smoker { get; set; }

        [JsonProperty("sports")]
        public virtual IList<String> Sports { get; set; }

        [JsonProperty("status")]
        public virtual string Status { get; set; }

        [JsonProperty("tags")]
        public virtual IList<String> Tags { get; set; }

        [JsonProperty("thumbnailUrl")]
        public virtual string ThumbnailUrl { get; set; }

        [JsonProperty("turnOffs")]
        public virtual IList<String> TurnOffs { get; set; }

        [JsonProperty("turnOns")]
        public virtual IList<String> TurnOns { get; set; }

        [JsonProperty("tvShows")]
        public virtual IList<String> TvShows { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        [JsonProperty("urls")]
        public virtual IList<UrlsData> Urls { get; set; }

        [JsonProperty("utcOffset")]
        public virtual string UtcOffset { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: AccountsData

        public class AccountsData
        {
            [JsonProperty("domain")]
            public virtual string Domain { get; set; }

            [JsonProperty("userid")]
            public virtual string Userid { get; set; }

            [JsonProperty("username")]
            public virtual string Username { get; set; }
        }

        #endregion

        #region Nested type: AddressesData

        public class AddressesData
        {
            [JsonProperty("country")]
            public virtual string Country { get; set; }

            [JsonProperty("formatted")]
            public virtual string Formatted { get; set; }

            [JsonProperty("locality")]
            public virtual string Locality { get; set; }

            [JsonProperty("postalCode")]
            public virtual string PostalCode { get; set; }

            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("region")]
            public virtual string Region { get; set; }

            [JsonProperty("streetAddress")]
            public virtual string StreetAddress { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }
        }

        #endregion

        #region Nested type: EmailsData

        public class EmailsData
        {
            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("value")]
            public virtual string Value { get; set; }
        }

        #endregion

        #region Nested type: ImsData

        public class ImsData
        {
            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("value")]
            public virtual string Value { get; set; }
        }

        #endregion

        #region Nested type: NameData

        public class NameData
        {
            [JsonProperty("familyName")]
            public virtual string FamilyName { get; set; }

            [JsonProperty("formatted")]
            public virtual string Formatted { get; set; }

            [JsonProperty("givenName")]
            public virtual string GivenName { get; set; }

            [JsonProperty("honorificPrefix")]
            public virtual string HonorificPrefix { get; set; }

            [JsonProperty("honorificSuffix")]
            public virtual string HonorificSuffix { get; set; }

            [JsonProperty("middleName")]
            public virtual string MiddleName { get; set; }
        }

        #endregion

        #region Nested type: OrganizationsData

        public class OrganizationsData
        {
            [JsonProperty("department")]
            public virtual string Department { get; set; }

            [JsonProperty("description")]
            public virtual string Description { get; set; }

            [JsonProperty("endDate")]
            public virtual string EndDate { get; set; }

            [JsonProperty("location")]
            public virtual string Location { get; set; }

            [JsonProperty("name")]
            public virtual string Name { get; set; }

            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("startDate")]
            public virtual string StartDate { get; set; }

            [JsonProperty("title")]
            public virtual string Title { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }
        }

        #endregion

        #region Nested type: PhoneNumbersData

        public class PhoneNumbersData
        {
            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("value")]
            public virtual string Value { get; set; }
        }

        #endregion

        #region Nested type: PhotosData

        public class PhotosData
        {
            [JsonProperty("height")]
            public virtual string Height { get; set; }

            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("value")]
            public virtual string Value { get; set; }

            [JsonProperty("width")]
            public virtual string Width { get; set; }
        }

        #endregion

        #region Nested type: UrlsData

        public class UrlsData
        {
            [JsonProperty("primary")]
            public virtual string Primary { get; set; }

            [JsonProperty("type")]
            public virtual string Type { get; set; }

            [JsonProperty("value")]
            public virtual string Value { get; set; }
        }

        #endregion
    }

    public class PhotosFeed : IResponse
    {
        [JsonProperty("items")]
        public virtual IList<ChiliPhotosResourceJson> Items { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class Related
    {
        [JsonProperty("href")]
        public virtual string Href { get; set; }

        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("summary")]
        public virtual string Summary { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }
    }

    public class RelatedFeed : IResponse
    {
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("items")]
        public virtual IList<Related> Items { get; set; }

        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        [JsonProperty("links")]
        public virtual LinksData Links { get; set; }

        [JsonProperty("title")]
        public virtual string Title { get; set; }

        [JsonProperty("updated")]
        public virtual string Updated { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: LinksData

        public class LinksData : Dictionary<string, IList<LinksData.LinksDataSchema>>
        {
            #region Nested type: LinksDataSchema

            public class LinksDataSchema
            {
                [JsonProperty("count")]
                public virtual string Count { get; set; }

                [JsonProperty("height")]
                public virtual string Height { get; set; }

                [JsonProperty("href")]
                public virtual string Href { get; set; }

                [JsonProperty("title")]
                public virtual string Title { get; set; }

                [JsonProperty("type")]
                public virtual string Type { get; set; }

                [JsonProperty("updated")]
                public virtual string Updated { get; set; }

                [JsonProperty("width")]
                public virtual string Width { get; set; }
            }

            #endregion
        }

        #endregion
    }

    public class Video
    {
        [JsonProperty("duration")]
        public virtual string Duration { get; set; }

        [JsonProperty("size")]
        public virtual string Size { get; set; }

        [JsonProperty("status")]
        public virtual string Status { get; set; }

        [JsonProperty("streams")]
        public virtual IList<Link> Streams { get; set; }
    }
}

namespace Google.Apis
{
    public class BuzzService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        #region Scopes enum

        /// <summary>A list of all OAuth2.0 scopes. Each of these scopes relates to a permission or group of permissions that different methods of this API may need.</summary>
        public enum Scopes
        {
            /// <summary>Manage your Buzz activity and address book</summary>
            [StringValue("https://www.googleapis.com/auth/buzz")] Buzz,

            /// <summary>View your Buzz activity and address book</summary>
            [StringValue("https://www.googleapis.com/auth/buzz.readonly")] BuzzReadonly,

            /// <summary>Manage your photos and videos</summary>
            [StringValue("https://www.googleapis.com/auth/picasa")] Picasa,
        }

        #endregion

        private const string Version = "v1";

        private const string Name = "buzz";

        private const string BaseUri = "https://www.googleapis.com/buzz/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;

        private readonly ActivitiesResource activities;
        private readonly IAuthenticator authenticator;

        private readonly CommentsResource comments;
        private readonly IService genericService;

        private readonly GroupsResource groups;

        private readonly PeopleResource people;

        private readonly PhotoAlbumsResource photoAlbums;

        private readonly PhotosResource photos;

        private readonly RelatedResource related;

        public BuzzService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            activities = new ActivitiesResource(this);
            comments = new CommentsResource(this);
            groups = new GroupsResource(this);
            people = new PeopleResource(this);
            photoAlbums = new PhotoAlbumsResource(this);
            photos = new PhotosResource(this);
            related = new RelatedResource(this);
        }

        public BuzzService()
            : this(
                new DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual ActivitiesResource Activities
        {
            get { return activities; }
        }

        public virtual CommentsResource Comments
        {
            get { return comments; }
        }

        public virtual GroupsResource Groups
        {
            get { return groups; }
        }

        public virtual PeopleResource People
        {
            get { return people; }
        }

        public virtual PhotoAlbumsResource PhotoAlbums
        {
            get { return photoAlbums; }
        }

        public virtual PhotosResource Photos
        {
            get { return photos; }
        }

        public virtual RelatedResource Related
        {
            get { return related; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class ActivitiesResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        #region Scope enum

        /// <summary>The collection to which the activity belongs.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Scope
        {
            /// <summary>Activities liked by the user.</summary>
            [StringValue("@liked")] Liked,

            /// <summary>Activities muted by the user.</summary>
            [StringValue("@muted")] Muted,

            /// <summary>Activities posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        #region ScopeEnum enum

        /// <summary>The collection of activities to list.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum ScopeEnum
        {
            /// <summary>Limit to activities commented on by the user.</summary>
            [StringValue("@comments")] Comments,

            /// <summary>Limit to activities to be consumed by the user.</summary>
            [StringValue("@consumption")] Consumption,

            /// <summary>Limit to activities liked by the user.</summary>
            [StringValue("@liked")] Liked,

            /// <summary>Limit to public activities posted by the user.</summary>
            [StringValue("@public")] Public,

            /// <summary>Limit to activities posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        #region ScopeMember enum

        /// <summary>The collection to which the activity belongs.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum ScopeMember
        {
            /// <summary>Activities reported by the user.</summary>
            [StringValue("@abuse")] Abuse,

            /// <summary>Activities liked by the user.</summary>
            [StringValue("@liked")] Liked,

            /// <summary>Activities muted by the user.</summary>
            [StringValue("@muted")] Muted,

            /// <summary>Activities posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        private const string Resource = "activities";

        private readonly ILog logger = LogManager.GetLogger(typeof(ActivitiesResource));
        private readonly ISchemaAwareRequestExecutor service;

        public ActivitiesResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Get a count of link shares</summary>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="url">Optional - URLs for which to get share counts.</param>
        public virtual Stream CountAsStream([Optional] string hl, [Optional] Repeatable<string> url)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["hl"] = hl;
            parameters["url"] = url;
            logger.Debug("Executing activities.count");
            Stream ret = service.ExecuteRequest(Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }

        /// <summary>Delete an activity</summary>
        /// <param name="postId">Required - ID of the activity to delete.</param>
        /// <param name="scope">Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to delete.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAsStream(string postId,
                                             Scope scope,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }

        /// <summary>Search for people by topic</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual Stream ExtractPeopleFromSearchAsStream([Optional] Alt? alt,
                                                              [Optional] string bbox,
                                                              [Optional] string c,
                                                              [Optional] string hl,
                                                              [Optional] string lat,
                                                              [Optional] string lon,
                                                              [Optional] Int64? maxResults,
                                                              [Optional] string pid,
                                                              [Optional] string q,
                                                              [Optional] string radius)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            Stream ret = service.ExecuteRequest(Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }

        /// <summary>Get an activity</summary>
        /// <param name="postId">Required - ID of the post to get.</param>
        /// <param name="userId">Required - ID of the user whose post to get.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Stream GetAsStream(string postId,
                                          string userId,
                                          [Optional] Alt? alt,
                                          [Optional] string hl,
                                          [Optional] Int64? maxComments,
                                          [Optional] Int64? maxLiked,
                                          [Optional] Boolean? truncateAtom)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }

        /// <summary>Create a new activity</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="preview">Optional - If true, only preview the action.</param>
        public virtual Stream InsertAsStream(string body,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl,
                                             [Optional] Boolean? preview)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["preview"] = preview;
            logger.Debug("Executing activities.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }

        /// <summary>List activities</summary>
        /// <param name="scope">Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Stream ListAsStream(ScopeEnum scope,
                                           string userId,
                                           [Optional] Alt? alt,
                                           [Optional] string c,
                                           [Optional] string hl,
                                           [Optional] Int64? maxComments,
                                           [Optional] Int64? maxLiked,
                                           [Optional] Int64? maxResults,
                                           [Optional] Boolean? truncateAtom)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["max-results"] = maxResults;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }

        /// <summary>Update an activity. This method supports patch semantics.</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream PatchAsStream(string body,
                                            string postId,
                                            ScopeMember scope,
                                            string userId,
                                            [Optional] string abuseType,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.patch");
            Stream ret = service.ExecuteRequest(Resource, "patch", body, parameters);
            logger.Debug("Done Executing activities.patch");
            return ret;
        }

        /// <summary>Search for activities</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Stream SearchAsStream([Optional] Alt? alt,
                                             [Optional] string bbox,
                                             [Optional] string c,
                                             [Optional] string hl,
                                             [Optional] string lat,
                                             [Optional] string lon,
                                             [Optional] Int64? maxResults,
                                             [Optional] string pid,
                                             [Optional] string q,
                                             [Optional] string radius,
                                             [Optional] Boolean? truncateAtom)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.search");
            Stream ret = service.ExecuteRequest(Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }

        /// <summary>Get real-time activity tracking information</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual Stream TrackAsStream([Optional] Alt? alt,
                                            [Optional] string bbox,
                                            [Optional] string c,
                                            [Optional] string hl,
                                            [Optional] string lat,
                                            [Optional] string lon,
                                            [Optional] Int64? maxResults,
                                            [Optional] string pid,
                                            [Optional] string q,
                                            [Optional] string radius)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.track");
            Stream ret = service.ExecuteRequest(Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }

        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream UpdateAsStream(string body,
                                             string postId,
                                             ScopeMember scope,
                                             string userId,
                                             [Optional] string abuseType,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.update");
            Stream ret = service.ExecuteRequest(Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }

        /// <summary>Get a count of link shares</summary>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="url">Optional - URLs for which to get share counts.</param>
        public virtual CountFeed CountAndExecute([Optional] string hl, [Optional] Repeatable<string> url)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["hl"] = hl;
            parameters["url"] = url;
            logger.Debug("Executing activities.count");
            CountFeed ret =
                service.JsonToObject<CountFeed>(service.ExecuteRequest(Resource, "count", body, parameters));
            logger.Debug("Done Executing activities.count");
            return ret;
        }

        /// <summary>Delete an activity</summary>
        /// <param name="postId">Required - ID of the activity to delete.</param>
        /// <param name="scope">Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to delete.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAndExecute(string postId,
                                               Scope scope,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }

        /// <summary>Search for people by topic</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual PeopleFeed ExtractPeopleFromSearchAndExecute([Optional] Alt? alt,
                                                                    [Optional] string bbox,
                                                                    [Optional] string c,
                                                                    [Optional] string hl,
                                                                    [Optional] string lat,
                                                                    [Optional] string lon,
                                                                    [Optional] Int64? maxResults,
                                                                    [Optional] string pid,
                                                                    [Optional] string q,
                                                                    [Optional] string radius)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            PeopleFeed ret =
                service.JsonToObject<PeopleFeed>(
                    service.ExecuteRequest(Resource, "extractPeopleFromSearch", body, parameters));
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }

        /// <summary>Get an activity</summary>
        /// <param name="postId">Required - ID of the post to get.</param>
        /// <param name="userId">Required - ID of the user whose post to get.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual Activity GetAndExecute(string postId,
                                              string userId,
                                              [Optional] Alt? alt,
                                              [Optional] string hl,
                                              [Optional] Int64? maxComments,
                                              [Optional] Int64? maxLiked,
                                              [Optional] Boolean? truncateAtom)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.get");
            Activity ret = service.JsonToObject<Activity>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing activities.get");
            return ret;
        }

        /// <summary>Create a new activity</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="preview">Optional - If true, only preview the action.</param>
        public virtual Activity InsertAndExecute(Activity body,
                                                 string userId,
                                                 [Optional] Alt? alt,
                                                 [Optional] string hl,
                                                 [Optional] Boolean? preview)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["preview"] = preview;
            logger.Debug("Executing activities.insert");
            Activity ret =
                service.JsonToObject<Activity>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing activities.insert");
            return ret;
        }

        /// <summary>List activities</summary>
        /// <param name="scope">Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual ActivityFeed ListAndExecute(ScopeEnum scope,
                                                   string userId,
                                                   [Optional] Alt? alt,
                                                   [Optional] string c,
                                                   [Optional] string hl,
                                                   [Optional] Int64? maxComments,
                                                   [Optional] Int64? maxLiked,
                                                   [Optional] Int64? maxResults,
                                                   [Optional] Boolean? truncateAtom)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxComments;
            parameters["max-liked"] = maxLiked;
            parameters["max-results"] = maxResults;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.list");
            ActivityFeed ret =
                service.JsonToObject<ActivityFeed>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing activities.list");
            return ret;
        }

        /// <summary>Update an activity. This method supports patch semantics.</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Activity PatchAndExecute(Activity body,
                                                string postId,
                                                ScopeMember scope,
                                                string userId,
                                                [Optional] string abuseType,
                                                [Optional] Alt? alt,
                                                [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.patch");
            Activity ret =
                service.JsonToObject<Activity>(
                    service.ExecuteRequest(Resource, "patch", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing activities.patch");
            return ret;
        }

        /// <summary>Search for activities</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual ActivityFeed SearchAndExecute([Optional] Alt? alt,
                                                     [Optional] string bbox,
                                                     [Optional] string c,
                                                     [Optional] string hl,
                                                     [Optional] string lat,
                                                     [Optional] string lon,
                                                     [Optional] Int64? maxResults,
                                                     [Optional] string pid,
                                                     [Optional] string q,
                                                     [Optional] string radius,
                                                     [Optional] Boolean? truncateAtom)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.search");
            ActivityFeed ret =
                service.JsonToObject<ActivityFeed>(service.ExecuteRequest(Resource, "search", body, parameters));
            logger.Debug("Done Executing activities.search");
            return ret;
        }

        /// <summary>Get real-time activity tracking information</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual ActivityFeed TrackAndExecute([Optional] Alt? alt,
                                                    [Optional] string bbox,
                                                    [Optional] string c,
                                                    [Optional] string hl,
                                                    [Optional] string lat,
                                                    [Optional] string lon,
                                                    [Optional] Int64? maxResults,
                                                    [Optional] string pid,
                                                    [Optional] string q,
                                                    [Optional] string radius)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxResults;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.track");
            ActivityFeed ret =
                service.JsonToObject<ActivityFeed>(service.ExecuteRequest(Resource, "track", body, parameters));
            logger.Debug("Done Executing activities.track");
            return ret;
        }

        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Activity UpdateAndExecute(Activity body,
                                                 string postId,
                                                 ScopeMember scope,
                                                 string userId,
                                                 [Optional] string abuseType,
                                                 [Optional] Alt? alt,
                                                 [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing activities.update");
            Activity ret =
                service.JsonToObject<Activity>(
                    service.ExecuteRequest(Resource, "update", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing activities.update");
            return ret;
        }

        /// <summary>Get a count of link shares</summary>
        public virtual CountRequest Count()
        {
            return new CountRequest(service);
        }

        /// <summary>Get a count of link shares</summary>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="url">Optional - URLs for which to get share counts.</param>
        public virtual CountRequest Count([Optional] string hl, [Optional] Repeatable<string> url)
        {
            return new CountRequest(service, hl, url);
        }

        /// <summary>Delete an activity</summary>
        /// <param name="postId">Required - ID of the activity to delete.</param>
        /// <param name="scope">Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to delete.</param>
        public virtual DeleteRequest Delete(string postId, Scope scope, string userId)
        {
            return new DeleteRequest(service, postId, scope, userId);
        }

        /// <summary>Delete an activity</summary>
        /// <param name="postId">Required - ID of the activity to delete.</param>
        /// <param name="scope">Required - Must be one of the following values [@liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to delete.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual DeleteRequest Delete(string postId,
                                            Scope scope,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new DeleteRequest(service, postId, scope, userId, alt, hl);
        }

        /// <summary>Search for people by topic</summary>
        public virtual ExtractPeopleFromSearchRequest ExtractPeopleFromSearch()
        {
            return new ExtractPeopleFromSearchRequest(service);
        }

        /// <summary>Search for people by topic</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual ExtractPeopleFromSearchRequest ExtractPeopleFromSearch([Optional] Alt? alt,
                                                                              [Optional] string bbox,
                                                                              [Optional] string c,
                                                                              [Optional] string hl,
                                                                              [Optional] string lat,
                                                                              [Optional] string lon,
                                                                              [Optional] Int64? maxResults,
                                                                              [Optional] string pid,
                                                                              [Optional] string q,
                                                                              [Optional] string radius)
        {
            return new ExtractPeopleFromSearchRequest(service, alt, bbox, c, hl, lat, lon, maxResults, pid, q, radius);
        }

        /// <summary>Get an activity</summary>
        /// <param name="postId">Required - ID of the post to get.</param>
        /// <param name="userId">Required - ID of the user whose post to get.</param>
        public virtual GetRequest Get(string postId, string userId)
        {
            return new GetRequest(service, postId, userId);
        }

        /// <summary>Get an activity</summary>
        /// <param name="postId">Required - ID of the post to get.</param>
        /// <param name="userId">Required - ID of the user whose post to get.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual GetRequest Get(string postId,
                                      string userId,
                                      [Optional] Alt? alt,
                                      [Optional] string hl,
                                      [Optional] Int64? maxComments,
                                      [Optional] Int64? maxLiked,
                                      [Optional] Boolean? truncateAtom)
        {
            return new GetRequest(service, postId, userId, alt, hl, maxComments, maxLiked, truncateAtom);
        }

        /// <summary>Create a new activity</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual InsertRequest Insert(Activity body, string userId)
        {
            return new InsertRequest(service, body, userId);
        }

        /// <summary>Create a new activity</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="preview">Optional - If true, only preview the action.</param>
        public virtual InsertRequest Insert(Activity body,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl,
                                            [Optional] Boolean? preview)
        {
            return new InsertRequest(service, body, userId, alt, hl, preview);
        }

        /// <summary>List activities</summary>
        /// <param name="scope">Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListRequest List(ScopeEnum scope, string userId)
        {
            return new ListRequest(service, scope, userId);
        }

        /// <summary>List activities</summary>
        /// <param name="scope">Required - Must be one of the following values [@comments, @consumption, @liked, @public, @self] - The collection of activities to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxComments">max-comments - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of comments to include.</param>
        /// <param name="maxLiked">max-liked - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of likes to include.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual ListRequest List(ScopeEnum scope,
                                        string userId,
                                        [Optional] Alt? alt,
                                        [Optional] string c,
                                        [Optional] string hl,
                                        [Optional] Int64? maxComments,
                                        [Optional] Int64? maxLiked,
                                        [Optional] Int64? maxResults,
                                        [Optional] Boolean? truncateAtom)
        {
            return new ListRequest(
                service, scope, userId, alt, c, hl, maxComments, maxLiked, maxResults, truncateAtom);
        }

        /// <summary>Update an activity. This method supports patch semantics.</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        public virtual PatchRequest Patch(Activity body, string postId, ScopeMember scope, string userId)
        {
            return new PatchRequest(service, body, postId, scope, userId);
        }

        /// <summary>Update an activity. This method supports patch semantics.</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual PatchRequest Patch(Activity body,
                                          string postId,
                                          ScopeMember scope,
                                          string userId,
                                          [Optional] string abuseType,
                                          [Optional] Alt? alt,
                                          [Optional] string hl)
        {
            return new PatchRequest(service, body, postId, scope, userId, abuseType, alt, hl);
        }

        /// <summary>Search for activities</summary>
        public virtual SearchRequest Search()
        {
            return new SearchRequest(service);
        }

        /// <summary>Search for activities</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        /// <param name="truncateAtom">Optional - Truncate the value of the atom:content element.</param>
        public virtual SearchRequest Search([Optional] Alt? alt,
                                            [Optional] string bbox,
                                            [Optional] string c,
                                            [Optional] string hl,
                                            [Optional] string lat,
                                            [Optional] string lon,
                                            [Optional] Int64? maxResults,
                                            [Optional] string pid,
                                            [Optional] string q,
                                            [Optional] string radius,
                                            [Optional] Boolean? truncateAtom)
        {
            return new SearchRequest(service, alt, bbox, c, hl, lat, lon, maxResults, pid, q, radius, truncateAtom);
        }

        /// <summary>Get real-time activity tracking information</summary>
        public virtual TrackRequest Track()
        {
            return new TrackRequest(service);
        }

        /// <summary>Get real-time activity tracking information</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="bbox">Optional - Bounding box to use in a geographic location query.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="lat">Optional - Latitude to use in a geographic location query.</param>
        /// <param name="lon">Optional - Longitude to use in a geographic location query.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="pid">Optional - ID of a place to use in a geographic location query.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        /// <param name="radius">Optional - Radius to use in a geographic location query.</param>
        public virtual TrackRequest Track([Optional] Alt? alt,
                                          [Optional] string bbox,
                                          [Optional] string c,
                                          [Optional] string hl,
                                          [Optional] string lat,
                                          [Optional] string lon,
                                          [Optional] Int64? maxResults,
                                          [Optional] string pid,
                                          [Optional] string q,
                                          [Optional] string radius)
        {
            return new TrackRequest(service, alt, bbox, c, hl, lat, lon, maxResults, pid, q, radius);
        }

        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        public virtual UpdateRequest Update(Activity body, string postId, ScopeMember scope, string userId)
        {
            return new UpdateRequest(service, body, postId, scope, userId);
        }

        /// <summary>Update an activity</summary>
        /// <param name="postId">Required - ID of the activity to update.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @liked, @muted, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user whose post to update.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual UpdateRequest Update(Activity body,
                                            string postId,
                                            ScopeMember scope,
                                            string userId,
                                            [Optional] string abuseType,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new UpdateRequest(service, body, postId, scope, userId, abuseType, alt, hl);
        }

        #region Nested type: CountRequest

        public class CountRequest : ServiceRequest<CountFeed>
        {
            private string hl;

            private Repeatable<string> url;

            public CountRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public CountRequest(ISchemaAwareRequestExecutor service,
                                [Optional] string hl,
                                [Optional] Repeatable<string> url) : base(service)
            {
                this.hl = hl;
                this.url = url;
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>URLs for which to get share counts.</summary>
            [RequestParameter("url")]
            public virtual Repeatable<string> Url
            {
                get { return url; }
                set { url = value; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "count"; }
            }
        }

        #endregion

        #region Nested type: DeleteRequest

        public class DeleteRequest : ServiceRequest<string>
        {
            private readonly string postId;

            private readonly Scope scope;

            private readonly string userId;
            private Alt? alt;

            private string hl;

            public DeleteRequest(ISchemaAwareRequestExecutor service, string postId, Scope scope, string userId)
                : base(service)
            {
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public DeleteRequest(ISchemaAwareRequestExecutor service,
                                 string postId,
                                 Scope scope,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity to delete.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual Scope Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user whose post to delete.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "delete"; }
            }
        }

        #endregion

        #region Nested type: ExtractPeopleFromSearchRequest

        public class ExtractPeopleFromSearchRequest : ServiceRequest<PeopleFeed>
        {
            private Alt? alt;

            private string bbox;

            private string c;

            private string hl;

            private string lat;

            private string lon;

            private Int64? maxResults;

            private string pid;

            private string q;

            private string radius;

            public ExtractPeopleFromSearchRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public ExtractPeopleFromSearchRequest(ISchemaAwareRequestExecutor service,
                                                  [Optional] Alt? alt,
                                                  [Optional] string bbox,
                                                  [Optional] string c,
                                                  [Optional] string hl,
                                                  [Optional] string lat,
                                                  [Optional] string lon,
                                                  [Optional] Int64? maxResults,
                                                  [Optional] string pid,
                                                  [Optional] string q,
                                                  [Optional] string radius) : base(service)
            {
                this.alt = alt;
                this.bbox = bbox;
                this.c = c;
                this.hl = hl;
                this.lat = lat;
                this.lon = lon;
                this.maxResults = maxResults;
                this.pid = pid;
                this.q = q;
                this.radius = radius;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Bounding box to use in a geographic location query.</summary>
            [RequestParameter("bbox")]
            public virtual string Bbox
            {
                get { return bbox; }
                set { bbox = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Latitude to use in a geographic location query.</summary>
            [RequestParameter("lat")]
            public virtual string Lat
            {
                get { return lat; }
                set { lat = value; }
            }

            /// <summary>Longitude to use in a geographic location query.</summary>
            [RequestParameter("lon")]
            public virtual string Lon
            {
                get { return lon; }
                set { lon = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of a place to use in a geographic location query.</summary>
            [RequestParameter("pid")]
            public virtual string Pid
            {
                get { return pid; }
                set { pid = value; }
            }

            /// <summary>Full-text search query string.</summary>
            [RequestParameter("q")]
            public virtual string Q
            {
                get { return q; }
                set { q = value; }
            }

            /// <summary>Radius to use in a geographic location query.</summary>
            [RequestParameter("radius")]
            public virtual string Radius
            {
                get { return radius; }
                set { radius = value; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "extractPeopleFromSearch"; }
            }
        }

        #endregion

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Activity>
        {
            private readonly string postId;
            private readonly string userId;
            private Alt? alt;

            private string hl;

            private Int64? maxComments;

            private Int64? maxLiked;

            private Boolean? truncateAtom;

            public GetRequest(ISchemaAwareRequestExecutor service, string postId, string userId) : base(service)
            {
                this.postId = postId;
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string postId,
                              string userId,
                              [Optional] Alt? alt,
                              [Optional] string hl,
                              [Optional] Int64? maxComments,
                              [Optional] Int64? maxLiked,
                              [Optional] Boolean? truncateAtom) : base(service)
            {
                this.postId = postId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
                this.maxComments = maxComments;
                this.maxLiked = maxLiked;
                this.truncateAtom = truncateAtom;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of comments to include.</summary>
            [RequestParameter("max-comments")]
            public virtual Int64? MaxComments
            {
                get { return maxComments; }
                set { maxComments = value; }
            }

            /// <summary>Maximum number of likes to include.</summary>
            [RequestParameter("max-liked")]
            public virtual Int64? MaxLiked
            {
                get { return maxLiked; }
                set { maxLiked = value; }
            }

            /// <summary>ID of the post to get.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>Truncate the value of the atom:content element.</summary>
            [RequestParameter("truncateAtom")]
            public virtual Boolean? TruncateAtom
            {
                get { return truncateAtom; }
                set { truncateAtom = value; }
            }

            /// <summary>ID of the user whose post to get.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: InsertRequest

        public class InsertRequest : ServiceRequest<Activity>
        {
            private readonly string userId;
            private Alt? alt;

            private string hl;

            private Boolean? preview;

            public InsertRequest(ISchemaAwareRequestExecutor service, Activity body, string userId) : base(service)
            {
                Body = body;
                this.userId = userId;
            }

            public InsertRequest(ISchemaAwareRequestExecutor service,
                                 Activity body,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl,
                                 [Optional] Boolean? preview) : base(service)
            {
                Body = body;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
                this.preview = preview;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>If true, only preview the action.</summary>
            [RequestParameter("preview")]
            public virtual Boolean? Preview
            {
                get { return preview; }
                set { preview = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Activity Body { get; set; }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "insert"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<ActivityFeed>
        {
            private readonly ScopeEnum scope;
            private readonly string userId;
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxComments;

            private Int64? maxLiked;

            private Int64? maxResults;

            private Boolean? truncateAtom;

            public ListRequest(ISchemaAwareRequestExecutor service, ScopeEnum scope, string userId) : base(service)
            {
                this.scope = scope;
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               ScopeEnum scope,
                               string userId,
                               [Optional] Alt? alt,
                               [Optional] string c,
                               [Optional] string hl,
                               [Optional] Int64? maxComments,
                               [Optional] Int64? maxLiked,
                               [Optional] Int64? maxResults,
                               [Optional] Boolean? truncateAtom) : base(service)
            {
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxComments = maxComments;
                this.maxLiked = maxLiked;
                this.maxResults = maxResults;
                this.truncateAtom = truncateAtom;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of comments to include.</summary>
            [RequestParameter("max-comments")]
            public virtual Int64? MaxComments
            {
                get { return maxComments; }
                set { maxComments = value; }
            }

            /// <summary>Maximum number of likes to include.</summary>
            [RequestParameter("max-liked")]
            public virtual Int64? MaxLiked
            {
                get { return maxLiked; }
                set { maxLiked = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>The collection of activities to list.</summary>
            [RequestParameter("scope")]
            public virtual ScopeEnum Scope
            {
                get { return scope; }
            }

            /// <summary>Truncate the value of the atom:content element.</summary>
            [RequestParameter("truncateAtom")]
            public virtual Boolean? TruncateAtom
            {
                get { return truncateAtom; }
                set { truncateAtom = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion

        #region Nested type: PatchRequest

        public class PatchRequest : ServiceRequest<Activity>
        {
            private readonly string postId;

            private readonly ScopeMember scope;

            private readonly string userId;
            private string abuseType;

            private Alt? alt;

            private string hl;

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Activity body,
                                string postId,
                                ScopeMember scope,
                                string userId) : base(service)
            {
                Body = body;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Activity body,
                                string postId,
                                ScopeMember scope,
                                string userId,
                                [Optional] string abuseType,
                                [Optional] Alt? alt,
                                [Optional] string hl) : base(service)
            {
                Body = body;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.abuseType = abuseType;
                this.alt = alt;
                this.hl = hl;
            }

            [RequestParameter("abuseType")]
            public virtual string AbuseType
            {
                get { return abuseType; }
                set { abuseType = value; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity to update.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual ScopeMember Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user whose post to update.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Activity Body { get; set; }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "patch"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: SearchRequest

        public class SearchRequest : ServiceRequest<ActivityFeed>
        {
            private Alt? alt;

            private string bbox;

            private string c;

            private string hl;

            private string lat;

            private string lon;

            private Int64? maxResults;

            private string pid;

            private string q;

            private string radius;

            private Boolean? truncateAtom;

            public SearchRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public SearchRequest(ISchemaAwareRequestExecutor service,
                                 [Optional] Alt? alt,
                                 [Optional] string bbox,
                                 [Optional] string c,
                                 [Optional] string hl,
                                 [Optional] string lat,
                                 [Optional] string lon,
                                 [Optional] Int64? maxResults,
                                 [Optional] string pid,
                                 [Optional] string q,
                                 [Optional] string radius,
                                 [Optional] Boolean? truncateAtom) : base(service)
            {
                this.alt = alt;
                this.bbox = bbox;
                this.c = c;
                this.hl = hl;
                this.lat = lat;
                this.lon = lon;
                this.maxResults = maxResults;
                this.pid = pid;
                this.q = q;
                this.radius = radius;
                this.truncateAtom = truncateAtom;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Bounding box to use in a geographic location query.</summary>
            [RequestParameter("bbox")]
            public virtual string Bbox
            {
                get { return bbox; }
                set { bbox = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Latitude to use in a geographic location query.</summary>
            [RequestParameter("lat")]
            public virtual string Lat
            {
                get { return lat; }
                set { lat = value; }
            }

            /// <summary>Longitude to use in a geographic location query.</summary>
            [RequestParameter("lon")]
            public virtual string Lon
            {
                get { return lon; }
                set { lon = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of a place to use in a geographic location query.</summary>
            [RequestParameter("pid")]
            public virtual string Pid
            {
                get { return pid; }
                set { pid = value; }
            }

            /// <summary>Full-text search query string.</summary>
            [RequestParameter("q")]
            public virtual string Q
            {
                get { return q; }
                set { q = value; }
            }

            /// <summary>Radius to use in a geographic location query.</summary>
            [RequestParameter("radius")]
            public virtual string Radius
            {
                get { return radius; }
                set { radius = value; }
            }

            /// <summary>Truncate the value of the atom:content element.</summary>
            [RequestParameter("truncateAtom")]
            public virtual Boolean? TruncateAtom
            {
                get { return truncateAtom; }
                set { truncateAtom = value; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "search"; }
            }
        }

        #endregion

        #region Nested type: TrackRequest

        public class TrackRequest : ServiceRequest<ActivityFeed>
        {
            private Alt? alt;

            private string bbox;

            private string c;

            private string hl;

            private string lat;

            private string lon;

            private Int64? maxResults;

            private string pid;

            private string q;

            private string radius;

            public TrackRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public TrackRequest(ISchemaAwareRequestExecutor service,
                                [Optional] Alt? alt,
                                [Optional] string bbox,
                                [Optional] string c,
                                [Optional] string hl,
                                [Optional] string lat,
                                [Optional] string lon,
                                [Optional] Int64? maxResults,
                                [Optional] string pid,
                                [Optional] string q,
                                [Optional] string radius) : base(service)
            {
                this.alt = alt;
                this.bbox = bbox;
                this.c = c;
                this.hl = hl;
                this.lat = lat;
                this.lon = lon;
                this.maxResults = maxResults;
                this.pid = pid;
                this.q = q;
                this.radius = radius;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Bounding box to use in a geographic location query.</summary>
            [RequestParameter("bbox")]
            public virtual string Bbox
            {
                get { return bbox; }
                set { bbox = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Latitude to use in a geographic location query.</summary>
            [RequestParameter("lat")]
            public virtual string Lat
            {
                get { return lat; }
                set { lat = value; }
            }

            /// <summary>Longitude to use in a geographic location query.</summary>
            [RequestParameter("lon")]
            public virtual string Lon
            {
                get { return lon; }
                set { lon = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of a place to use in a geographic location query.</summary>
            [RequestParameter("pid")]
            public virtual string Pid
            {
                get { return pid; }
                set { pid = value; }
            }

            /// <summary>Full-text search query string.</summary>
            [RequestParameter("q")]
            public virtual string Q
            {
                get { return q; }
                set { q = value; }
            }

            /// <summary>Radius to use in a geographic location query.</summary>
            [RequestParameter("radius")]
            public virtual string Radius
            {
                get { return radius; }
                set { radius = value; }
            }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "track"; }
            }
        }

        #endregion

        #region Nested type: UpdateRequest

        public class UpdateRequest : ServiceRequest<Activity>
        {
            private readonly string postId;

            private readonly ScopeMember scope;

            private readonly string userId;
            private string abuseType;

            private Alt? alt;

            private string hl;

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Activity body,
                                 string postId,
                                 ScopeMember scope,
                                 string userId) : base(service)
            {
                Body = body;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Activity body,
                                 string postId,
                                 ScopeMember scope,
                                 string userId,
                                 [Optional] string abuseType,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.abuseType = abuseType;
                this.alt = alt;
                this.hl = hl;
            }

            [RequestParameter("abuseType")]
            public virtual string AbuseType
            {
                get { return abuseType; }
                set { abuseType = value; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity to update.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual ScopeMember Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user whose post to update.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Activity Body { get; set; }

            protected override string ResourceName
            {
                get { return "activities"; }
            }

            protected override string MethodName
            {
                get { return "update"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion
    }

    public class CommentsResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        #region Scope enum

        /// <summary>The collection to which the activity belongs.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Scope
        {
            /// <summary>Activities posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        #region ScopeEnum enum

        /// <summary>The collection to which the activity belongs.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum ScopeEnum
        {
            /// <summary>Comments reported by the user.</summary>
            [StringValue("@abuse")] Abuse,

            /// <summary>Comments posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        private const string Resource = "comments";

        private readonly ILog logger = LogManager.GetLogger(typeof(CommentsResource));
        private readonly ISchemaAwareRequestExecutor service;

        public CommentsResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Delete a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAsStream(string commentId,
                                             string postId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }

        /// <summary>Get a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream GetAsStream(string commentId,
                                          string postId,
                                          string userId,
                                          [Optional] Alt? alt,
                                          [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing comments.get");
            return ret;
        }

        /// <summary>Create a comment</summary>
        /// <param name="postId">Required - ID of the activity on which to comment.</param>
        /// <param name="userId">Required - ID of the user on whose behalf to comment.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream InsertAsStream(string body,
                                             string postId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing comments.insert");
            return ret;
        }

        /// <summary>List comments</summary>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user for whose post to get comments.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ListAsStream(string postId,
                                           Scope scope,
                                           string userId,
                                           [Optional] Alt? alt,
                                           [Optional] string c,
                                           [Optional] string hl,
                                           [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing comments.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing comments.list");
            return ret;
        }

        /// <summary>Update a comment. This method supports patch semantics.</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream PatchAsStream(string body,
                                            string commentId,
                                            string postId,
                                            ScopeEnum scope,
                                            string userId,
                                            [Optional] string abuseType,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.patch");
            Stream ret = service.ExecuteRequest(Resource, "patch", body, parameters);
            logger.Debug("Done Executing comments.patch");
            return ret;
        }

        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream UpdateAsStream(string body,
                                             string commentId,
                                             string postId,
                                             ScopeEnum scope,
                                             string userId,
                                             [Optional] string abuseType,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.update");
            Stream ret = service.ExecuteRequest(Resource, "update", body, parameters);
            logger.Debug("Done Executing comments.update");
            return ret;
        }

        /// <summary>Delete a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAndExecute(string commentId,
                                               string postId,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }

        /// <summary>Get a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Comment GetAndExecute(string commentId,
                                             string postId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.get");
            Comment ret = service.JsonToObject<Comment>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing comments.get");
            return ret;
        }

        /// <summary>Create a comment</summary>
        /// <param name="postId">Required - ID of the activity on which to comment.</param>
        /// <param name="userId">Required - ID of the user on whose behalf to comment.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Comment InsertAndExecute(Comment body,
                                                string postId,
                                                string userId,
                                                [Optional] Alt? alt,
                                                [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.insert");
            Comment ret =
                service.JsonToObject<Comment>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing comments.insert");
            return ret;
        }

        /// <summary>List comments</summary>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user for whose post to get comments.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual CommentFeed ListAndExecute(string postId,
                                                  Scope scope,
                                                  string userId,
                                                  [Optional] Alt? alt,
                                                  [Optional] string c,
                                                  [Optional] string hl,
                                                  [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing comments.list");
            CommentFeed ret =
                service.JsonToObject<CommentFeed>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing comments.list");
            return ret;
        }

        /// <summary>Update a comment. This method supports patch semantics.</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Comment PatchAndExecute(Comment body,
                                               string commentId,
                                               string postId,
                                               ScopeEnum scope,
                                               string userId,
                                               [Optional] string abuseType,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.patch");
            Comment ret =
                service.JsonToObject<Comment>(
                    service.ExecuteRequest(Resource, "patch", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing comments.patch");
            return ret;
        }

        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Comment UpdateAndExecute(Comment body,
                                                string commentId,
                                                string postId,
                                                ScopeEnum scope,
                                                string userId,
                                                [Optional] string abuseType,
                                                [Optional] Alt? alt,
                                                [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing comments.update");
            Comment ret =
                service.JsonToObject<Comment>(
                    service.ExecuteRequest(Resource, "update", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing comments.update");
            return ret;
        }

        /// <summary>Delete a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual DeleteRequest Delete(string commentId, string postId, string userId)
        {
            return new DeleteRequest(service, commentId, postId, userId);
        }

        /// <summary>Delete a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to delete the comment.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual DeleteRequest Delete(string commentId,
                                            string postId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new DeleteRequest(service, commentId, postId, userId, alt, hl);
        }

        /// <summary>Get a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual GetRequest Get(string commentId, string postId, string userId)
        {
            return new GetRequest(service, commentId, postId, userId);
        }

        /// <summary>Get a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual GetRequest Get(string commentId,
                                      string postId,
                                      string userId,
                                      [Optional] Alt? alt,
                                      [Optional] string hl)
        {
            return new GetRequest(service, commentId, postId, userId, alt, hl);
        }

        /// <summary>Create a comment</summary>
        /// <param name="postId">Required - ID of the activity on which to comment.</param>
        /// <param name="userId">Required - ID of the user on whose behalf to comment.</param>
        public virtual InsertRequest Insert(Comment body, string postId, string userId)
        {
            return new InsertRequest(service, body, postId, userId);
        }

        /// <summary>Create a comment</summary>
        /// <param name="postId">Required - ID of the activity on which to comment.</param>
        /// <param name="userId">Required - ID of the user on whose behalf to comment.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual InsertRequest Insert(Comment body,
                                            string postId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new InsertRequest(service, body, postId, userId, alt, hl);
        }

        /// <summary>List comments</summary>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user for whose post to get comments.</param>
        public virtual ListRequest List(string postId, Scope scope, string userId)
        {
            return new ListRequest(service, postId, scope, userId);
        }

        /// <summary>List comments</summary>
        /// <param name="postId">Required - ID of the activity for which to get comments.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user for whose post to get comments.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ListRequest List(string postId,
                                        Scope scope,
                                        string userId,
                                        [Optional] Alt? alt,
                                        [Optional] string c,
                                        [Optional] string hl,
                                        [Optional] Int64? maxResults)
        {
            return new ListRequest(service, postId, scope, userId, alt, c, hl, maxResults);
        }

        /// <summary>Update a comment. This method supports patch semantics.</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual PatchRequest Patch(Comment body,
                                          string commentId,
                                          string postId,
                                          ScopeEnum scope,
                                          string userId)
        {
            return new PatchRequest(service, body, commentId, postId, scope, userId);
        }

        /// <summary>Update a comment. This method supports patch semantics.</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual PatchRequest Patch(Comment body,
                                          string commentId,
                                          string postId,
                                          ScopeEnum scope,
                                          string userId,
                                          [Optional] string abuseType,
                                          [Optional] Alt? alt,
                                          [Optional] string hl)
        {
            return new PatchRequest(service, body, commentId, postId, scope, userId, abuseType, alt, hl);
        }

        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual UpdateRequest Update(Comment body,
                                            string commentId,
                                            string postId,
                                            ScopeEnum scope,
                                            string userId)
        {
            return new UpdateRequest(service, body, commentId, postId, scope, userId);
        }

        /// <summary>Update a comment</summary>
        /// <param name="commentId">Required - ID of the comment being referenced.</param>
        /// <param name="postId">Required - ID of the activity for which to update the comment.</param>
        /// <param name="scope">Required - Must be one of the following values [@abuse, @self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="abuseType">Optional</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual UpdateRequest Update(Comment body,
                                            string commentId,
                                            string postId,
                                            ScopeEnum scope,
                                            string userId,
                                            [Optional] string abuseType,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new UpdateRequest(service, body, commentId, postId, scope, userId, abuseType, alt, hl);
        }

        #region Nested type: DeleteRequest

        public class DeleteRequest : ServiceRequest<string>
        {
            private readonly string commentId;

            private readonly string postId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public DeleteRequest(ISchemaAwareRequestExecutor service, string commentId, string postId, string userId)
                : base(service)
            {
                this.commentId = commentId;
                this.postId = postId;
                this.userId = userId;
            }

            public DeleteRequest(ISchemaAwareRequestExecutor service,
                                 string commentId,
                                 string postId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                this.commentId = commentId;
                this.postId = postId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the comment being referenced.</summary>
            [RequestParameter("commentId")]
            public virtual string CommentId
            {
                get { return commentId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity for which to delete the comment.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "comments"; }
            }

            protected override string MethodName
            {
                get { return "delete"; }
            }
        }

        #endregion

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Comment>
        {
            private readonly string commentId;

            private readonly string postId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public GetRequest(ISchemaAwareRequestExecutor service, string commentId, string postId, string userId)
                : base(service)
            {
                this.commentId = commentId;
                this.postId = postId;
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string commentId,
                              string postId,
                              string userId,
                              [Optional] Alt? alt,
                              [Optional] string hl) : base(service)
            {
                this.commentId = commentId;
                this.postId = postId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the comment being referenced.</summary>
            [RequestParameter("commentId")]
            public virtual string CommentId
            {
                get { return commentId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity for which to get comments.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "comments"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: InsertRequest

        public class InsertRequest : ServiceRequest<Comment>
        {
            private readonly string postId;

            private readonly string userId;
            private Alt? alt;

            private string hl;

            public InsertRequest(ISchemaAwareRequestExecutor service, Comment body, string postId, string userId)
                : base(service)
            {
                Body = body;
                this.postId = postId;
                this.userId = userId;
            }

            public InsertRequest(ISchemaAwareRequestExecutor service,
                                 Comment body,
                                 string postId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.postId = postId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity on which to comment.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>ID of the user on whose behalf to comment.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Comment Body { get; set; }

            protected override string ResourceName
            {
                get { return "comments"; }
            }

            protected override string MethodName
            {
                get { return "insert"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<CommentFeed>
        {
            private readonly string postId;

            private readonly Scope scope;

            private readonly string userId;
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            public ListRequest(ISchemaAwareRequestExecutor service, string postId, Scope scope, string userId)
                : base(service)
            {
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               string postId,
                               Scope scope,
                               string userId,
                               [Optional] Alt? alt,
                               [Optional] string c,
                               [Optional] string hl,
                               [Optional] Int64? maxResults) : base(service)
            {
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of the activity for which to get comments.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual Scope Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user for whose post to get comments.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "comments"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion

        #region Nested type: PatchRequest

        public class PatchRequest : ServiceRequest<Comment>
        {
            private readonly string commentId;

            private readonly string postId;

            private readonly ScopeEnum scope;

            private readonly string userId;
            private string abuseType;

            private Alt? alt;
            private string hl;

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Comment body,
                                string commentId,
                                string postId,
                                ScopeEnum scope,
                                string userId) : base(service)
            {
                Body = body;
                this.commentId = commentId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Comment body,
                                string commentId,
                                string postId,
                                ScopeEnum scope,
                                string userId,
                                [Optional] string abuseType,
                                [Optional] Alt? alt,
                                [Optional] string hl) : base(service)
            {
                Body = body;
                this.commentId = commentId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.abuseType = abuseType;
                this.alt = alt;
                this.hl = hl;
            }

            [RequestParameter("abuseType")]
            public virtual string AbuseType
            {
                get { return abuseType; }
                set { abuseType = value; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the comment being referenced.</summary>
            [RequestParameter("commentId")]
            public virtual string CommentId
            {
                get { return commentId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity for which to update the comment.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual ScopeEnum Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Comment Body { get; set; }

            protected override string ResourceName
            {
                get { return "comments"; }
            }

            protected override string MethodName
            {
                get { return "patch"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: UpdateRequest

        public class UpdateRequest : ServiceRequest<Comment>
        {
            private readonly string commentId;

            private readonly string postId;

            private readonly ScopeEnum scope;

            private readonly string userId;
            private string abuseType;

            private Alt? alt;
            private string hl;

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Comment body,
                                 string commentId,
                                 string postId,
                                 ScopeEnum scope,
                                 string userId) : base(service)
            {
                Body = body;
                this.commentId = commentId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Comment body,
                                 string commentId,
                                 string postId,
                                 ScopeEnum scope,
                                 string userId,
                                 [Optional] string abuseType,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.commentId = commentId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.abuseType = abuseType;
                this.alt = alt;
                this.hl = hl;
            }

            [RequestParameter("abuseType")]
            public virtual string AbuseType
            {
                get { return abuseType; }
                set { abuseType = value; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the comment being referenced.</summary>
            [RequestParameter("commentId")]
            public virtual string CommentId
            {
                get { return commentId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity for which to update the comment.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual ScopeEnum Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Comment Body { get; set; }

            protected override string ResourceName
            {
                get { return "comments"; }
            }

            protected override string MethodName
            {
                get { return "update"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion
    }

    public class GroupsResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        private const string Resource = "groups";

        private readonly ILog logger = LogManager.GetLogger(typeof(GroupsResource));
        private readonly ISchemaAwareRequestExecutor service;

        public GroupsResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Delete a group</summary>
        /// <param name="groupId">Required - ID of the group to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAsStream(string groupId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }

        /// <summary>Get a group</summary>
        /// <param name="groupId">Required - ID of the group to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream GetAsStream(string groupId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing groups.get");
            return ret;
        }

        /// <summary>Create a group</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream InsertAsStream(string body, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing groups.insert");
            return ret;
        }

        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ListAsStream(string userId,
                                           [Optional] Alt? alt,
                                           [Optional] string c,
                                           [Optional] string hl,
                                           [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing groups.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing groups.list");
            return ret;
        }

        /// <summary>Update a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream PatchAsStream(string body,
                                            string groupId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.patch");
            Stream ret = service.ExecuteRequest(Resource, "patch", body, parameters);
            logger.Debug("Done Executing groups.patch");
            return ret;
        }

        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream UpdateAsStream(string body,
                                             string groupId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.update");
            Stream ret = service.ExecuteRequest(Resource, "update", body, parameters);
            logger.Debug("Done Executing groups.update");
            return ret;
        }

        /// <summary>Delete a group</summary>
        /// <param name="groupId">Required - ID of the group to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAndExecute(string groupId,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }

        /// <summary>Get a group</summary>
        /// <param name="groupId">Required - ID of the group to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Group GetAndExecute(string groupId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.get");
            Group ret = service.JsonToObject<Group>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing groups.get");
            return ret;
        }

        /// <summary>Create a group</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Group InsertAndExecute(Group body, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.insert");
            Group ret =
                service.JsonToObject<Group>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing groups.insert");
            return ret;
        }

        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual GroupFeed ListAndExecute(string userId,
                                                [Optional] Alt? alt,
                                                [Optional] string c,
                                                [Optional] string hl,
                                                [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing groups.list");
            GroupFeed ret = service.JsonToObject<GroupFeed>(
                service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing groups.list");
            return ret;
        }

        /// <summary>Update a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Group PatchAndExecute(Group body,
                                             string groupId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.patch");
            Group ret =
                service.JsonToObject<Group>(
                    service.ExecuteRequest(Resource, "patch", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing groups.patch");
            return ret;
        }

        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Group UpdateAndExecute(Group body,
                                              string groupId,
                                              string userId,
                                              [Optional] Alt? alt,
                                              [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing groups.update");
            Group ret =
                service.JsonToObject<Group>(
                    service.ExecuteRequest(Resource, "update", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing groups.update");
            return ret;
        }

        /// <summary>Delete a group</summary>
        /// <param name="groupId">Required - ID of the group to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual DeleteRequest Delete(string groupId, string userId)
        {
            return new DeleteRequest(service, groupId, userId);
        }

        /// <summary>Delete a group</summary>
        /// <param name="groupId">Required - ID of the group to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual DeleteRequest Delete(string groupId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new DeleteRequest(service, groupId, userId, alt, hl);
        }

        /// <summary>Get a group</summary>
        /// <param name="groupId">Required - ID of the group to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual GetRequest Get(string groupId, string userId)
        {
            return new GetRequest(service, groupId, userId);
        }

        /// <summary>Get a group</summary>
        /// <param name="groupId">Required - ID of the group to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual GetRequest Get(string groupId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new GetRequest(service, groupId, userId, alt, hl);
        }

        /// <summary>Create a group</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual InsertRequest Insert(Group body, string userId)
        {
            return new InsertRequest(service, body, userId);
        }

        /// <summary>Create a group</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual InsertRequest Insert(Group body, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new InsertRequest(service, body, userId, alt, hl);
        }

        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListRequest List(string userId)
        {
            return new ListRequest(service, userId);
        }

        /// <summary>Get a user&apos;s groups</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ListRequest List(string userId,
                                        [Optional] Alt? alt,
                                        [Optional] string c,
                                        [Optional] string hl,
                                        [Optional] Int64? maxResults)
        {
            return new ListRequest(service, userId, alt, c, hl, maxResults);
        }

        /// <summary>Update a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual PatchRequest Patch(Group body, string groupId, string userId)
        {
            return new PatchRequest(service, body, groupId, userId);
        }

        /// <summary>Update a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual PatchRequest Patch(Group body,
                                          string groupId,
                                          string userId,
                                          [Optional] Alt? alt,
                                          [Optional] string hl)
        {
            return new PatchRequest(service, body, groupId, userId, alt, hl);
        }

        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual UpdateRequest Update(Group body, string groupId, string userId)
        {
            return new UpdateRequest(service, body, groupId, userId);
        }

        /// <summary>Update a group</summary>
        /// <param name="groupId">Required - ID of the group to update.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual UpdateRequest Update(Group body,
                                            string groupId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new UpdateRequest(service, body, groupId, userId, alt, hl);
        }

        #region Nested type: DeleteRequest

        public class DeleteRequest : ServiceRequest<string>
        {
            private readonly string groupId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public DeleteRequest(ISchemaAwareRequestExecutor service, string groupId, string userId) : base(service)
            {
                this.groupId = groupId;
                this.userId = userId;
            }

            public DeleteRequest(ISchemaAwareRequestExecutor service,
                                 string groupId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                this.groupId = groupId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group to delete.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "groups"; }
            }

            protected override string MethodName
            {
                get { return "delete"; }
            }
        }

        #endregion

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Group>
        {
            private readonly string groupId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public GetRequest(ISchemaAwareRequestExecutor service, string groupId, string userId) : base(service)
            {
                this.groupId = groupId;
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string groupId,
                              string userId,
                              [Optional] Alt? alt,
                              [Optional] string hl) : base(service)
            {
                this.groupId = groupId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group to get.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "groups"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: InsertRequest

        public class InsertRequest : ServiceRequest<Group>
        {
            private readonly string userId;
            private Alt? alt;

            private string hl;

            public InsertRequest(ISchemaAwareRequestExecutor service, Group body, string userId) : base(service)
            {
                Body = body;
                this.userId = userId;
            }

            public InsertRequest(ISchemaAwareRequestExecutor service,
                                 Group body,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Group Body { get; set; }

            protected override string ResourceName
            {
                get { return "groups"; }
            }

            protected override string MethodName
            {
                get { return "insert"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<GroupFeed>
        {
            private readonly string userId;
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            public ListRequest(ISchemaAwareRequestExecutor service, string userId) : base(service)
            {
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               string userId,
                               [Optional] Alt? alt,
                               [Optional] string c,
                               [Optional] string hl,
                               [Optional] Int64? maxResults) : base(service)
            {
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "groups"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion

        #region Nested type: PatchRequest

        public class PatchRequest : ServiceRequest<Group>
        {
            private readonly string groupId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public PatchRequest(ISchemaAwareRequestExecutor service, Group body, string groupId, string userId)
                : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.userId = userId;
            }

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Group body,
                                string groupId,
                                string userId,
                                [Optional] Alt? alt,
                                [Optional] string hl) : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group to update.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Group Body { get; set; }

            protected override string ResourceName
            {
                get { return "groups"; }
            }

            protected override string MethodName
            {
                get { return "patch"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: UpdateRequest

        public class UpdateRequest : ServiceRequest<Group>
        {
            private readonly string groupId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public UpdateRequest(ISchemaAwareRequestExecutor service, Group body, string groupId, string userId)
                : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.userId = userId;
            }

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Group body,
                                 string groupId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group to update.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Group Body { get; set; }

            protected override string ResourceName
            {
                get { return "groups"; }
            }

            protected override string MethodName
            {
                get { return "update"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion
    }

    public class PeopleResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        #region GroupId enum

        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum GroupId
        {
            /// <summary>People who liked this activity.</summary>
            [StringValue("@liked")] Liked,
        }

        #endregion

        #region GroupIdEnum enum

        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum GroupIdEnum
        {
            /// <summary>People who reshared this activity.</summary>
            [StringValue("@reshared")] Reshared,
        }

        #endregion

        private const string Resource = "people";

        private readonly ILog logger = LogManager.GetLogger(typeof(PeopleResource));
        private readonly ISchemaAwareRequestExecutor service;

        public PeopleResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Remove a person from a group</summary>
        /// <param name="groupId">Required - ID of the group from which to remove the person.</param>
        /// <param name="personId">Required - ID of the person to remove from the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAsStream(string groupId,
                                             string personId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }

        /// <summary>Get a user profile</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream GetAsStream(string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing people.get");
            return ret;
        }

        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@liked]</param>
        /// <param name="postId">Required - ID of the activity that was liked.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream LikedAsStream(GroupId groupId,
                                            string postId,
                                            string scope,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string c,
                                            [Optional] string hl,
                                            [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.liked");
            Stream ret = service.ExecuteRequest(Resource, "liked", body, parameters);
            logger.Debug("Done Executing people.liked");
            return ret;
        }

        /// <summary>Get people in a group</summary>
        /// <param name="groupId">Required - ID of the group for which to list users.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ListAsStream(string groupId,
                                           string userId,
                                           [Optional] Alt? alt,
                                           [Optional] string c,
                                           [Optional] string hl,
                                           [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing people.list");
            return ret;
        }

        /// <summary>Add a person to a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream PatchAsStream(string body,
                                            string groupId,
                                            string personId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.patch");
            Stream ret = service.ExecuteRequest(Resource, "patch", body, parameters);
            logger.Debug("Done Executing people.patch");
            return ret;
        }

        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@reshared]</param>
        /// <param name="postId">Required - ID of the activity that was reshared.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ResharedAsStream(GroupIdEnum groupId,
                                               string postId,
                                               string scope,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string c,
                                               [Optional] string hl,
                                               [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.reshared");
            Stream ret = service.ExecuteRequest(Resource, "reshared", body, parameters);
            logger.Debug("Done Executing people.reshared");
            return ret;
        }

        /// <summary>Search for people</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        public virtual Stream SearchAsStream([Optional] Alt? alt,
                                             [Optional] string c,
                                             [Optional] string hl,
                                             [Optional] Int64? maxResults,
                                             [Optional] string q)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            parameters["q"] = q;
            logger.Debug("Executing people.search");
            Stream ret = service.ExecuteRequest(Resource, "search", body, parameters);
            logger.Debug("Done Executing people.search");
            return ret;
        }

        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream UpdateAsStream(string body,
                                             string groupId,
                                             string personId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.update");
            Stream ret = service.ExecuteRequest(Resource, "update", body, parameters);
            logger.Debug("Done Executing people.update");
            return ret;
        }

        /// <summary>Remove a person from a group</summary>
        /// <param name="groupId">Required - ID of the group from which to remove the person.</param>
        /// <param name="personId">Required - ID of the person to remove from the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAndExecute(string groupId,
                                               string personId,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }

        /// <summary>Get a user profile</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Person GetAndExecute(string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.get");
            Person ret = service.JsonToObject<Person>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing people.get");
            return ret;
        }

        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@liked]</param>
        /// <param name="postId">Required - ID of the activity that was liked.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual PeopleFeed LikedAndExecute(GroupId groupId,
                                                  string postId,
                                                  string scope,
                                                  string userId,
                                                  [Optional] Alt? alt,
                                                  [Optional] string c,
                                                  [Optional] string hl,
                                                  [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.liked");
            PeopleFeed ret =
                service.JsonToObject<PeopleFeed>(service.ExecuteRequest(Resource, "liked", body, parameters));
            logger.Debug("Done Executing people.liked");
            return ret;
        }

        /// <summary>Get people in a group</summary>
        /// <param name="groupId">Required - ID of the group for which to list users.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual PeopleFeed ListAndExecute(string groupId,
                                                 string userId,
                                                 [Optional] Alt? alt,
                                                 [Optional] string c,
                                                 [Optional] string hl,
                                                 [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.list");
            PeopleFeed ret =
                service.JsonToObject<PeopleFeed>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing people.list");
            return ret;
        }

        /// <summary>Add a person to a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Person PatchAndExecute(Person body,
                                              string groupId,
                                              string personId,
                                              string userId,
                                              [Optional] Alt? alt,
                                              [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.patch");
            Person ret =
                service.JsonToObject<Person>(
                    service.ExecuteRequest(Resource, "patch", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing people.patch");
            return ret;
        }

        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@reshared]</param>
        /// <param name="postId">Required - ID of the activity that was reshared.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual PeopleFeed ResharedAndExecute(GroupIdEnum groupId,
                                                     string postId,
                                                     string scope,
                                                     string userId,
                                                     [Optional] Alt? alt,
                                                     [Optional] string c,
                                                     [Optional] string hl,
                                                     [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing people.reshared");
            PeopleFeed ret =
                service.JsonToObject<PeopleFeed>(service.ExecuteRequest(Resource, "reshared", body, parameters));
            logger.Debug("Done Executing people.reshared");
            return ret;
        }

        /// <summary>Search for people</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        public virtual PeopleFeed SearchAndExecute([Optional] Alt? alt,
                                                   [Optional] string c,
                                                   [Optional] string hl,
                                                   [Optional] Int64? maxResults,
                                                   [Optional] string q)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            parameters["q"] = q;
            logger.Debug("Executing people.search");
            PeopleFeed ret =
                service.JsonToObject<PeopleFeed>(service.ExecuteRequest(Resource, "search", body, parameters));
            logger.Debug("Done Executing people.search");
            return ret;
        }

        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Person UpdateAndExecute(Person body,
                                               string groupId,
                                               string personId,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing people.update");
            Person ret =
                service.JsonToObject<Person>(
                    service.ExecuteRequest(Resource, "update", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing people.update");
            return ret;
        }

        /// <summary>Remove a person from a group</summary>
        /// <param name="groupId">Required - ID of the group from which to remove the person.</param>
        /// <param name="personId">Required - ID of the person to remove from the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        public virtual DeleteRequest Delete(string groupId, string personId, string userId)
        {
            return new DeleteRequest(service, groupId, personId, userId);
        }

        /// <summary>Remove a person from a group</summary>
        /// <param name="groupId">Required - ID of the group from which to remove the person.</param>
        /// <param name="personId">Required - ID of the person to remove from the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual DeleteRequest Delete(string groupId,
                                            string personId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new DeleteRequest(service, groupId, personId, userId, alt, hl);
        }

        /// <summary>Get a user profile</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual GetRequest Get(string userId)
        {
            return new GetRequest(service, userId);
        }

        /// <summary>Get a user profile</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual GetRequest Get(string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new GetRequest(service, userId, alt, hl);
        }

        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@liked]</param>
        /// <param name="postId">Required - ID of the activity that was liked.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual LikedRequest Liked(GroupId groupId, string postId, string scope, string userId)
        {
            return new LikedRequest(service, groupId, postId, scope, userId);
        }

        /// <summary>Get people who liked an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@liked]</param>
        /// <param name="postId">Required - ID of the activity that was liked.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual LikedRequest Liked(GroupId groupId,
                                          string postId,
                                          string scope,
                                          string userId,
                                          [Optional] Alt? alt,
                                          [Optional] string c,
                                          [Optional] string hl,
                                          [Optional] Int64? maxResults)
        {
            return new LikedRequest(service, groupId, postId, scope, userId, alt, c, hl, maxResults);
        }

        /// <summary>Get people in a group</summary>
        /// <param name="groupId">Required - ID of the group for which to list users.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListRequest List(string groupId, string userId)
        {
            return new ListRequest(service, groupId, userId);
        }

        /// <summary>Get people in a group</summary>
        /// <param name="groupId">Required - ID of the group for which to list users.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ListRequest List(string groupId,
                                        string userId,
                                        [Optional] Alt? alt,
                                        [Optional] string c,
                                        [Optional] string hl,
                                        [Optional] Int64? maxResults)
        {
            return new ListRequest(service, groupId, userId, alt, c, hl, maxResults);
        }

        /// <summary>Add a person to a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        public virtual PatchRequest Patch(Person body, string groupId, string personId, string userId)
        {
            return new PatchRequest(service, body, groupId, personId, userId);
        }

        /// <summary>Add a person to a group. This method supports patch semantics.</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual PatchRequest Patch(Person body,
                                          string groupId,
                                          string personId,
                                          string userId,
                                          [Optional] Alt? alt,
                                          [Optional] string hl)
        {
            return new PatchRequest(service, body, groupId, personId, userId, alt, hl);
        }

        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@reshared]</param>
        /// <param name="postId">Required - ID of the activity that was reshared.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ResharedRequest Reshared(GroupIdEnum groupId, string postId, string scope, string userId)
        {
            return new ResharedRequest(service, groupId, postId, scope, userId);
        }

        /// <summary>Get people who reshared an activity</summary>
        /// <param name="groupId">Required - Must be one of the following values [@reshared]</param>
        /// <param name="postId">Required - ID of the activity that was reshared.</param>
        /// <param name="scope">Required</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ResharedRequest Reshared(GroupIdEnum groupId,
                                                string postId,
                                                string scope,
                                                string userId,
                                                [Optional] Alt? alt,
                                                [Optional] string c,
                                                [Optional] string hl,
                                                [Optional] Int64? maxResults)
        {
            return new ResharedRequest(service, groupId, postId, scope, userId, alt, c, hl, maxResults);
        }

        /// <summary>Search for people</summary>
        public virtual SearchRequest Search()
        {
            return new SearchRequest(service);
        }

        /// <summary>Search for people</summary>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        /// <param name="q">Optional - Full-text search query string.</param>
        public virtual SearchRequest Search([Optional] Alt? alt,
                                            [Optional] string c,
                                            [Optional] string hl,
                                            [Optional] Int64? maxResults,
                                            [Optional] string q)
        {
            return new SearchRequest(service, alt, c, hl, maxResults, q);
        }

        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        public virtual UpdateRequest Update(Person body, string groupId, string personId, string userId)
        {
            return new UpdateRequest(service, body, groupId, personId, userId);
        }

        /// <summary>Add a person to a group</summary>
        /// <param name="groupId">Required - ID of the group to which to add the person.</param>
        /// <param name="personId">Required - ID of the person to add to the group.</param>
        /// <param name="userId">Required - ID of the owner of the group.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual UpdateRequest Update(Person body,
                                            string groupId,
                                            string personId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new UpdateRequest(service, body, groupId, personId, userId, alt, hl);
        }

        #region Nested type: DeleteRequest

        public class DeleteRequest : ServiceRequest<string>
        {
            private readonly string groupId;

            private readonly string personId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public DeleteRequest(ISchemaAwareRequestExecutor service, string groupId, string personId, string userId)
                : base(service)
            {
                this.groupId = groupId;
                this.personId = personId;
                this.userId = userId;
            }

            public DeleteRequest(ISchemaAwareRequestExecutor service,
                                 string groupId,
                                 string personId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                this.groupId = groupId;
                this.personId = personId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group from which to remove the person.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the person to remove from the group.</summary>
            [RequestParameter("personId")]
            public virtual string PersonId
            {
                get { return personId; }
            }

            /// <summary>ID of the owner of the group.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "delete"; }
            }
        }

        #endregion

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Person>
        {
            private readonly string userId;
            private Alt? alt;

            private string hl;

            public GetRequest(ISchemaAwareRequestExecutor service, string userId) : base(service)
            {
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string userId,
                              [Optional] Alt? alt,
                              [Optional] string hl) : base(service)
            {
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: LikedRequest

        public class LikedRequest : ServiceRequest<PeopleFeed>
        {
            private readonly GroupId groupId;

            private readonly string postId;

            private readonly string scope;

            private readonly string userId;
            private Alt? alt;

            private string c;
            private string hl;

            private Int64? maxResults;

            public LikedRequest(ISchemaAwareRequestExecutor service,
                                GroupId groupId,
                                string postId,
                                string scope,
                                string userId) : base(service)
            {
                this.groupId = groupId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public LikedRequest(ISchemaAwareRequestExecutor service,
                                GroupId groupId,
                                string postId,
                                string scope,
                                string userId,
                                [Optional] Alt? alt,
                                [Optional] string c,
                                [Optional] string hl,
                                [Optional] Int64? maxResults) : base(service)
            {
                this.groupId = groupId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            [RequestParameter("groupId")]
            public virtual GroupId GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of the activity that was liked.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            [RequestParameter("scope")]
            public virtual string Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "liked"; }
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<PeopleFeed>
        {
            private readonly string groupId;
            private readonly string userId;
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            public ListRequest(ISchemaAwareRequestExecutor service, string groupId, string userId) : base(service)
            {
                this.groupId = groupId;
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               string groupId,
                               string userId,
                               [Optional] Alt? alt,
                               [Optional] string c,
                               [Optional] string hl,
                               [Optional] Int64? maxResults) : base(service)
            {
                this.groupId = groupId;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>ID of the group for which to list users.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion

        #region Nested type: PatchRequest

        public class PatchRequest : ServiceRequest<Person>
        {
            private readonly string groupId;

            private readonly string personId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Person body,
                                string groupId,
                                string personId,
                                string userId) : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.personId = personId;
                this.userId = userId;
            }

            public PatchRequest(ISchemaAwareRequestExecutor service,
                                Person body,
                                string groupId,
                                string personId,
                                string userId,
                                [Optional] Alt? alt,
                                [Optional] string hl) : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.personId = personId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group to which to add the person.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the person to add to the group.</summary>
            [RequestParameter("personId")]
            public virtual string PersonId
            {
                get { return personId; }
            }

            /// <summary>ID of the owner of the group.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Person Body { get; set; }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "patch"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ResharedRequest

        public class ResharedRequest : ServiceRequest<PeopleFeed>
        {
            private readonly GroupIdEnum groupId;

            private readonly string postId;

            private readonly string scope;

            private readonly string userId;
            private Alt? alt;

            private string c;
            private string hl;

            private Int64? maxResults;

            public ResharedRequest(ISchemaAwareRequestExecutor service,
                                   GroupIdEnum groupId,
                                   string postId,
                                   string scope,
                                   string userId) : base(service)
            {
                this.groupId = groupId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public ResharedRequest(ISchemaAwareRequestExecutor service,
                                   GroupIdEnum groupId,
                                   string postId,
                                   string scope,
                                   string userId,
                                   [Optional] Alt? alt,
                                   [Optional] string c,
                                   [Optional] string hl,
                                   [Optional] Int64? maxResults) : base(service)
            {
                this.groupId = groupId;
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            [RequestParameter("groupId")]
            public virtual GroupIdEnum GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of the activity that was reshared.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            [RequestParameter("scope")]
            public virtual string Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "reshared"; }
            }
        }

        #endregion

        #region Nested type: SearchRequest

        public class SearchRequest : ServiceRequest<PeopleFeed>
        {
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            private string q;

            public SearchRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public SearchRequest(ISchemaAwareRequestExecutor service,
                                 [Optional] Alt? alt,
                                 [Optional] string c,
                                 [Optional] string hl,
                                 [Optional] Int64? maxResults,
                                 [Optional] string q) : base(service)
            {
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
                this.q = q;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>Full-text search query string.</summary>
            [RequestParameter("q")]
            public virtual string Q
            {
                get { return q; }
                set { q = value; }
            }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "search"; }
            }
        }

        #endregion

        #region Nested type: UpdateRequest

        public class UpdateRequest : ServiceRequest<Person>
        {
            private readonly string groupId;

            private readonly string personId;

            private readonly string userId;
            private Alt? alt;
            private string hl;

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Person body,
                                 string groupId,
                                 string personId,
                                 string userId) : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.personId = personId;
                this.userId = userId;
            }

            public UpdateRequest(ISchemaAwareRequestExecutor service,
                                 Person body,
                                 string groupId,
                                 string personId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.groupId = groupId;
                this.personId = personId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>ID of the group to which to add the person.</summary>
            [RequestParameter("groupId")]
            public virtual string GroupId
            {
                get { return groupId; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the person to add to the group.</summary>
            [RequestParameter("personId")]
            public virtual string PersonId
            {
                get { return personId; }
            }

            /// <summary>ID of the owner of the group.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Person Body { get; set; }

            protected override string ResourceName
            {
                get { return "people"; }
            }

            protected override string MethodName
            {
                get { return "update"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion
    }

    public class PhotoAlbumsResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        #region Scope enum

        /// <summary>The collection of albums to list.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Scope
        {
            /// <summary>Albums posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        private const string Resource = "photoAlbums";

        private readonly ILog logger = LogManager.GetLogger(typeof(PhotoAlbumsResource));
        private readonly ISchemaAwareRequestExecutor service;

        public PhotoAlbumsResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Delete a photo album</summary>
        /// <param name="albumId">Required - ID of the album to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAsStream(string albumId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing photoAlbums.delete");
            return ret;
        }

        /// <summary>Get a photo album</summary>
        /// <param name="albumId">Required - ID of the album to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream GetAsStream(string albumId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing photoAlbums.get");
            return ret;
        }

        /// <summary>Create a photo album</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream InsertAsStream(string body, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing photoAlbums.insert");
            return ret;
        }

        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ListAsStream(Scope scope,
                                           string userId,
                                           [Optional] Alt? alt,
                                           [Optional] string c,
                                           [Optional] string hl,
                                           [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photoAlbums.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing photoAlbums.list");
            return ret;
        }

        /// <summary>Delete a photo album</summary>
        /// <param name="albumId">Required - ID of the album to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAndExecute(string albumId,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing photoAlbums.delete");
            return ret;
        }

        /// <summary>Get a photo album</summary>
        /// <param name="albumId">Required - ID of the album to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Album GetAndExecute(string albumId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.get");
            Album ret = service.JsonToObject<Album>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing photoAlbums.get");
            return ret;
        }

        /// <summary>Create a photo album</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Album InsertAndExecute(Album body, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photoAlbums.insert");
            Album ret =
                service.JsonToObject<Album>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing photoAlbums.insert");
            return ret;
        }

        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual AlbumsFeed ListAndExecute(Scope scope,
                                                 string userId,
                                                 [Optional] Alt? alt,
                                                 [Optional] string c,
                                                 [Optional] string hl,
                                                 [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photoAlbums.list");
            AlbumsFeed ret =
                service.JsonToObject<AlbumsFeed>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing photoAlbums.list");
            return ret;
        }

        /// <summary>Delete a photo album</summary>
        /// <param name="albumId">Required - ID of the album to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual DeleteRequest Delete(string albumId, string userId)
        {
            return new DeleteRequest(service, albumId, userId);
        }

        /// <summary>Delete a photo album</summary>
        /// <param name="albumId">Required - ID of the album to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual DeleteRequest Delete(string albumId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new DeleteRequest(service, albumId, userId, alt, hl);
        }

        /// <summary>Get a photo album</summary>
        /// <param name="albumId">Required - ID of the album to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual GetRequest Get(string albumId, string userId)
        {
            return new GetRequest(service, albumId, userId);
        }

        /// <summary>Get a photo album</summary>
        /// <param name="albumId">Required - ID of the album to get.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual GetRequest Get(string albumId, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new GetRequest(service, albumId, userId, alt, hl);
        }

        /// <summary>Create a photo album</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual InsertRequest Insert(Album body, string userId)
        {
            return new InsertRequest(service, body, userId);
        }

        /// <summary>Create a photo album</summary>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual InsertRequest Insert(Album body, string userId, [Optional] Alt? alt, [Optional] string hl)
        {
            return new InsertRequest(service, body, userId, alt, hl);
        }

        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListRequest List(Scope scope, string userId)
        {
            return new ListRequest(service, scope, userId);
        }

        /// <summary>List a user&apos;s photo albums</summary>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection of albums to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ListRequest List(Scope scope,
                                        string userId,
                                        [Optional] Alt? alt,
                                        [Optional] string c,
                                        [Optional] string hl,
                                        [Optional] Int64? maxResults)
        {
            return new ListRequest(service, scope, userId, alt, c, hl, maxResults);
        }

        #region Nested type: DeleteRequest

        public class DeleteRequest : ServiceRequest<string>
        {
            private readonly string albumId;
            private readonly string userId;

            private Alt? alt;

            private string hl;

            public DeleteRequest(ISchemaAwareRequestExecutor service, string albumId, string userId) : base(service)
            {
                this.albumId = albumId;
                this.userId = userId;
            }

            public DeleteRequest(ISchemaAwareRequestExecutor service,
                                 string albumId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                this.albumId = albumId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>ID of the album to delete.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photoAlbums"; }
            }

            protected override string MethodName
            {
                get { return "delete"; }
            }
        }

        #endregion

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Album>
        {
            private readonly string albumId;
            private readonly string userId;

            private Alt? alt;

            private string hl;

            public GetRequest(ISchemaAwareRequestExecutor service, string albumId, string userId) : base(service)
            {
                this.albumId = albumId;
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string albumId,
                              string userId,
                              [Optional] Alt? alt,
                              [Optional] string hl) : base(service)
            {
                this.albumId = albumId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>ID of the album to get.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photoAlbums"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: InsertRequest

        public class InsertRequest : ServiceRequest<Album>
        {
            private readonly string userId;
            private Alt? alt;

            private string hl;

            public InsertRequest(ISchemaAwareRequestExecutor service, Album body, string userId) : base(service)
            {
                Body = body;
                this.userId = userId;
            }

            public InsertRequest(ISchemaAwareRequestExecutor service,
                                 Album body,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Album Body { get; set; }

            protected override string ResourceName
            {
                get { return "photoAlbums"; }
            }

            protected override string MethodName
            {
                get { return "insert"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<AlbumsFeed>
        {
            private readonly Scope scope;

            private readonly string userId;
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            public ListRequest(ISchemaAwareRequestExecutor service, Scope scope, string userId) : base(service)
            {
                this.scope = scope;
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               Scope scope,
                               string userId,
                               [Optional] Alt? alt,
                               [Optional] string c,
                               [Optional] string hl,
                               [Optional] Int64? maxResults) : base(service)
            {
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>The collection of albums to list.</summary>
            [RequestParameter("scope")]
            public virtual Scope Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photoAlbums"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }

    public class PhotosResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        #region Scope enum

        /// <summary>The collection of photos to list.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Scope
        {
            /// <summary>Recent photos uploaded by the user.</summary>
            [StringValue("@recent")] Recent,
        }

        #endregion

        private const string Resource = "photos";

        private readonly ILog logger = LogManager.GetLogger(typeof(PhotosResource));
        private readonly ISchemaAwareRequestExecutor service;

        public PhotosResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Delete a photo</summary>
        /// <param name="albumId">Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoId">Required - ID of the photo to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAsStream(string albumId,
                                             string photoId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing photos.delete");
            return ret;
        }

        /// <summary>Get photo metadata</summary>
        /// <param name="albumId">Required - ID of the album containing the photo.</param>
        /// <param name="photoId">Required - ID of the photo for which to get metadata.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream GetAsStream(string albumId,
                                          string photoId,
                                          string userId,
                                          [Optional] Alt? alt,
                                          [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing photos.get");
            return ret;
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream InsertAsStream(string body,
                                             string albumId,
                                             string userId,
                                             [Optional] Alt? alt,
                                             [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing photos.insert");
            return ret;
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream Insert2AsStream(string body,
                                              string albumId,
                                              string userId,
                                              [Optional] Alt? alt,
                                              [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert2");
            Stream ret = service.ExecuteRequest(Resource, "insert2", body, parameters);
            logger.Debug("Done Executing photos.insert2");
            return ret;
        }

        /// <summary>List photos in an album</summary>
        /// <param name="albumId">Required - ID of the album for which to list photos.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ListByAlbumAsStream(string albumId,
                                                  string userId,
                                                  [Optional] Alt? alt,
                                                  [Optional] string c,
                                                  [Optional] string hl,
                                                  [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByAlbum");
            Stream ret = service.ExecuteRequest(Resource, "listByAlbum", body, parameters);
            logger.Debug("Done Executing photos.listByAlbum");
            return ret;
        }

        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scope">Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual Stream ListByScopeAsStream(Scope scope,
                                                  string userId,
                                                  [Optional] Alt? alt,
                                                  [Optional] string c,
                                                  [Optional] string hl,
                                                  [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByScope");
            Stream ret = service.ExecuteRequest(Resource, "listByScope", body, parameters);
            logger.Debug("Done Executing photos.listByScope");
            return ret;
        }

        /// <summary>Delete a photo</summary>
        /// <param name="albumId">Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoId">Required - ID of the photo to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream DeleteAndExecute(string albumId,
                                               string photoId,
                                               string userId,
                                               [Optional] Alt? alt,
                                               [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.delete");
            Stream ret = service.ExecuteRequest(Resource, "delete", body, parameters);
            logger.Debug("Done Executing photos.delete");
            return ret;
        }

        /// <summary>Get photo metadata</summary>
        /// <param name="albumId">Required - ID of the album containing the photo.</param>
        /// <param name="photoId">Required - ID of the photo for which to get metadata.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual ChiliPhotosResourceJson GetAndExecute(string albumId,
                                                             string photoId,
                                                             string userId,
                                                             [Optional] Alt? alt,
                                                             [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["photoId"] = photoId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.get");
            ChiliPhotosResourceJson ret =
                service.JsonToObject<ChiliPhotosResourceJson>(
                    service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing photos.get");
            return ret;
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual AlbumLite InsertAndExecute(AlbumLite body,
                                                  string albumId,
                                                  string userId,
                                                  [Optional] Alt? alt,
                                                  [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert");
            AlbumLite ret =
                service.JsonToObject<AlbumLite>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing photos.insert");
            return ret;
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual ChiliPhotosResourceJson Insert2AndExecute(ChiliPhotosResourceJson body,
                                                                 string albumId,
                                                                 string userId,
                                                                 [Optional] Alt? alt,
                                                                 [Optional] string hl)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing photos.insert2");
            ChiliPhotosResourceJson ret =
                service.JsonToObject<ChiliPhotosResourceJson>(
                    service.ExecuteRequest(Resource, "insert2", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing photos.insert2");
            return ret;
        }

        /// <summary>List photos in an album</summary>
        /// <param name="albumId">Required - ID of the album for which to list photos.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual PhotosFeed ListByAlbumAndExecute(string albumId,
                                                        string userId,
                                                        [Optional] Alt? alt,
                                                        [Optional] string c,
                                                        [Optional] string hl,
                                                        [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByAlbum");
            PhotosFeed ret =
                service.JsonToObject<PhotosFeed>(service.ExecuteRequest(Resource, "listByAlbum", body, parameters));
            logger.Debug("Done Executing photos.listByAlbum");
            return ret;
        }

        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scope">Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual PhotosFeed ListByScopeAndExecute(Scope scope,
                                                        string userId,
                                                        [Optional] Alt? alt,
                                                        [Optional] string c,
                                                        [Optional] string hl,
                                                        [Optional] Int64? maxResults)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxResults;
            logger.Debug("Executing photos.listByScope");
            PhotosFeed ret =
                service.JsonToObject<PhotosFeed>(service.ExecuteRequest(Resource, "listByScope", body, parameters));
            logger.Debug("Done Executing photos.listByScope");
            return ret;
        }

        /// <summary>Delete a photo</summary>
        /// <param name="albumId">Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoId">Required - ID of the photo to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual DeleteRequest Delete(string albumId, string photoId, string userId)
        {
            return new DeleteRequest(service, albumId, photoId, userId);
        }

        /// <summary>Delete a photo</summary>
        /// <param name="albumId">Required - ID of the album to which to photo belongs.</param>
        /// <param name="photoId">Required - ID of the photo to delete.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual DeleteRequest Delete(string albumId,
                                            string photoId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new DeleteRequest(service, albumId, photoId, userId, alt, hl);
        }

        /// <summary>Get photo metadata</summary>
        /// <param name="albumId">Required - ID of the album containing the photo.</param>
        /// <param name="photoId">Required - ID of the photo for which to get metadata.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual GetRequest Get(string albumId, string photoId, string userId)
        {
            return new GetRequest(service, albumId, photoId, userId);
        }

        /// <summary>Get photo metadata</summary>
        /// <param name="albumId">Required - ID of the album containing the photo.</param>
        /// <param name="photoId">Required - ID of the photo for which to get metadata.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual GetRequest Get(string albumId,
                                      string photoId,
                                      string userId,
                                      [Optional] Alt? alt,
                                      [Optional] string hl)
        {
            return new GetRequest(service, albumId, photoId, userId, alt, hl);
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual InsertRequest Insert(AlbumLite body, string albumId, string userId)
        {
            return new InsertRequest(service, body, albumId, userId);
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual InsertRequest Insert(AlbumLite body,
                                            string albumId,
                                            string userId,
                                            [Optional] Alt? alt,
                                            [Optional] string hl)
        {
            return new InsertRequest(service, body, albumId, userId, alt, hl);
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual Insert2Request Insert2(ChiliPhotosResourceJson body, string albumId, string userId)
        {
            return new Insert2Request(service, body, albumId, userId);
        }

        /// <summary>Upload a photo to an album</summary>
        /// <param name="albumId">Required - ID of the album to which to upload.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Insert2Request Insert2(ChiliPhotosResourceJson body,
                                              string albumId,
                                              string userId,
                                              [Optional] Alt? alt,
                                              [Optional] string hl)
        {
            return new Insert2Request(service, body, albumId, userId, alt, hl);
        }

        /// <summary>List photos in an album</summary>
        /// <param name="albumId">Required - ID of the album for which to list photos.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListByAlbumRequest ListByAlbum(string albumId, string userId)
        {
            return new ListByAlbumRequest(service, albumId, userId);
        }

        /// <summary>List photos in an album</summary>
        /// <param name="albumId">Required - ID of the album for which to list photos.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ListByAlbumRequest ListByAlbum(string albumId,
                                                      string userId,
                                                      [Optional] Alt? alt,
                                                      [Optional] string c,
                                                      [Optional] string hl,
                                                      [Optional] Int64? maxResults)
        {
            return new ListByAlbumRequest(service, albumId, userId, alt, c, hl, maxResults);
        }

        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scope">Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListByScopeRequest ListByScope(Scope scope, string userId)
        {
            return new ListByScopeRequest(service, scope, userId);
        }

        /// <summary>Get a user&apos;s photos</summary>
        /// <param name="scope">Required - Must be one of the following values [@recent] - The collection of photos to list.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="c">Optional - A continuation token that allows pagination.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        /// <param name="maxResults">max-results - Optional - Minimum value of 0 - Maximum value of 4294967295 - Maximum number of results to include.</param>
        public virtual ListByScopeRequest ListByScope(Scope scope,
                                                      string userId,
                                                      [Optional] Alt? alt,
                                                      [Optional] string c,
                                                      [Optional] string hl,
                                                      [Optional] Int64? maxResults)
        {
            return new ListByScopeRequest(service, scope, userId, alt, c, hl, maxResults);
        }

        #region Nested type: DeleteRequest

        public class DeleteRequest : ServiceRequest<string>
        {
            private readonly string albumId;

            private readonly string photoId;

            private readonly string userId;
            private Alt? alt;

            private string hl;

            public DeleteRequest(ISchemaAwareRequestExecutor service, string albumId, string photoId, string userId)
                : base(service)
            {
                this.albumId = albumId;
                this.photoId = photoId;
                this.userId = userId;
            }

            public DeleteRequest(ISchemaAwareRequestExecutor service,
                                 string albumId,
                                 string photoId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                this.albumId = albumId;
                this.photoId = photoId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>ID of the album to which to photo belongs.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the photo to delete.</summary>
            [RequestParameter("photoId")]
            public virtual string PhotoId
            {
                get { return photoId; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photos"; }
            }

            protected override string MethodName
            {
                get { return "delete"; }
            }
        }

        #endregion

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<ChiliPhotosResourceJson>
        {
            private readonly string albumId;

            private readonly string photoId;

            private readonly string userId;
            private Alt? alt;

            private string hl;

            public GetRequest(ISchemaAwareRequestExecutor service, string albumId, string photoId, string userId)
                : base(service)
            {
                this.albumId = albumId;
                this.photoId = photoId;
                this.userId = userId;
            }

            public GetRequest(ISchemaAwareRequestExecutor service,
                              string albumId,
                              string photoId,
                              string userId,
                              [Optional] Alt? alt,
                              [Optional] string hl) : base(service)
            {
                this.albumId = albumId;
                this.photoId = photoId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>ID of the album containing the photo.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the photo for which to get metadata.</summary>
            [RequestParameter("photoId")]
            public virtual string PhotoId
            {
                get { return photoId; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photos"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: Insert2Request

        public class Insert2Request : ServiceRequest<ChiliPhotosResourceJson>
        {
            private readonly string albumId;
            private readonly string userId;

            private Alt? alt;

            private string hl;

            public Insert2Request(ISchemaAwareRequestExecutor service,
                                  ChiliPhotosResourceJson body,
                                  string albumId,
                                  string userId) : base(service)
            {
                Body = body;
                this.albumId = albumId;
                this.userId = userId;
            }

            public Insert2Request(ISchemaAwareRequestExecutor service,
                                  ChiliPhotosResourceJson body,
                                  string albumId,
                                  string userId,
                                  [Optional] Alt? alt,
                                  [Optional] string hl) : base(service)
            {
                Body = body;
                this.albumId = albumId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>ID of the album to which to upload.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual ChiliPhotosResourceJson Body { get; set; }

            protected override string ResourceName
            {
                get { return "photos"; }
            }

            protected override string MethodName
            {
                get { return "insert2"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: InsertRequest

        public class InsertRequest : ServiceRequest<AlbumLite>
        {
            private readonly string albumId;
            private readonly string userId;

            private Alt? alt;

            private string hl;

            public InsertRequest(ISchemaAwareRequestExecutor service, AlbumLite body, string albumId, string userId)
                : base(service)
            {
                Body = body;
                this.albumId = albumId;
                this.userId = userId;
            }

            public InsertRequest(ISchemaAwareRequestExecutor service,
                                 AlbumLite body,
                                 string albumId,
                                 string userId,
                                 [Optional] Alt? alt,
                                 [Optional] string hl) : base(service)
            {
                Body = body;
                this.albumId = albumId;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>ID of the album to which to upload.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual AlbumLite Body { get; set; }

            protected override string ResourceName
            {
                get { return "photos"; }
            }

            protected override string MethodName
            {
                get { return "insert"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ListByAlbumRequest

        public class ListByAlbumRequest : ServiceRequest<PhotosFeed>
        {
            private readonly string albumId;
            private readonly string userId;

            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            public ListByAlbumRequest(ISchemaAwareRequestExecutor service, string albumId, string userId)
                : base(service)
            {
                this.albumId = albumId;
                this.userId = userId;
            }

            public ListByAlbumRequest(ISchemaAwareRequestExecutor service,
                                      string albumId,
                                      string userId,
                                      [Optional] Alt? alt,
                                      [Optional] string c,
                                      [Optional] string hl,
                                      [Optional] Int64? maxResults) : base(service)
            {
                this.albumId = albumId;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>ID of the album for which to list photos.</summary>
            [RequestParameter("albumId")]
            public virtual string AlbumId
            {
                get { return albumId; }
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photos"; }
            }

            protected override string MethodName
            {
                get { return "listByAlbum"; }
            }
        }

        #endregion

        #region Nested type: ListByScopeRequest

        public class ListByScopeRequest : ServiceRequest<PhotosFeed>
        {
            private readonly Scope scope;

            private readonly string userId;
            private Alt? alt;

            private string c;

            private string hl;

            private Int64? maxResults;

            public ListByScopeRequest(ISchemaAwareRequestExecutor service, Scope scope, string userId) : base(service)
            {
                this.scope = scope;
                this.userId = userId;
            }

            public ListByScopeRequest(ISchemaAwareRequestExecutor service,
                                      Scope scope,
                                      string userId,
                                      [Optional] Alt? alt,
                                      [Optional] string c,
                                      [Optional] string hl,
                                      [Optional] Int64? maxResults) : base(service)
            {
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.c = c;
                this.hl = hl;
                this.maxResults = maxResults;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>A continuation token that allows pagination.</summary>
            [RequestParameter("c")]
            public virtual string C
            {
                get { return c; }
                set { c = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>Maximum number of results to include.</summary>
            [RequestParameter("max-results")]
            public virtual Int64? MaxResults
            {
                get { return maxResults; }
                set { maxResults = value; }
            }

            /// <summary>The collection of photos to list.</summary>
            [RequestParameter("scope")]
            public virtual Scope Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "photos"; }
            }

            protected override string MethodName
            {
                get { return "listByScope"; }
            }
        }

        #endregion
    }

    public class RelatedResource
    {
        #region Alt enum

        /// <summary>Specifies an alternative representation type.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Alt
        {
            /// <summary>Use Atom XML format</summary>
            [StringValue("atom")] Atom,

            /// <summary>Use JSON format</summary>
            [StringValue("json")] Json,
        }

        #endregion

        #region Scope enum

        /// <summary>The collection to which the activity belongs.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Scope
        {
            /// <summary>Activities posted by the user.</summary>
            [StringValue("@self")] Self,
        }

        #endregion

        private const string Resource = "related";

        private readonly ILog logger = LogManager.GetLogger(typeof(RelatedResource));
        private readonly ISchemaAwareRequestExecutor service;

        public RelatedResource(BuzzService service)
        {
            this.service = service;
        }

        /// <summary>Get related links for an activity</summary>
        /// <param name="postId">Required - ID of the activity to which to get related links.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual Stream ListAsStream(string postId,
                                           Scope scope,
                                           string userId,
                                           [Optional] Alt? alt,
                                           [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing related.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing related.list");
            return ret;
        }

        /// <summary>Get related links for an activity</summary>
        /// <param name="postId">Required - ID of the activity to which to get related links.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual RelatedFeed ListAndExecute(string postId,
                                                  Scope scope,
                                                  string userId,
                                                  [Optional] Alt? alt,
                                                  [Optional] string hl)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            logger.Debug("Executing related.list");
            RelatedFeed ret =
                service.JsonToObject<RelatedFeed>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing related.list");
            return ret;
        }

        /// <summary>Get related links for an activity</summary>
        /// <param name="postId">Required - ID of the activity to which to get related links.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        public virtual ListRequest List(string postId, Scope scope, string userId)
        {
            return new ListRequest(service, postId, scope, userId);
        }

        /// <summary>Get related links for an activity</summary>
        /// <param name="postId">Required - ID of the activity to which to get related links.</param>
        /// <param name="scope">Required - Must be one of the following values [@self] - The collection to which the activity belongs.</param>
        /// <param name="userId">Required - ID of the user being referenced.</param>
        /// <param name="alt">Optional - Must be one of the following values [atom, json] - Specifies an alternative representation type.</param>
        /// <param name="hl">Optional - Language code to limit language results.</param>
        public virtual ListRequest List(string postId,
                                        Scope scope,
                                        string userId,
                                        [Optional] Alt? alt,
                                        [Optional] string hl)
        {
            return new ListRequest(service, postId, scope, userId, alt, hl);
        }

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<RelatedFeed>
        {
            private readonly string postId;

            private readonly Scope scope;

            private readonly string userId;
            private Alt? alt;

            private string hl;

            public ListRequest(ISchemaAwareRequestExecutor service, string postId, Scope scope, string userId)
                : base(service)
            {
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
            }

            public ListRequest(ISchemaAwareRequestExecutor service,
                               string postId,
                               Scope scope,
                               string userId,
                               [Optional] Alt? alt,
                               [Optional] string hl) : base(service)
            {
                this.postId = postId;
                this.scope = scope;
                this.userId = userId;
                this.alt = alt;
                this.hl = hl;
            }

            /// <summary>Specifies an alternative representation type.</summary>
            [RequestParameter("alt")]
            public virtual Alt? Alt
            {
                get { return alt; }
                set { alt = value; }
            }

            /// <summary>Language code to limit language results.</summary>
            [RequestParameter("hl")]
            public virtual string Hl
            {
                get { return hl; }
                set { hl = value; }
            }

            /// <summary>ID of the activity to which to get related links.</summary>
            [RequestParameter("postId")]
            public virtual string PostId
            {
                get { return postId; }
            }

            /// <summary>The collection to which the activity belongs.</summary>
            [RequestParameter("scope")]
            public virtual Scope Scope
            {
                get { return scope; }
            }

            /// <summary>ID of the user being referenced.</summary>
            [RequestParameter("userId")]
            public virtual string UserId
            {
                get { return userId; }
            }

            protected override string ResourceName
            {
                get { return "related"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }
}