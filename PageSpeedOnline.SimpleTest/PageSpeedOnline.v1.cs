//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class Result : IResponse
    {
        /// <summary>Localized Page Speed results. Contains a ruleResults entry for each Page Speed rule instantiated and run by the server.</summary>
        [JsonProperty("formattedResults")]
        public virtual FormattedResultsData FormattedResults { get; set; }

        /// <summary>Canonicalized and final URL for the document, after following page redirects (if any).</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>List of rules that were specified in the request, but which the server did not know how to instantiate.</summary>
        [JsonProperty("invalidRules")]
        public virtual IList<String> InvalidRules { get; set; }

        /// <summary>Kind of result.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc.</summary>
        [JsonProperty("pageStats")]
        public virtual PageStatsData PageStats { get; set; }

        /// <summary>Response code for the document. 200 indicates a normal page load. 4xx/5xx indicates an error.</summary>
        [JsonProperty("responseCode")]
        public virtual long ResponseCode { get; set; }

        /// <summary>The Page Speed Score (0-100), which indicates how much faster a page could be. A high score indicates little room for improvement, while a lower score indicates more room for improvement.</summary>
        [JsonProperty("score")]
        public virtual long Score { get; set; }

        /// <summary>Title of the page, as displayed in the browser&apos;s title bar.</summary>
        [JsonProperty("title")]
        public virtual string Title { get; set; }

        /// <summary>The version of the Page Speed SDK used to generate these results.</summary>
        [JsonProperty("version")]
        public virtual VersionData Version { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion

        #region Nested type: FormattedResultsData

        /// <summary>Localized Page Speed results. Contains a ruleResults entry for each Page Speed rule instantiated and run by the server.</summary>
        public class FormattedResultsData
        {
            /// <summary>The locale of the formattedResults, e.g. &quot;en_US&quot;.</summary>
            [JsonProperty("locale")]
            public virtual string Locale { get; set; }

            /// <summary>Dictionary of formatted rule results, with one entry for each Page Speed rule instantiated and run by the server.</summary>
            [JsonProperty("ruleResults")]
            public virtual RuleResultsData RuleResults { get; set; }

            #region Nested type: RuleResultsData

            /// <summary>Dictionary of formatted rule results, with one entry for each Page Speed rule instantiated and run by the server.</summary>
            public class RuleResultsData : Dictionary<string, RuleResultsData.RuleResultsDataSchema>
            {
                #region Nested type: RuleResultsDataSchema

                /// <summary>The enum-like identifier for this rule. For instance &quot;EnableKeepAlive&quot; or &quot;AvoidCssImport&quot;. Not localized.</summary>
                public class RuleResultsDataSchema
                {
                    /// <summary>Localized name of the rule, intended for presentation to a user.</summary>
                    [JsonProperty("localizedRuleName")]
                    public virtual string LocalizedRuleName { get; set; }

                    /// <summary>The impact (unbounded floating point value) that implementing the suggestions for this rule would have on making the page faster.  Impact is comparable between rules to determine which rule&apos;s suggestions would have a higher or lower impact on making a page faster. For instance, if enabling compression would save 1MB, while optimizing images would save 500kB, the enable compression rule would have 2x the impact of the image optimization rule, all other things being equal.</summary>
                    [JsonProperty("ruleImpact")]
                    public virtual double RuleImpact { get; set; }

                    /// <summary>The score (0-100) for this rule. The rule score indicates how well a page implements the recommendations for the given rule. For instance, if none of the compressible resources on a page are compressed, the rule score would be 0, while if all of the compressible resources on a page are compressed, the rule score would be 100.</summary>
                    [JsonProperty("ruleScore")]
                    public virtual long RuleScore { get; set; }

                    /// <summary>List of blocks of URLs. Each block may contain a heading and a list of URLs. Each URL may optionally include additional details.</summary>
                    [JsonProperty("urlBlocks")]
                    public virtual IList<UrlBlocksData> UrlBlocks { get; set; }

                    #region Nested type: UrlBlocksData

                    public class UrlBlocksData
                    {
                        /// <summary>Heading to be displayed with the list of URLs.</summary>
                        [JsonProperty("header")]
                        public virtual HeaderData Header { get; set; }

                        /// <summary>List of entries that provide information about URLs in the url block. Optional.</summary>
                        [JsonProperty("urls")]
                        public virtual IList<UrlsData> Urls { get; set; }

                        #region Nested type: HeaderData

                        /// <summary>Heading to be displayed with the list of URLs.</summary>
                        public class HeaderData
                        {
                            /// <summary>List of arguments for the format string.</summary>
                            [JsonProperty("args")]
                            public virtual IList<ArgsData> Args { get; set; }

                            /// <summary>A localized format string with $N placeholders, where N is the 1-indexed argument number, e.g. &apos;Minifying the following $1 resources would save a total of $2 bytes&apos;.</summary>
                            [JsonProperty("format")]
                            public virtual string Format { get; set; }

                            #region Nested type: ArgsData

                            public class ArgsData
                            {
                                /// <summary>Type of argument. One of URL, STRING_LITERAL, INT_LITERAL, BYTES, or DURATION.</summary>
                                [JsonProperty("type")]
                                public virtual string Type { get; set; }

                                /// <summary>Argument value, as a localized string.</summary>
                                [JsonProperty("value")]
                                public virtual string Value { get; set; }
                            }

                            #endregion
                        }

                        #endregion

                        #region Nested type: UrlsData

                        public class UrlsData
                        {
                            /// <summary>List of entries that provide additional details about a single URL. Optional.</summary>
                            [JsonProperty("details")]
                            public virtual IList<DetailsData> Details { get; set; }

                            /// <summary>A format string that gives information about the URL, and a list of arguments for that format string.</summary>
                            [JsonProperty("result")]
                            public virtual ResultData Result { get; set; }

                            #region Nested type: DetailsData

                            public class DetailsData
                            {
                                /// <summary>List of arguments for the format string.</summary>
                                [JsonProperty("args")]
                                public virtual IList<ArgsData> Args { get; set; }

                                /// <summary>A localized format string with $N placeholders, where N is the 1-indexed argument number, e.g. &apos;Unnecessary metadata for this resource adds an additional $1 bytes to its download size&apos;.</summary>
                                [JsonProperty("format")]
                                public virtual string Format { get; set; }

                                #region Nested type: ArgsData

                                public class ArgsData
                                {
                                    /// <summary>Type of argument. One of URL, STRING_LITERAL, INT_LITERAL, BYTES, or DURATION.</summary>
                                    [JsonProperty("type")]
                                    public virtual string Type { get; set; }

                                    /// <summary>Argument value, as a localized string.</summary>
                                    [JsonProperty("value")]
                                    public virtual string Value { get; set; }
                                }

                                #endregion
                            }

                            #endregion

                            #region Nested type: ResultData

                            /// <summary>A format string that gives information about the URL, and a list of arguments for that format string.</summary>
                            public class ResultData
                            {
                                /// <summary>List of arguments for the format string.</summary>
                                [JsonProperty("args")]
                                public virtual IList<ArgsData> Args { get; set; }

                                /// <summary>A localized format string with $N placeholders, where N is the 1-indexed argument number, e.g. &apos;Minifying the resource at URL $1 can save $2 bytes&apos;.</summary>
                                [JsonProperty("format")]
                                public virtual string Format { get; set; }

                                #region Nested type: ArgsData

                                public class ArgsData
                                {
                                    /// <summary>Type of argument. One of URL, STRING_LITERAL, INT_LITERAL, BYTES, or DURATION.</summary>
                                    [JsonProperty("type")]
                                    public virtual string Type { get; set; }

                                    /// <summary>Argument value, as a localized string.</summary>
                                    [JsonProperty("value")]
                                    public virtual string Value { get; set; }
                                }

                                #endregion
                            }

                            #endregion
                        }

                        #endregion
                    }

                    #endregion
                }

                #endregion
            }

            #endregion
        }

        #endregion

        #region Nested type: PageStatsData

        /// <summary>Summary statistics for the page, such as number of JavaScript bytes, number of HTML bytes, etc.</summary>
        public class PageStatsData
        {
            /// <summary>Number of uncompressed response bytes for CSS resources on the page.</summary>
            [JsonProperty("cssResponseBytes")]
            public virtual string CssResponseBytes { get; set; }

            /// <summary>Number of response bytes for flash resources on the page.</summary>
            [JsonProperty("flashResponseBytes")]
            public virtual string FlashResponseBytes { get; set; }

            /// <summary>Number of uncompressed response bytes for the main HTML document and all iframes on the page.</summary>
            [JsonProperty("htmlResponseBytes")]
            public virtual string HtmlResponseBytes { get; set; }

            /// <summary>Number of response bytes for image resources on the page.</summary>
            [JsonProperty("imageResponseBytes")]
            public virtual string ImageResponseBytes { get; set; }

            /// <summary>Number of uncompressed response bytes for JS resources on the page.</summary>
            [JsonProperty("javascriptResponseBytes")]
            public virtual string JavascriptResponseBytes { get; set; }

            /// <summary>Number of CSS resources referenced by the page.</summary>
            [JsonProperty("numberCssResources")]
            public virtual long NumberCssResources { get; set; }

            /// <summary>Number of unique hosts referenced by the page.</summary>
            [JsonProperty("numberHosts")]
            public virtual long NumberHosts { get; set; }

            /// <summary>Number of JavaScript resources referenced by the page.</summary>
            [JsonProperty("numberJsResources")]
            public virtual long NumberJsResources { get; set; }

            /// <summary>Number of HTTP resources loaded by the page.</summary>
            [JsonProperty("numberResources")]
            public virtual long NumberResources { get; set; }

            /// <summary>Number of static (i.e. cacheable) resources on the page.</summary>
            [JsonProperty("numberStaticResources")]
            public virtual long NumberStaticResources { get; set; }

            /// <summary>Number of response bytes for other resources on the page.</summary>
            [JsonProperty("otherResponseBytes")]
            public virtual string OtherResponseBytes { get; set; }

            /// <summary>Number of uncompressed response bytes for text resources not covered by other statistics (i.e non-HTML, non-script, non-CSS resources) on the page.</summary>
            [JsonProperty("textResponseBytes")]
            public virtual string TextResponseBytes { get; set; }

            /// <summary>Total size of all request bytes sent by the page.</summary>
            [JsonProperty("totalRequestBytes")]
            public virtual string TotalRequestBytes { get; set; }
        }

        #endregion

        #region Nested type: VersionData

        /// <summary>The version of the Page Speed SDK used to generate these results.</summary>
        public class VersionData
        {
            /// <summary>The major version number of the Page Speed SDK used to generate these results.</summary>
            [JsonProperty("major")]
            public virtual long Major { get; set; }

            /// <summary>The minor version number of the Page Speed SDK used to generate these results.</summary>
            [JsonProperty("minor")]
            public virtual long Minor { get; set; }
        }

        #endregion
    }
}

namespace Google.Apis
{
    public class PagespeedonlineService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        private const string Version = "v1";

        private const string Name = "pagespeedonline";

        private const string BaseUri = "https://www.googleapis.com/pagespeedonline/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;
        private readonly IAuthenticator authenticator;
        private readonly IService genericService;

        private readonly PagespeedapiResource pagespeedapi;

        public PagespeedonlineService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            pagespeedapi = new PagespeedapiResource(this);
        }

        public PagespeedonlineService()
            : this(
                new DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual PagespeedapiResource Pagespeedapi
        {
            get { return pagespeedapi; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class PagespeedapiResource
    {
        #region Strategy enum

        /// <summary>The analysis strategy to use</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Strategy
        {
            /// <summary>Fetch and analyze the URL for desktop browsers</summary>
            [StringValue("desktop")] Desktop,

            /// <summary>Fetch and analyze the URL for mobile devices</summary>
            [StringValue("mobile")] Mobile,
        }

        #endregion

        private const string Resource = "pagespeedapi";

        private readonly ILog logger = LogManager.GetLogger(typeof(PagespeedapiResource));
        private readonly ISchemaAwareRequestExecutor service;

        public PagespeedapiResource(PagespeedonlineService service)
        {
            this.service = service;
        }

        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="url">Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        /// <param name="locale">Optional - Must match pattern [a-zA-Z]+(_[a-zA-Z]+)? - The locale used to localize formatted results</param>
        /// <param name="rule">Optional - Must match pattern [a-zA-Z]+ - A Page Speed rule to run; if none are given, all rules are run</param>
        /// <param name="strategy">Optional - Must be one of the following values [desktop, mobile] - The analysis strategy to use</param>
        public virtual Stream RunpagespeedAsStream(string url,
                                                   [Optional] string locale,
                                                   [Optional] Repeatable<string> rule,
                                                   [Optional] Strategy? strategy)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["url"] = url;
            parameters["locale"] = locale;
            parameters["rule"] = rule;
            parameters["strategy"] = strategy;
            logger.Debug("Executing pagespeedapi.runpagespeed");
            Stream ret = service.ExecuteRequest(Resource, "runpagespeed", body, parameters);
            logger.Debug("Done Executing pagespeedapi.runpagespeed");
            return ret;
        }

        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="url">Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        /// <param name="locale">Optional - Must match pattern [a-zA-Z]+(_[a-zA-Z]+)? - The locale used to localize formatted results</param>
        /// <param name="rule">Optional - Must match pattern [a-zA-Z]+ - A Page Speed rule to run; if none are given, all rules are run</param>
        /// <param name="strategy">Optional - Must be one of the following values [desktop, mobile] - The analysis strategy to use</param>
        public virtual Result RunpagespeedAndExecute(string url,
                                                     [Optional] string locale,
                                                     [Optional] Repeatable<string> rule,
                                                     [Optional] Strategy? strategy)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["url"] = url;
            parameters["locale"] = locale;
            parameters["rule"] = rule;
            parameters["strategy"] = strategy;
            logger.Debug("Executing pagespeedapi.runpagespeed");
            Result ret =
                service.JsonToObject<Result>(service.ExecuteRequest(Resource, "runpagespeed", body, parameters));
            logger.Debug("Done Executing pagespeedapi.runpagespeed");
            return ret;
        }

        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="url">Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        public virtual RunpagespeedRequest Runpagespeed(string url)
        {
            return new RunpagespeedRequest(service, url);
        }

        /// <summary>Runs Page Speed analysis on the page at the specified URL, and returns a Page Speed score, a list of suggestions to make that page faster, and other information.</summary>
        /// <param name="url">Required - Must match pattern http(s)?://.* - The URL to fetch and analyze</param>
        /// <param name="locale">Optional - Must match pattern [a-zA-Z]+(_[a-zA-Z]+)? - The locale used to localize formatted results</param>
        /// <param name="rule">Optional - Must match pattern [a-zA-Z]+ - A Page Speed rule to run; if none are given, all rules are run</param>
        /// <param name="strategy">Optional - Must be one of the following values [desktop, mobile] - The analysis strategy to use</param>
        public virtual RunpagespeedRequest Runpagespeed(string url,
                                                        [Optional] string locale,
                                                        [Optional] Repeatable<string> rule,
                                                        [Optional] Strategy? strategy)
        {
            return new RunpagespeedRequest(service, url, locale, rule, strategy);
        }

        #region Nested type: RunpagespeedRequest

        public class RunpagespeedRequest : ServiceRequest<Result>
        {
            private readonly string url;
            private string locale;

            private Repeatable<string> rule;

            private Strategy? strategy;

            public RunpagespeedRequest(ISchemaAwareRequestExecutor service, string url) : base(service)
            {
                this.url = url;
            }

            public RunpagespeedRequest(ISchemaAwareRequestExecutor service,
                                       string url,
                                       [Optional] string locale,
                                       [Optional] Repeatable<string> rule,
                                       [Optional] Strategy? strategy) : base(service)
            {
                this.url = url;
                this.locale = locale;
                this.rule = rule;
                this.strategy = strategy;
            }

            /// <summary>The locale used to localize formatted results</summary>
            [RequestParameter("locale")]
            public virtual string Locale
            {
                get { return locale; }
                set { locale = value; }
            }

            /// <summary>A Page Speed rule to run; if none are given, all rules are run</summary>
            [RequestParameter("rule")]
            public virtual Repeatable<string> Rule
            {
                get { return rule; }
                set { rule = value; }
            }

            /// <summary>The analysis strategy to use</summary>
            [RequestParameter("strategy")]
            public virtual Strategy? Strategy
            {
                get { return strategy; }
                set { strategy = value; }
            }

            /// <summary>The URL to fetch and analyze</summary>
            [RequestParameter("url")]
            public virtual string Url
            {
                get { return url; }
            }

            protected override string ResourceName
            {
                get { return "pagespeedapi"; }
            }

            protected override string MethodName
            {
                get { return "runpagespeed"; }
            }
        }

        #endregion
    }
}