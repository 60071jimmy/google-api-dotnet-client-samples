//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class AnalyticsSnapshot
    {
        /// <summary>Top browsers, e.g. &quot;Chrome&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("browsers")]
        public virtual IList<StringCount> Browsers { get; set; }

        /// <summary>Top countries (expressed as country codes), e.g. &quot;US&quot; or &quot;DE&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("countries")]
        public virtual IList<StringCount> Countries { get; set; }

        /// <summary>Number of clicks on all goo.gl short URLs pointing to this long URL.</summary>
        [JsonProperty("longUrlClicks")]
        public virtual string LongUrlClicks { get; set; }

        /// <summary>Top platforms or OSes, e.g. &quot;Windows&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("platforms")]
        public virtual IList<StringCount> Platforms { get; set; }

        /// <summary>Top referring hosts, e.g. &quot;www.google.com&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("referrers")]
        public virtual IList<StringCount> Referrers { get; set; }

        /// <summary>Number of clicks on this short URL.</summary>
        [JsonProperty("shortUrlClicks")]
        public virtual string ShortUrlClicks { get; set; }
    }

    public class AnalyticsSummary
    {
        [JsonProperty("allTime")]
        public virtual AnalyticsSnapshot AllTime { get; set; }

        [JsonProperty("day")]
        public virtual AnalyticsSnapshot Day { get; set; }

        [JsonProperty("month")]
        public virtual AnalyticsSnapshot Month { get; set; }

        [JsonProperty("twoHours")]
        public virtual AnalyticsSnapshot TwoHours { get; set; }

        [JsonProperty("week")]
        public virtual AnalyticsSnapshot Week { get; set; }
    }

    public class StringCount
    {
        /// <summary>Number of clicks for this top entry, e.g. for this particular country or browser.</summary>
        [JsonProperty("count")]
        public virtual string Count { get; set; }

        /// <summary>Label assigned to this top entry, e.g. &quot;US&quot; or &quot;Chrome&quot;.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }
    }

    public class Url : IResponse
    {
        [JsonProperty("analytics")]
        public virtual AnalyticsSummary Analytics { get; set; }

        /// <summary>Time the short URL was created; ISO 8601 representation using the yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZZ format, e.g. &quot;2010-10-14T19:01:24.944+00:00&quot;.</summary>
        [JsonProperty("created")]
        public virtual string Created { get; set; }

        /// <summary>Short URL, e.g. &quot;http://goo.gl/l6MS&quot;.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>The fixed string &quot;urlshortener#url&quot;.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Long URL, e.g. &quot;http://www.google.com/&quot;. Might not be present if the status is &quot;REMOVED&quot;.</summary>
        [JsonProperty("longUrl")]
        public virtual string LongUrl { get; set; }

        /// <summary>Status of the target URL. Possible values: &quot;OK&quot;, &quot;MALWARE&quot;, &quot;PHISHING&quot;, or &quot;REMOVED&quot;. A URL might be marked &quot;REMOVED&quot; if it was flagged as spam, for example.</summary>
        [JsonProperty("status")]
        public virtual string Status { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }

    public class UrlHistory : IResponse
    {
        /// <summary>A list of URL resources.</summary>
        [JsonProperty("items")]
        public virtual IList<Url> Items { get; set; }

        /// <summary>Number of items returned with each full &quot;page&quot; of results. Note that the last page could have fewer items than the &quot;itemsPerPage&quot; value.</summary>
        [JsonProperty("itemsPerPage")]
        public virtual long ItemsPerPage { get; set; }

        /// <summary>The fixed string &quot;urlshortener#urlHistory&quot;.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>A token to provide to get the next page of results.</summary>
        [JsonProperty("nextPageToken")]
        public virtual string NextPageToken { get; set; }

        /// <summary>Total number of short URLs associated with this user (may be approximate).</summary>
        [JsonProperty("totalItems")]
        public virtual long TotalItems { get; set; }

        #region IResponse Members

        [JsonProperty("error")]
        public virtual RequestError Error { get; set; }

        #endregion
    }
}

namespace Google.Apis
{
    public class UrlshortenerService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        #region Scopes enum

        /// <summary>A list of all OAuth2.0 scopes. Each of these scopes relates to a permission or group of permissions that different methods of this API may need.</summary>
        public enum Scopes
        {
            /// <summary>Manage your goo.gl short URLs</summary>
            [StringValue("https://www.googleapis.com/auth/urlshortener")] Urlshortener,
        }

        #endregion

        private const string Version = "v1";

        private const string Name = "urlshortener";

        private const string BaseUri = "https://www.googleapis.com/urlshortener/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;
        private readonly IAuthenticator authenticator;
        private readonly IService genericService;

        private readonly UrlResource url;

        public UrlshortenerService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            url = new UrlResource(this);
        }

        public UrlshortenerService()
            : this(
                new DiscoveryService(
                    new CachedWebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(new Uri(BaseUri))),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual UrlResource Url
        {
            get { return url; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return
                request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual string ObjectToJson(object obj)
        {
            return genericService.SerializeRequest(obj);
        }

        public virtual T JsonToObject<T>(Stream stream)
        {
            return genericService.DeserializeResponse<T>(stream);
        }

        #endregion

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual void RegisterSerializer(ISerializer serializer)
        {
            genericService.Serializer = serializer;
        }
    }

    public class UrlResource
    {
        #region Projection enum

        /// <summary>Additional information to return.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum Projection
        {
            /// <summary>Returns only click counts.</summary>
            [StringValue("ANALYTICS_CLICKS")] ANALYTICS_CLICKS,

            /// <summary>Returns only top string counts.</summary>
            [StringValue("ANALYTICS_TOP_STRINGS")] ANALYTICS_TOP_STRINGS,

            /// <summary>Returns the creation timestamp and all available analytics.</summary>
            [StringValue("FULL")] FULL,
        }

        #endregion

        #region ProjectionEnum enum

        /// <summary>Additional information to return.</summary>
        [TypeConverter(typeof(EnumStringValueTypeConverter))]
        public enum ProjectionEnum
        {
            /// <summary>Returns short URL click counts.</summary>
            [StringValue("ANALYTICS_CLICKS")] ANALYTICS_CLICKS,

            /// <summary>Returns short URL click counts.</summary>
            [StringValue("FULL")] FULL,
        }

        #endregion

        private const string Resource = "url";

        private readonly ILog logger = LogManager.GetLogger(typeof(UrlResource));
        private readonly ISchemaAwareRequestExecutor service;

        public UrlResource(UrlshortenerService service)
        {
            this.service = service;
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, ANALYTICS_TOP_STRINGS, FULL] - Additional information to return.</param>
        public virtual Stream GetAsStream(string shortUrl, [Optional] Projection? projection)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["shortUrl"] = shortUrl;
            parameters["projection"] = projection;
            logger.Debug("Executing url.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing url.get");
            return ret;
        }

        /// <summary>Creates a new short URL.</summary>
        public virtual Stream InsertAsStream(string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            logger.Debug("Executing url.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing url.insert");
            return ret;
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, FULL] - Additional information to return.</param>
        /// <param name="startToken">start-token - Optional - Token for requesting successive pages of results.</param>
        public virtual Stream ListAsStream([Optional] ProjectionEnum? projection, [Optional] string startToken)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["projection"] = projection;
            parameters["start-token"] = startToken;
            logger.Debug("Executing url.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing url.list");
            return ret;
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, ANALYTICS_TOP_STRINGS, FULL] - Additional information to return.</param>
        public virtual Url GetAndExecute(string shortUrl, [Optional] Projection? projection)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["shortUrl"] = shortUrl;
            parameters["projection"] = projection;
            logger.Debug("Executing url.get");
            Url ret = service.JsonToObject<Url>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing url.get");
            return ret;
        }

        /// <summary>Creates a new short URL.</summary>
        public virtual Url InsertAndExecute(Url body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            logger.Debug("Executing url.insert");
            Url ret =
                service.JsonToObject<Url>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing url.insert");
            return ret;
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, FULL] - Additional information to return.</param>
        /// <param name="startToken">start-token - Optional - Token for requesting successive pages of results.</param>
        public virtual UrlHistory ListAndExecute([Optional] ProjectionEnum? projection, [Optional] string startToken)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["projection"] = projection;
            parameters["start-token"] = startToken;
            logger.Debug("Executing url.list");
            UrlHistory ret =
                service.JsonToObject<UrlHistory>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing url.list");
            return ret;
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        public virtual GetRequest Get(string shortUrl)
        {
            return new GetRequest(service, shortUrl);
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, ANALYTICS_TOP_STRINGS, FULL] - Additional information to return.</param>
        public virtual GetRequest Get(string shortUrl, [Optional] Projection? projection)
        {
            return new GetRequest(service, shortUrl, projection);
        }

        /// <summary>Creates a new short URL.</summary>
        public virtual InsertRequest Insert(Url body)
        {
            return new InsertRequest(service, body);
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        public virtual ListRequest List()
        {
            return new ListRequest(service);
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, FULL] - Additional information to return.</param>
        /// <param name="startToken">start-token - Optional - Token for requesting successive pages of results.</param>
        public virtual ListRequest List([Optional] ProjectionEnum? projection, [Optional] string startToken)
        {
            return new ListRequest(service, projection, startToken);
        }

        #region Nested type: GetRequest

        public class GetRequest : ServiceRequest<Url>
        {
            private readonly string shortUrl;
            private Projection? projection;

            public GetRequest(ISchemaAwareRequestExecutor service, string shortUrl) : base(service)
            {
                this.shortUrl = shortUrl;
            }

            public GetRequest(ISchemaAwareRequestExecutor service, string shortUrl, [Optional] Projection? projection)
                : base(service)
            {
                this.shortUrl = shortUrl;
                this.projection = projection;
            }

            /// <summary>Additional information to return.</summary>
            [RequestParameter("projection")]
            public virtual Projection? Projection
            {
                get { return projection; }
                set { projection = value; }
            }

            /// <summary>The short URL, including the protocol.</summary>
            [RequestParameter("shortUrl")]
            public virtual string ShortUrl
            {
                get { return shortUrl; }
            }

            protected override string ResourceName
            {
                get { return "url"; }
            }

            protected override string MethodName
            {
                get { return "get"; }
            }
        }

        #endregion

        #region Nested type: InsertRequest

        public class InsertRequest : ServiceRequest<Url>
        {
            public InsertRequest(ISchemaAwareRequestExecutor service, Url body) : base(service)
            {
                Body = body;
            }

            /// <summary>Gets/Sets the Body of this Request.</summary>
            public virtual Url Body { get; set; }

            protected override string ResourceName
            {
                get { return "url"; }
            }

            protected override string MethodName
            {
                get { return "insert"; }
            }

            protected override object GetBody()
            {
                return Body;
            }
        }

        #endregion

        #region Nested type: ListRequest

        public class ListRequest : ServiceRequest<UrlHistory>
        {
            private ProjectionEnum? projection;

            private string startToken;

            public ListRequest(ISchemaAwareRequestExecutor service) : base(service) {}

            public ListRequest(ISchemaAwareRequestExecutor service,
                               [Optional] ProjectionEnum? projection,
                               [Optional] string startToken) : base(service)
            {
                this.projection = projection;
                this.startToken = startToken;
            }

            /// <summary>Additional information to return.</summary>
            [RequestParameter("projection")]
            public virtual ProjectionEnum? Projection
            {
                get { return projection; }
                set { projection = value; }
            }

            /// <summary>Token for requesting successive pages of results.</summary>
            [RequestParameter("start-token")]
            public virtual string StartToken
            {
                get { return startToken; }
                set { startToken = value; }
            }

            protected override string ResourceName
            {
                get { return "url"; }
            }

            protected override string MethodName
            {
                get { return "list"; }
            }
        }

        #endregion
    }
}